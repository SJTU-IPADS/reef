#include <hip/hip_runtime.h>
__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[4];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 175232))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 350464))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 700928))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 876160))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1051392))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1401856))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1577088))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 175232))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 350464))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 525696))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 876160))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1051392))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1226624))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1577088))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1927552))]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 700928))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 876160))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1051392))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1401856))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1577088))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2102784))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2278016))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2453248))]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 876160))] * -1.000000e+00f), -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1051392))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1226624))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1577088))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1927552))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2278016))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2453248))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2628480))]);
  for (int ax2_inner = 0; ax2_inner < 2; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      if (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 2) + ax2_inner) < 147) {
        if ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2) + ax3_inner) < 147) {
          T_relu[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476) * 21609) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 294)) + (ax2_inner * 147)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2)) + ax3_inner))] = max((inverse[(((ax2_inner * 2) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476))]), 0.000000e+00f);
        }
      }
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_27_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[138];
  __shared__ float placeholder_shared[504];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 2) + ((((int)threadIdx.x) * 3) / 23)) < 6) {
      if (((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)) < 138) {
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[(((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)))] = (((3 <= ((((int)threadIdx.x) * 3) % 23)) && (((((int)threadIdx.x) * 3) % 23) < 20)) ? placeholder[(((((((rc_outer * 1734) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.x) * 3) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((int)threadIdx.x) * 3) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 3) + 1) / 23)) < 6) {
      if (((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)) < 137) {
        if (((int)threadIdx.x) < 15) {
          pad_temp_shared[((((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)) + 1))] = (((3 <= (((((int)threadIdx.x) * 3) + 1) % 23)) && ((((((int)threadIdx.x) * 3) + 1) % 23) < 20)) ? placeholder[(((((((rc_outer * 1734) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.x) * 3) + 1) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 3) + 1) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 3) + 2) / 23)) < 6) {
      if (((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)) < 136) {
        if (((int)threadIdx.x) < 15) {
          pad_temp_shared[((((((int)threadIdx.z) * 46) + (((int)threadIdx.x) * 3)) + 2))] = (((3 <= (((((int)threadIdx.x) * 3) + 2) % 23)) && ((((((int)threadIdx.x) * 3) + 2) % 23) < 20)) ? placeholder[(((((((rc_outer * 1734) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.x) * 3) + 2) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 3) + 2) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    placeholder_shared[(((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + (((((int)threadIdx.x) * 10) / 42) * 1344)) + (rc_outer * 42)) + ((((int)threadIdx.x) * 10) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 1) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 1) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 2) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 2) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 3) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 3) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 4) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 4) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 5))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 5) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 5) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 6))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 6) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 6) % 42)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 7))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 7) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 7) % 42)))];
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 10) + 8) / 42)) < 12) {
      if (((((int)threadIdx.z) * 24) + (((((int)threadIdx.x) * 10) + 8) / 7)) < 72) {
        if (((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) < 496) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 8))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 8) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 8) % 42)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 10) + 9) / 42)) < 12) {
      if (((((int)threadIdx.z) * 24) + (((((int)threadIdx.x) * 10) + 9) / 7)) < 72) {
        if (((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) < 495) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 9))] = placeholder1[((((((((int)blockIdx.z) * 16128) + (((int)threadIdx.z) * 5376)) + ((((((int)threadIdx.x) * 10) + 9) / 42) * 1344)) + (rc_outer * 42)) + (((((int)threadIdx.x) * 10) + 9) % 42)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 42) + 126))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 42) + 252))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 42) + 378))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 42) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 42) + 127))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 42) + 253))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 42) + 379))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 42) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 42) + 128))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 42) + 254))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 42) + 380))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 42) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 42) + 129))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 42) + 255))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 42) + 381))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 42) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 42) + 130))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 42) + 256))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 42) + 382))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 42) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 42) + 131))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 42) + 257))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 42) + 383))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 42) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 42) + 132))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 42) + 258))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 42) + 384))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 42) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 42) + 133))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 42) + 259))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 42) + 385))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 42) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 42) + 134))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 42) + 260))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 42) + 386))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 42) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 42) + 135))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 42) + 261))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 42) + 387))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 42) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 42) + 136))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 42) + 262))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 42) + 388))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 42) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 42) + 137))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 42) + 263))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 42) + 389))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 42) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 42) + 138))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 42) + 264))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 42) + 390))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 42) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 42) + 139))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 42) + 265))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 42) + 391))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 42) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 42) + 140))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 42) + 266))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 42) + 392))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 42) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 42) + 141))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 42) + 267))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 42) + 393))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 42) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 42) + 142))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 42) + 268))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 42) + 394))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 42) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 42) + 143))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 42) + 269))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 42) + 395))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 42) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 42) + 144))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 42) + 270))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 42) + 396))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 42) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 42) + 145))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 42) + 271))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 42) + 397))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 42) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 42) + 146))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 42) + 272))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 42) + 398))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 42) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 42) + 147))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 42) + 273))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 42) + 399))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 42) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 42) + 148))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 42) + 274))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 42) + 400))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 42) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 42) + 149))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 42) + 275))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 42) + 401))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 42) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 42) + 150))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 42) + 276))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 42) + 402))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 42) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 42) + 151))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 42) + 277))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 42) + 403))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 42) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 42) + 152))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 42) + 278))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 42) + 404))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 42) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 42) + 153))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 42) + 279))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 42) + 405))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 42) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 42) + 154))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 42) + 280))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 42) + 406))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 42) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 42) + 155))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 42) + 281))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 42) + 407))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 42) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 42) + 156))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 42) + 282))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 42) + 408))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 42) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 42) + 157))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 42) + 283))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 42) + 409))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 42) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 42) + 158))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 42) + 284))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 42) + 410))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 42) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 42) + 159))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 42) + 285))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 42) + 411))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 42) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 42) + 160))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 42) + 286))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 42) + 412))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 42) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 42) + 161))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 42) + 287))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 42) + 413))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 42) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 42) + 162))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 42) + 288))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 42) + 414))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 42) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 42) + 163))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 42) + 289))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 42) + 415))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 42) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 42) + 164))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 42) + 290))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 42) + 416))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 42) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 42) + 165))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 42) + 291))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 42) + 417))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 42) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 42) + 166))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 42) + 292))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 42) + 418))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 42) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 42) + 167))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 42) + 293))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 42) + 419))], compute[(3)]);
  }
  T_relu[(((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 12) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 867))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 3))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 1734))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 6))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 2601))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 9))]), 0.000000e+00f);
}

__device__ void fused_concatenate_11_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 5; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) < 313600) {
      T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((274400 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 274400))] : ((156800 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 156800))] : ((78400 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder2[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 78400))] : placeholder3[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))])));
    }
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[4];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 31104))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 62208))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 124416))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 31104))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 62208))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 93312))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 217728))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 342144))]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 124416))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 373248))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 404352))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 435456))]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))] * -1.000000e+00f), -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 217728))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 342144))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 404352))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 435456))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 466560))]);
  for (int ax2_inner = 0; ax2_inner < 2; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      if (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + ax2_inner) < 35) {
        if ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + ax3_inner) < 35) {
          T_relu[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324) * 1225) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 70)) + (ax2_inner * 35)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2)) + ax3_inner))] = max((inverse[(((ax2_inner * 2) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324))]), 0.000000e+00f);
        }
      }
    }
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[16];
  float data_pack_local[16];
  for (int eps = 0; eps < 4; ++eps) {
    for (int nu = 0; nu < 4; ++nu) {
      d[(((eps * 4) + nu))] = placeholder[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476) * 22201) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 298)) + (eps * 149)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2)) + nu))];
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(2)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(1)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(8)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(10)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(9)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(11)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(4)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(6)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(5)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(6)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(9)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(14)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(14)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(13)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(14)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(15)]);
  for (int eps1 = 0; eps1 < 4; ++eps1) {
    for (int nu1 = 0; nu1 < 4; ++nu1) {
      data_pack[(((((eps1 * 700928) + (nu1 * 175232)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 4) + nu1))];
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_7_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[600];
  __shared__ float placeholder_shared[768];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 8; ++rc_outer) {
    __syncthreads();
    if ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) < 600) {
      if (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) < 19) {
        if (((int)threadIdx.x) < 4) {
          pad_temp_shared[((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)))] = placeholder[(((((((rc_outer * 29400) + (((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) / 25) * 1225)) + (((int)blockIdx.y) * 175)) + ((((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 25) / 5) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 5)))];
        }
      }
    }
    if (((((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) / 24) + ((int)threadIdx.z)) < 32) {
      if ((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)) < 768) {
        if (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) < 24) {
          placeholder_shared[((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 6144) + (((int)threadIdx.z) * 192)) + (rc_outer * 24)) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 24; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 24) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((((int)blockIdx.z) * 39200) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_34_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[512];
  __shared__ float placeholder_shared[256];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 64; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)))] = placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 1) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 1) * 16)) + (((int)blockIdx.x) * 4)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 1) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 1) * 16)) + (((int)blockIdx.x) * 4)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 1) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 1) * 16)) + (((int)blockIdx.x) * 4)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 1) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 1) * 16)) + (((int)blockIdx.x) * 4)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((((int)threadIdx.x) * 2) + 1) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.x) * 2) + 1) & 3) * 8)) + (((int)blockIdx.x) * 4)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((((int)threadIdx.x) * 2) + 1) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.x) * 2) + 1) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((((int)threadIdx.x) * 2) + 1) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.x) * 2) + 1) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((((rc_outer * 2048) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((((int)threadIdx.x) * 2) + 1) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.x) * 2) + 1) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 3))];
    placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 4)))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) >> 5) * 2048)) + (rc_outer * 32)) + (((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) & 31)))];
    placeholder_shared[(((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 4)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 1) >> 5) * 2048)) + (rc_outer * 32)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 1) & 31)))];
    placeholder_shared[(((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 4)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 2) >> 5) * 2048)) + (rc_outer * 32)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 2) & 31)))];
    placeholder_shared[(((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 4)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 3) >> 5) * 2048)) + (rc_outer * 32)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4)) + 3) & 31)))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 16))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 16))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 80))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 80))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 144))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 144))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 336))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 336))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 400))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 400))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 464))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 464))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(1)]);
  }
  T_relu[(((((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 128)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 128)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x)) + 64))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
}

__device__ void fused_nn_max_pool2d_7_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor_local[1];
  tensor_local[(0)] = -3.402823e+38f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 83232) {
        tensor_local[(0)] = max(tensor_local[(0)], placeholder[(((((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) / 289) * 1225) + (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 289) / 17) * 70)) + (dh * 35)) + ((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 17) * 2)) + dw))]);
      }
    }
  }
  if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 83232) {
    tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = tensor_local[(0)];
  }
}

__device__ void fused_nn_avg_pool2d_11_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      tensor1[(0)] = (tensor1[(0)] + (((((1 <= (((((int)threadIdx.x) & 63) >> 3) + dh)) && ((((((int)threadIdx.x) & 63) >> 3) + dh) < 9)) && (1 <= (dw + (((int)threadIdx.x) & 7)))) && ((dw + (((int)threadIdx.x) & 7)) < 9)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 8)) + ((int)threadIdx.x)) + dw) - 9))] : 0.000000e+00f));
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.111111e-01f);
}

__device__ void fused_nn_max_pool2d_6_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor_local[1];
  tensor_local[(0)] = -3.402823e+38f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 341056) {
        tensor_local[(0)] = max(tensor_local[(0)], placeholder[(((((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) / 5329) * 21609) + (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 5329) / 73) * 294)) + (dh * 147)) + ((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 73) * 2)) + dw))]);
      }
    }
  }
  if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 341056) {
    tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = tensor_local[(0)];
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[16];
  __shared__ float placeholder_shared[256];
  __shared__ float data_pack_shared[1184];
  bgemm_local[(0)] = 0.000000e+00f;
  bgemm_local[(8)] = 0.000000e+00f;
  bgemm_local[(1)] = 0.000000e+00f;
  bgemm_local[(9)] = 0.000000e+00f;
  bgemm_local[(2)] = 0.000000e+00f;
  bgemm_local[(10)] = 0.000000e+00f;
  bgemm_local[(3)] = 0.000000e+00f;
  bgemm_local[(11)] = 0.000000e+00f;
  bgemm_local[(4)] = 0.000000e+00f;
  bgemm_local[(12)] = 0.000000e+00f;
  bgemm_local[(5)] = 0.000000e+00f;
  bgemm_local[(13)] = 0.000000e+00f;
  bgemm_local[(6)] = 0.000000e+00f;
  bgemm_local[(14)] = 0.000000e+00f;
  bgemm_local[(7)] = 0.000000e+00f;
  bgemm_local[(15)] = 0.000000e+00f;
  for (int ci_outer = 0; ci_outer < 4; ++ci_outer) {
    __syncthreads();
    if (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) < 256) {
      if (((int)threadIdx.y) < 7) {
        placeholder_shared[(((((int)threadIdx.y) * 37) + ((int)threadIdx.x)))] = placeholder[((((((((int)blockIdx.z) * 2048) + (ci_outer * 512)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) >> 5) * 64)) + (((int)blockIdx.y) * 32)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) & 31)))];
      }
    }
    data_pack_shared[(((((int)threadIdx.y) * 37) + ((int)threadIdx.x)))] = data_pack[((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 296))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 10952))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 592))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 21904))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 888))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 32856))];
    __syncthreads();
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[((((int)threadIdx.x) * 4))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[((((int)threadIdx.x) * 4))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 4) + 2))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 4) + 2))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 4) + 3))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 4) + 3))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[((((int)threadIdx.x) * 4))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[((((int)threadIdx.x) * 4))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 4) + 2))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 4) + 2))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 4) + 3))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 4) + 3))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 4) + 148))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 4) + 148))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 4) + 149))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 4) + 149))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 4) + 150))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 4) + 150))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 4) + 151))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 4) + 151))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 4) + 148))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 4) + 148))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 4) + 149))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 4) + 149))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 4) + 150))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 4) + 150))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 4) + 151))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 4) + 151))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 4) + 296))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 4) + 296))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 4) + 297))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 4) + 297))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 4) + 298))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 4) + 298))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 4) + 299))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 4) + 299))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 4) + 296))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 4) + 296))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 4) + 297))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 4) + 297))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 4) + 298))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 4) + 298))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 4) + 299))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 4) + 299))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 4) + 444))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 4) + 444))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 4) + 445))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 4) + 445))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 4) + 446))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 4) + 446))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 4) + 447))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 4) + 447))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 4) + 444))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 4) + 444))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 4) + 445))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 4) + 445))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 4) + 446))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 4) + 446))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 4) + 447))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 4) + 447))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 4) + 592))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 4) + 592))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 4) + 593))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 4) + 593))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 4) + 594))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 4) + 594))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 4) + 595))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 4) + 595))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 4) + 592))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 4) + 592))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 4) + 593))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 4) + 593))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 4) + 594))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 4) + 594))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 4) + 595))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 4) + 595))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 4) + 740))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 4) + 740))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 4) + 741))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 4) + 741))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 4) + 742))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 4) + 742))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 4) + 743))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 4) + 743))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 4) + 740))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 4) + 740))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 4) + 741))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 4) + 741))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 4) + 742))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 4) + 742))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 4) + 743))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 4) + 743))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 4) + 888))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 4) + 888))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 4) + 889))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 4) + 889))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 4) + 890))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 4) + 890))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 4) + 891))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 4) + 891))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 4) + 888))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 4) + 888))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 4) + 889))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 4) + 889))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 4) + 890))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 4) + 890))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 4) + 891))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 4) + 891))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1036))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1036))], bgemm_local[(8)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1037))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1037))], bgemm_local[(9)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1038))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1038))], bgemm_local[(10)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1039))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1039))], bgemm_local[(11)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1036))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1036))], bgemm_local[(12)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1037))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1037))], bgemm_local[(13)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1038))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1038))], bgemm_local[(14)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1039))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 4) + 1039))], bgemm_local[(15)]);
  }
  bgemm[((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)))] = bgemm_local[(0)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 87616))] = bgemm_local[(8)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 1))] = bgemm_local[(1)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 87617))] = bgemm_local[(9)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 2))] = bgemm_local[(2)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 87618))] = bgemm_local[(10)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 3))] = bgemm_local[(3)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 87619))] = bgemm_local[(11)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 5476))] = bgemm_local[(4)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 93092))] = bgemm_local[(12)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 5477))] = bgemm_local[(5)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 93093))] = bgemm_local[(13)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 5478))] = bgemm_local[(6)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 93094))] = bgemm_local[(14)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 5479))] = bgemm_local[(7)];
  bgemm[(((((((((int)blockIdx.z) * 350464) + (((int)blockIdx.y) * 175232)) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 4)) + 93095))] = bgemm_local[(15)];
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[12];
  __shared__ float placeholder_shared[1536];
  __shared__ float data_pack_shared[192];
  for (int p_c_init = 0; p_c_init < 2; ++p_c_init) {
    bgemm_local[(p_c_init)] = 0.000000e+00f;
    bgemm_local[((p_c_init + 2))] = 0.000000e+00f;
    bgemm_local[((p_c_init + 4))] = 0.000000e+00f;
    bgemm_local[((p_c_init + 6))] = 0.000000e+00f;
    bgemm_local[((p_c_init + 8))] = 0.000000e+00f;
    bgemm_local[((p_c_init + 10))] = 0.000000e+00f;
  }
  for (int ci_outer = 0; ci_outer < 4; ++ci_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer < 16; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer) {
      placeholder_shared[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 96) + (((int)threadIdx.y) * 6)) + ((int)threadIdx.x)))] = placeholder[((((((((int)blockIdx.z) * 6144) + (ci_outer * 1536)) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 96)) + (((int)threadIdx.y) * 6)) + ((int)threadIdx.x)))];
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1) {
      data_pack_shared[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 * 96) + (((int)threadIdx.y) * 6)) + ((int)threadIdx.x)))] = data_pack[(((((((((int)blockIdx.z) * 20736) + (ci_outer * 5184)) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 * 2592)) + ((((((int)threadIdx.y) * 6) + ((int)threadIdx.x)) / 12) * 324)) + (((int)blockIdx.x) * 12)) + (((((int)threadIdx.y) * 6) + ((int)threadIdx.x)) % 12)))];
    }
    __syncthreads();
    for (int ci_inner = 0; ci_inner < 16; ++ci_inner) {
      for (int p_c = 0; p_c < 2; ++p_c) {
        bgemm_local[(p_c)] = __ocml_fma_f32(placeholder_shared[(((ci_inner * 96) + ((int)threadIdx.y)))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[(p_c)]);
        bgemm_local[((p_c + 2))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + ((int)threadIdx.y)) + 16))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[((p_c + 2))]);
        bgemm_local[((p_c + 4))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + ((int)threadIdx.y)) + 32))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[((p_c + 4))]);
        bgemm_local[((p_c + 6))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + ((int)threadIdx.y)) + 48))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[((p_c + 6))]);
        bgemm_local[((p_c + 8))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + ((int)threadIdx.y)) + 64))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[((p_c + 8))]);
        bgemm_local[((p_c + 10))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + ((int)threadIdx.y)) + 80))], data_pack_shared[((((ci_inner * 12) + (((int)threadIdx.x) * 2)) + p_c))], bgemm_local[((p_c + 10))]);
      }
    }
  }
  for (int p_inner_inner_inner = 0; p_inner_inner_inner < 2; ++p_inner_inner_inner) {
    bgemm[((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner))] = bgemm_local[(p_inner_inner_inner)];
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner) + 5184))] = bgemm_local[((p_inner_inner_inner + 2))];
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner) + 10368))] = bgemm_local[((p_inner_inner_inner + 4))];
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner) + 15552))] = bgemm_local[((p_inner_inner_inner + 6))];
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner) + 20736))] = bgemm_local[((p_inner_inner_inner + 8))];
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 12)) + (((int)threadIdx.x) * 2)) + p_inner_inner_inner) + 25920))] = bgemm_local[((p_inner_inner_inner + 10))];
  }
}

__device__ void fused_concatenate_9_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) < 221952) {
      T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((138720 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 138720))] : ((110976 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 110976))] : placeholder2[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))]));
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_3_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[816];
  __shared__ float placeholder_shared[1536];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if ((((((int)threadIdx.z) * 26) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 816) {
        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 26) {
          pad_temp_shared[((((((int)threadIdx.z) * 26) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((rc_outer * 13872) + (((((((int)threadIdx.z) * 26) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 17) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 26) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 17)))];
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 48) + ((int)threadIdx.z)) < 32) {
        if ((((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 1536) {
          if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 48) {
            placeholder_shared[((((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[((((((((int)blockIdx.z) * 24576) + (((int)threadIdx.z) * 768)) + (rc_outer * 48)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 48; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 17) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 48) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_avg_pool2d_9_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 352800) {
        tensor1[(0)] = (tensor1[(0)] + (((((1 <= (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh)) && ((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh) < 36)) && (1 <= (dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)))) && ((dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)) < 36)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 35)) + ((int)threadIdx.x)) + dw) - 36))] : 0.000000e+00f));
      }
    }
  }
  if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 352800) {
    tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.111111e-01f);
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[36];
  float data_pack_local[36];
  for (int eps = 0; eps < 6; ++eps) {
    for (int nu = 0; nu < 6; ++nu) {
      d[(((eps * 6) + nu))] = (((((1 <= ((((((int)threadIdx.x) & 3) >> 1) * 4) + eps)) && (((((((int)threadIdx.x) & 3) >> 1) * 4) + eps) < 9)) && (1 <= (((((int)threadIdx.x) & 1) * 4) + nu))) && ((((((int)threadIdx.x) & 1) * 4) + nu) < 9)) ? placeholder[(((((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 1) * 32)) + (eps * 8)) + ((((int)threadIdx.x) & 1) * 4)) + nu) - 9))] : 0.000000e+00f);
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(1)], -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(3)], 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(4)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(6)], -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(7)] * -1.500000e+00f), -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(10)], -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(12)], -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(13)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(16)], -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(18)], 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(19)] * 1.500000e+00f), -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(22)], 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(24)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(25)], -1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(26)], -2.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(27)], 1.500000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(28)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(2)], -2.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(3)], 5.000000e-01f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(4)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(7)], -1.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), -2.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(13)], -2.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), -2.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(16)], -2.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(19)], 1.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), -2.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(22)], 1.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(25)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(26)], -2.500000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(27)], 5.000000e-01f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(28)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(2)], 5.000000e-01f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(3)], 2.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(4)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(7)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), 2.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(13)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), 2.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(16)], -2.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(19)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), 2.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(22)], 1.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(25)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(26)], 5.000000e-01f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(27)], 2.500000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(28)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(3)], 2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(4)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(7)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), 2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(10)], -1.500000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(13)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), 2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(16)], -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(19)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), 2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(22)], 1.500000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(25)], -2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(27)], 2.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(28)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(1)], 5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(3)], -5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(7)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), -5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.500000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(13)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), -5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(16)], -2.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(19)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), -5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(22)], 1.500000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(25)], 5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(27)], -5.000000e-01f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(28)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(1)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(2)], -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(3)], -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(4)], 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(7)], -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(8)] * -1.500000e+00f), -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(9)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(10)] * -1.500000e+00f), 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(11)], -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(13)], -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(14)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(15)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(16)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(17)], -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(19)], 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(20)] * 1.500000e+00f), -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(21)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32((d[(22)] * 1.500000e+00f), 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(23)], 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(25)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(26)], -1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(27)], -2.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(29)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(7)], -1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(8)], -2.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(9)], 1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(12)], -2.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(13)] * -2.500000e+00f), -1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), -2.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), 1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(16)], -2.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(18)], 5.000000e-01f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(19)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(22)], 5.000000e-01f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(24)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(25)], -1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(26)], -2.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(27)], 1.500000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(28)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(8)], -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(10)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(13)], -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(16)], -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(19)], 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(22)], 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(25)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(26)], -2.500000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(27)], 5.000000e-01f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(28)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(8)], 5.000000e-01f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(9)], 2.500000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(10)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(13)] * -2.500000e+00f), -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), 5.000000e-01f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), 2.500000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(16)], -2.500000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(19)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), 2.500000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(22)], 5.000000e-01f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(25)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(26)], 5.000000e-01f, data_pack_local[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(27)], 2.500000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(28)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(7)], -2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], 2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(13)] * -2.500000e+00f), -2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), 2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(16)], -2.500000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(19)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), 2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(22)], 5.000000e-01f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(25)], -2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(27)], 2.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(28)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = __ocml_fma_f32(d[(7)], 5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(9)], -5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(13)] * -2.500000e+00f), 5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), -1.000000e+00f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), -5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(16)], -2.500000e+00f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(19)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), -5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(22)], 5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(25)], 5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(10)]);
  data_pack_local[(10)] = __ocml_fma_f32(d[(27)], -5.000000e-01f, data_pack_local[(10)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(28)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(8)], -1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -2.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(10)], 1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(13)], -2.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(14)] * -2.500000e+00f), -1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(15)] * -2.500000e+00f), -2.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(16)] * -2.500000e+00f), 1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(17)], -2.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(19)], 5.000000e-01f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(20)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(21)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32((d[(22)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(23)], 5.000000e-01f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(25)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(26)], -1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(27)], -2.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(29)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(7)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(12)], 5.000000e-01f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(13)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(16)], 5.000000e-01f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(18)], 2.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(19)] * 2.500000e+00f), -1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), -2.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), 1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(22)], 2.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(24)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(25)], -1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(26)], -2.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(27)], 1.500000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(28)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), -2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), -2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(16)], 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(19)], 2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), -2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(22)], 2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(25)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(26)], -2.500000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(27)], 5.000000e-01f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(28)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32((d[(7)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), 2.500000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(13)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), 2.500000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(16)], 5.000000e-01f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(19)] * 2.500000e+00f), -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), 5.000000e-01f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), 2.500000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(22)], 2.500000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(25)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(26)], 5.000000e-01f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(27)], 2.500000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(28)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(7)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), 2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(13)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), 2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(16)], 5.000000e-01f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(19)] * 2.500000e+00f), -2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), 2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(22)], 2.500000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(25)], -2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(27)], 2.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(28)]);
  data_pack_local[(16)] = 0.000000e+00f;
  data_pack_local[(16)] = __ocml_fma_f32((d[(7)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(13)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), -5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(16)], 5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(19)] * 2.500000e+00f), 5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), -1.000000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), -5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(22)], 2.500000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(25)], 5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(16)]);
  data_pack_local[(16)] = __ocml_fma_f32(d[(27)], -5.000000e-01f, data_pack_local[(16)]);
  data_pack_local[(16)] = (data_pack_local[(16)] + d[(28)]);
  data_pack_local[(17)] = 0.000000e+00f;
  data_pack_local[(17)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(8)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(13)], 5.000000e-01f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(14)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(15)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(16)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(17)], 5.000000e-01f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(19)], 2.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(20)] * 2.500000e+00f), -1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(21)] * 2.500000e+00f), -2.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32((d[(22)] * 2.500000e+00f), 1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(23)], 2.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = (data_pack_local[(17)] + d[(25)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(26)], -1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(27)], -2.000000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(17)]);
  data_pack_local[(17)] = (data_pack_local[(17)] + d[(29)]);
  data_pack_local[(18)] = 0.000000e+00f;
  data_pack_local[(18)] = __ocml_fma_f32(d[(6)], -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(7)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(10)], -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(12)], -1.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(18)], 2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(19)] * 2.000000e+00f), -1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), 1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(22)], 2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = (data_pack_local[(18)] + d[(24)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(25)], -1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(26)], -2.000000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = __ocml_fma_f32(d[(27)], 1.500000e+00f, data_pack_local[(18)]);
  data_pack_local[(18)] = (data_pack_local[(18)] + d[(28)]);
  data_pack_local[(19)] = 0.000000e+00f;
  data_pack_local[(19)] = __ocml_fma_f32(d[(7)], -2.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), -2.500000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(10)], -2.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -2.500000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(19)], 2.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), -2.500000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), 5.000000e-01f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(22)], 2.000000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = (data_pack_local[(19)] + d[(25)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(26)], -2.500000e+00f, data_pack_local[(19)]);
  data_pack_local[(19)] = __ocml_fma_f32(d[(27)], 5.000000e-01f, data_pack_local[(19)]);
  data_pack_local[(19)] = (data_pack_local[(19)] + d[(28)]);
  data_pack_local[(20)] = 0.000000e+00f;
  data_pack_local[(20)] = __ocml_fma_f32((d[(7)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), 2.500000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(10)], -2.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 2.500000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(19)] * 2.000000e+00f), -1.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), 5.000000e-01f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), 2.500000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(22)], 2.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(25)], -1.000000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(26)], 5.000000e-01f, data_pack_local[(20)]);
  data_pack_local[(20)] = __ocml_fma_f32(d[(27)], 2.500000e+00f, data_pack_local[(20)]);
  data_pack_local[(20)] = (data_pack_local[(20)] + d[(28)]);
  data_pack_local[(21)] = 0.000000e+00f;
  data_pack_local[(21)] = __ocml_fma_f32((d[(7)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), 2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(10)], -2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(19)] * 2.000000e+00f), -2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), -1.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), 2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(22)], 2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(25)], -2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = __ocml_fma_f32(d[(27)], 2.000000e+00f, data_pack_local[(21)]);
  data_pack_local[(21)] = (data_pack_local[(21)] + d[(28)]);
  data_pack_local[(22)] = 0.000000e+00f;
  data_pack_local[(22)] = __ocml_fma_f32((d[(7)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), -5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(10)], -2.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), -5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(19)] * 2.000000e+00f), 5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), -1.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), -5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(22)], 2.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(25)], 5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(22)]);
  data_pack_local[(22)] = __ocml_fma_f32(d[(27)], -5.000000e-01f, data_pack_local[(22)]);
  data_pack_local[(22)] = (data_pack_local[(22)] + d[(28)]);
  data_pack_local[(23)] = 0.000000e+00f;
  data_pack_local[(23)] = __ocml_fma_f32(d[(7)], -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(8)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(9)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(10)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(11)], -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(16)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(17)], -1.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(19)], 2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(20)] * 2.000000e+00f), -1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(21)] * 2.000000e+00f), -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32((d[(22)] * 2.000000e+00f), 1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(23)], 2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = (data_pack_local[(23)] + d[(25)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(26)], -1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(27)], -2.000000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(23)]);
  data_pack_local[(23)] = (data_pack_local[(23)] + d[(29)]);
  data_pack_local[(24)] = 0.000000e+00f;
  data_pack_local[(24)] = __ocml_fma_f32(d[(6)], 5.000000e-01f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(7)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(10)], 5.000000e-01f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(12)], -1.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(18)], -5.000000e-01f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(19)] * -5.000000e-01f), -1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), -2.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), 1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(22)], -5.000000e-01f, data_pack_local[(24)]);
  data_pack_local[(24)] = (data_pack_local[(24)] + d[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(25)], -1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(26)], -2.000000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = __ocml_fma_f32(d[(27)], 1.500000e+00f, data_pack_local[(24)]);
  data_pack_local[(24)] = (data_pack_local[(24)] + d[(28)]);
  data_pack_local[(25)] = 0.000000e+00f;
  data_pack_local[(25)] = __ocml_fma_f32(d[(7)], 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), -2.500000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(10)], 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -2.500000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(19)], -5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), -2.500000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(22)], -5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = (data_pack_local[(25)] + d[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(26)], -2.500000e+00f, data_pack_local[(25)]);
  data_pack_local[(25)] = __ocml_fma_f32(d[(27)], 5.000000e-01f, data_pack_local[(25)]);
  data_pack_local[(25)] = (data_pack_local[(25)] + d[(28)]);
  data_pack_local[(26)] = 0.000000e+00f;
  data_pack_local[(26)] = __ocml_fma_f32((d[(7)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), 2.500000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(10)], 5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 2.500000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(19)] * -5.000000e-01f), -1.000000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), 5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), 2.500000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(22)], -5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(25)], -1.000000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(26)], 5.000000e-01f, data_pack_local[(26)]);
  data_pack_local[(26)] = __ocml_fma_f32(d[(27)], 2.500000e+00f, data_pack_local[(26)]);
  data_pack_local[(26)] = (data_pack_local[(26)] + d[(28)]);
  data_pack_local[(27)] = 0.000000e+00f;
  data_pack_local[(27)] = __ocml_fma_f32((d[(7)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), 2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(10)], 5.000000e-01f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), 2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(19)] * -5.000000e-01f), -2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), -1.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), 2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(22)], -5.000000e-01f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(25)], -2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = __ocml_fma_f32(d[(27)], 2.000000e+00f, data_pack_local[(27)]);
  data_pack_local[(27)] = (data_pack_local[(27)] + d[(28)]);
  data_pack_local[(28)] = 0.000000e+00f;
  data_pack_local[(28)] = __ocml_fma_f32((d[(7)] * 5.000000e-01f), 5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), -1.000000e+00f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), -5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(10)], 5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(13)] * -1.000000e+00f), 5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), -5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(16)], -1.000000e+00f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(19)] * -5.000000e-01f), 5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), -1.000000e+00f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), -5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(22)], -5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(25)], 5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(26)], -1.000000e+00f, data_pack_local[(28)]);
  data_pack_local[(28)] = __ocml_fma_f32(d[(27)], -5.000000e-01f, data_pack_local[(28)]);
  data_pack_local[(28)] = (data_pack_local[(28)] + d[(28)]);
  data_pack_local[(29)] = 0.000000e+00f;
  data_pack_local[(29)] = __ocml_fma_f32(d[(7)], 5.000000e-01f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(8)] * 5.000000e-01f), -1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(9)] * 5.000000e-01f), -2.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(10)] * 5.000000e-01f), 1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(11)], 5.000000e-01f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(14)] * -1.000000e+00f), -1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(15)] * -1.000000e+00f), -2.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(16)] * -1.000000e+00f), 1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(17)], -1.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(19)], -5.000000e-01f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(20)] * -5.000000e-01f), -1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(21)] * -5.000000e-01f), -2.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32((d[(22)] * -5.000000e-01f), 1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(23)], -5.000000e-01f, data_pack_local[(29)]);
  data_pack_local[(29)] = (data_pack_local[(29)] + d[(25)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(26)], -1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(27)], -2.000000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(29)]);
  data_pack_local[(29)] = (data_pack_local[(29)] + d[(29)]);
  data_pack_local[(30)] = 0.000000e+00f;
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(6)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(7)], -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(8)], -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(9)], 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(10)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(12)], -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(13)] * -1.500000e+00f), -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(16)], -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(18)], -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(19)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(22)], -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(24)], 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(25)] * 1.500000e+00f), -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(31)], -1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(32)], -2.000000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = __ocml_fma_f32(d[(33)], 1.500000e+00f, data_pack_local[(30)]);
  data_pack_local[(30)] = (data_pack_local[(30)] + d[(34)]);
  data_pack_local[(31)] = 0.000000e+00f;
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(7)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(8)], -2.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(9)], 5.000000e-01f, data_pack_local[(31)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(10)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(13)], -1.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), -2.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(16)], -1.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(19)], -2.000000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), -2.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(22)], -2.000000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(25)], 1.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), -2.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(32)], -2.500000e+00f, data_pack_local[(31)]);
  data_pack_local[(31)] = __ocml_fma_f32(d[(33)], 5.000000e-01f, data_pack_local[(31)]);
  data_pack_local[(31)] = (data_pack_local[(31)] + d[(34)]);
  data_pack_local[(32)] = 0.000000e+00f;
  data_pack_local[(32)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(8)], 5.000000e-01f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(9)], 2.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = (data_pack_local[(32)] + d[(10)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(13)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), 2.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(16)], -1.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(19)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), 2.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(22)], -2.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(25)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), 2.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(31)], -1.000000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(32)], 5.000000e-01f, data_pack_local[(32)]);
  data_pack_local[(32)] = __ocml_fma_f32(d[(33)], 2.500000e+00f, data_pack_local[(32)]);
  data_pack_local[(32)] = (data_pack_local[(32)] + d[(34)]);
  data_pack_local[(33)] = 0.000000e+00f;
  data_pack_local[(33)] = __ocml_fma_f32(d[(7)], -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(9)], 2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = (data_pack_local[(33)] + d[(10)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(13)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), 2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(16)], -1.500000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(19)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), 2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(22)], -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(25)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), 2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(31)], -2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(32)], -1.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = __ocml_fma_f32(d[(33)], 2.000000e+00f, data_pack_local[(33)]);
  data_pack_local[(33)] = (data_pack_local[(33)] + d[(34)]);
  data_pack_local[(34)] = 0.000000e+00f;
  data_pack_local[(34)] = __ocml_fma_f32(d[(7)], 5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(9)], -5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = (data_pack_local[(34)] + d[(10)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(13)] * -1.500000e+00f), 5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), -1.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), -5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(16)], -1.500000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(19)] * -2.000000e+00f), 5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), -1.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), -5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(22)], -2.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(25)] * 1.500000e+00f), 5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), -1.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), -5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(28)], 1.500000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(31)], 5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(32)], -1.000000e+00f, data_pack_local[(34)]);
  data_pack_local[(34)] = __ocml_fma_f32(d[(33)], -5.000000e-01f, data_pack_local[(34)]);
  data_pack_local[(34)] = (data_pack_local[(34)] + d[(34)]);
  data_pack_local[(35)] = 0.000000e+00f;
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(7)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(8)], -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(9)], -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(10)], 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(11)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(13)], -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(14)] * -1.500000e+00f), -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(15)] * -1.500000e+00f), -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(16)] * -1.500000e+00f), 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(17)], -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(19)], -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(20)] * -2.000000e+00f), -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(21)] * -2.000000e+00f), -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(22)] * -2.000000e+00f), 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(23)], -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(25)], 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(26)] * 1.500000e+00f), -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(27)] * 1.500000e+00f), -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32((d[(28)] * 1.500000e+00f), 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(29)], 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(31)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(32)], -1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(33)], -2.000000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = __ocml_fma_f32(d[(34)], 1.500000e+00f, data_pack_local[(35)]);
  data_pack_local[(35)] = (data_pack_local[(35)] + d[(35)]);
  for (int eps1 = 0; eps1 < 6; ++eps1) {
    for (int nu1 = 0; nu1 < 6; ++nu1) {
      data_pack[(((((eps1 * 10752) + (nu1 * 1792)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 6) + nu1))];
    }
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[16];
  float data_pack_local[16];
  for (int eps = 0; eps < 4; ++eps) {
    for (int nu = 0; nu < 4; ++nu) {
      d[(((eps * 4) + nu))] = (((((1 <= ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 2) + eps)) && (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 2) + eps) < 148)) && (1 <= (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2) + nu))) && ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2) + nu) < 148)) ? placeholder[((((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476) * 21609) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 294)) + (eps * 147)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2)) + nu) - 148))] : 0.000000e+00f);
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(2)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(1)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(8)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(10)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(9)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(11)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(4)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(6)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(5)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(6)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(9)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(14)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(14)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(13)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(14)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(15)]);
  for (int eps1 = 0; eps1 < 4; ++eps1) {
    for (int nu1 = 0; nu1 < 4; ++nu1) {
      data_pack[(((((eps1 * 700928) + (nu1 * 175232)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 4) + nu1))];
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_29_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[768];
  __shared__ float placeholder_shared[1536];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)))] = ((1 <= ((int)blockIdx.x)) ? placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)) - 1))] : 0.000000e+00f);
    pad_temp_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)) + 1))] = placeholder[(((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)) + 2))] = placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)) + 3))] = placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)) + 4))] = placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 48) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 6)) + 5))] = ((((int)blockIdx.x) < 1) ? placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 3) * 8)) + (((int)blockIdx.x) * 4)) + 4))] : 0.000000e+00f);
    placeholder_shared[((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)))] = placeholder1[((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 2))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 3))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 4))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 5))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 6))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 7))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 8))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 8))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 9))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 9))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 10))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 10))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 11))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 12)) + 11))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)))], placeholder_shared[((((int)threadIdx.z) * 96))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 1))], placeholder_shared[((((int)threadIdx.z) * 96))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 96) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 96) + 1))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 96) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 96) + 2))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 24))], placeholder_shared[(((((int)threadIdx.z) * 96) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 25))], placeholder_shared[(((((int)threadIdx.z) * 96) + 3))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 25))], placeholder_shared[(((((int)threadIdx.z) * 96) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 26))], placeholder_shared[(((((int)threadIdx.z) * 96) + 4))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 26))], placeholder_shared[(((((int)threadIdx.z) * 96) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 27))], placeholder_shared[(((((int)threadIdx.z) * 96) + 5))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 96) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 49))], placeholder_shared[(((((int)threadIdx.z) * 96) + 6))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 49))], placeholder_shared[(((((int)threadIdx.z) * 96) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 50))], placeholder_shared[(((((int)threadIdx.z) * 96) + 7))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 50))], placeholder_shared[(((((int)threadIdx.z) * 96) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 51))], placeholder_shared[(((((int)threadIdx.z) * 96) + 8))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 72))], placeholder_shared[(((((int)threadIdx.z) * 96) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 73))], placeholder_shared[(((((int)threadIdx.z) * 96) + 9))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 73))], placeholder_shared[(((((int)threadIdx.z) * 96) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 74))], placeholder_shared[(((((int)threadIdx.z) * 96) + 10))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 74))], placeholder_shared[(((((int)threadIdx.z) * 96) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 75))], placeholder_shared[(((((int)threadIdx.z) * 96) + 11))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 96) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 97))], placeholder_shared[(((((int)threadIdx.z) * 96) + 12))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 97))], placeholder_shared[(((((int)threadIdx.z) * 96) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 98))], placeholder_shared[(((((int)threadIdx.z) * 96) + 13))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 98))], placeholder_shared[(((((int)threadIdx.z) * 96) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 99))], placeholder_shared[(((((int)threadIdx.z) * 96) + 14))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 96) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 96) + 15))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 96) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 122))], placeholder_shared[(((((int)threadIdx.z) * 96) + 16))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 122))], placeholder_shared[(((((int)threadIdx.z) * 96) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 123))], placeholder_shared[(((((int)threadIdx.z) * 96) + 17))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 144))], placeholder_shared[(((((int)threadIdx.z) * 96) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 145))], placeholder_shared[(((((int)threadIdx.z) * 96) + 18))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 145))], placeholder_shared[(((((int)threadIdx.z) * 96) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 146))], placeholder_shared[(((((int)threadIdx.z) * 96) + 19))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 146))], placeholder_shared[(((((int)threadIdx.z) * 96) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 147))], placeholder_shared[(((((int)threadIdx.z) * 96) + 20))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 168))], placeholder_shared[(((((int)threadIdx.z) * 96) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 169))], placeholder_shared[(((((int)threadIdx.z) * 96) + 21))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 169))], placeholder_shared[(((((int)threadIdx.z) * 96) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 170))], placeholder_shared[(((((int)threadIdx.z) * 96) + 22))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 170))], placeholder_shared[(((((int)threadIdx.z) * 96) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 171))], placeholder_shared[(((((int)threadIdx.z) * 96) + 23))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 96) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 193))], placeholder_shared[(((((int)threadIdx.z) * 96) + 24))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 193))], placeholder_shared[(((((int)threadIdx.z) * 96) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 194))], placeholder_shared[(((((int)threadIdx.z) * 96) + 25))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 194))], placeholder_shared[(((((int)threadIdx.z) * 96) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 195))], placeholder_shared[(((((int)threadIdx.z) * 96) + 26))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 216))], placeholder_shared[(((((int)threadIdx.z) * 96) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 217))], placeholder_shared[(((((int)threadIdx.z) * 96) + 27))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 217))], placeholder_shared[(((((int)threadIdx.z) * 96) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 218))], placeholder_shared[(((((int)threadIdx.z) * 96) + 28))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 218))], placeholder_shared[(((((int)threadIdx.z) * 96) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 219))], placeholder_shared[(((((int)threadIdx.z) * 96) + 29))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 96) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 241))], placeholder_shared[(((((int)threadIdx.z) * 96) + 30))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 241))], placeholder_shared[(((((int)threadIdx.z) * 96) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 242))], placeholder_shared[(((((int)threadIdx.z) * 96) + 31))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 242))], placeholder_shared[(((((int)threadIdx.z) * 96) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 243))], placeholder_shared[(((((int)threadIdx.z) * 96) + 32))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 264))], placeholder_shared[(((((int)threadIdx.z) * 96) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 265))], placeholder_shared[(((((int)threadIdx.z) * 96) + 33))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 265))], placeholder_shared[(((((int)threadIdx.z) * 96) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 266))], placeholder_shared[(((((int)threadIdx.z) * 96) + 34))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 266))], placeholder_shared[(((((int)threadIdx.z) * 96) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 267))], placeholder_shared[(((((int)threadIdx.z) * 96) + 35))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 96) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 289))], placeholder_shared[(((((int)threadIdx.z) * 96) + 36))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 289))], placeholder_shared[(((((int)threadIdx.z) * 96) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 290))], placeholder_shared[(((((int)threadIdx.z) * 96) + 37))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 290))], placeholder_shared[(((((int)threadIdx.z) * 96) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 291))], placeholder_shared[(((((int)threadIdx.z) * 96) + 38))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 312))], placeholder_shared[(((((int)threadIdx.z) * 96) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 313))], placeholder_shared[(((((int)threadIdx.z) * 96) + 39))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 313))], placeholder_shared[(((((int)threadIdx.z) * 96) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 314))], placeholder_shared[(((((int)threadIdx.z) * 96) + 40))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 314))], placeholder_shared[(((((int)threadIdx.z) * 96) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 315))], placeholder_shared[(((((int)threadIdx.z) * 96) + 41))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 336))], placeholder_shared[(((((int)threadIdx.z) * 96) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 337))], placeholder_shared[(((((int)threadIdx.z) * 96) + 42))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 337))], placeholder_shared[(((((int)threadIdx.z) * 96) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 338))], placeholder_shared[(((((int)threadIdx.z) * 96) + 43))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 338))], placeholder_shared[(((((int)threadIdx.z) * 96) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 339))], placeholder_shared[(((((int)threadIdx.z) * 96) + 44))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 360))], placeholder_shared[(((((int)threadIdx.z) * 96) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 361))], placeholder_shared[(((((int)threadIdx.z) * 96) + 45))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 361))], placeholder_shared[(((((int)threadIdx.z) * 96) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 362))], placeholder_shared[(((((int)threadIdx.z) * 96) + 46))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 362))], placeholder_shared[(((((int)threadIdx.z) * 96) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 363))], placeholder_shared[(((((int)threadIdx.z) * 96) + 47))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 96) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 385))], placeholder_shared[(((((int)threadIdx.z) * 96) + 48))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 385))], placeholder_shared[(((((int)threadIdx.z) * 96) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 386))], placeholder_shared[(((((int)threadIdx.z) * 96) + 49))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 386))], placeholder_shared[(((((int)threadIdx.z) * 96) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 387))], placeholder_shared[(((((int)threadIdx.z) * 96) + 50))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 408))], placeholder_shared[(((((int)threadIdx.z) * 96) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 409))], placeholder_shared[(((((int)threadIdx.z) * 96) + 51))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 409))], placeholder_shared[(((((int)threadIdx.z) * 96) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 410))], placeholder_shared[(((((int)threadIdx.z) * 96) + 52))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 410))], placeholder_shared[(((((int)threadIdx.z) * 96) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 411))], placeholder_shared[(((((int)threadIdx.z) * 96) + 53))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 432))], placeholder_shared[(((((int)threadIdx.z) * 96) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 433))], placeholder_shared[(((((int)threadIdx.z) * 96) + 54))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 433))], placeholder_shared[(((((int)threadIdx.z) * 96) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 434))], placeholder_shared[(((((int)threadIdx.z) * 96) + 55))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 434))], placeholder_shared[(((((int)threadIdx.z) * 96) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 435))], placeholder_shared[(((((int)threadIdx.z) * 96) + 56))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 456))], placeholder_shared[(((((int)threadIdx.z) * 96) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 457))], placeholder_shared[(((((int)threadIdx.z) * 96) + 57))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 457))], placeholder_shared[(((((int)threadIdx.z) * 96) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 458))], placeholder_shared[(((((int)threadIdx.z) * 96) + 58))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 458))], placeholder_shared[(((((int)threadIdx.z) * 96) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 459))], placeholder_shared[(((((int)threadIdx.z) * 96) + 59))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 96) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 481))], placeholder_shared[(((((int)threadIdx.z) * 96) + 60))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 481))], placeholder_shared[(((((int)threadIdx.z) * 96) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 482))], placeholder_shared[(((((int)threadIdx.z) * 96) + 61))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 482))], placeholder_shared[(((((int)threadIdx.z) * 96) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 483))], placeholder_shared[(((((int)threadIdx.z) * 96) + 62))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 504))], placeholder_shared[(((((int)threadIdx.z) * 96) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 505))], placeholder_shared[(((((int)threadIdx.z) * 96) + 63))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 505))], placeholder_shared[(((((int)threadIdx.z) * 96) + 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 506))], placeholder_shared[(((((int)threadIdx.z) * 96) + 64))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 506))], placeholder_shared[(((((int)threadIdx.z) * 96) + 65))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 507))], placeholder_shared[(((((int)threadIdx.z) * 96) + 65))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 96) + 66))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 96) + 66))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 96) + 67))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 530))], placeholder_shared[(((((int)threadIdx.z) * 96) + 67))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 530))], placeholder_shared[(((((int)threadIdx.z) * 96) + 68))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 531))], placeholder_shared[(((((int)threadIdx.z) * 96) + 68))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 552))], placeholder_shared[(((((int)threadIdx.z) * 96) + 69))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 553))], placeholder_shared[(((((int)threadIdx.z) * 96) + 69))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 553))], placeholder_shared[(((((int)threadIdx.z) * 96) + 70))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 554))], placeholder_shared[(((((int)threadIdx.z) * 96) + 70))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 554))], placeholder_shared[(((((int)threadIdx.z) * 96) + 71))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 555))], placeholder_shared[(((((int)threadIdx.z) * 96) + 71))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 96) + 72))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 577))], placeholder_shared[(((((int)threadIdx.z) * 96) + 72))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 577))], placeholder_shared[(((((int)threadIdx.z) * 96) + 73))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 578))], placeholder_shared[(((((int)threadIdx.z) * 96) + 73))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 578))], placeholder_shared[(((((int)threadIdx.z) * 96) + 74))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 579))], placeholder_shared[(((((int)threadIdx.z) * 96) + 74))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 600))], placeholder_shared[(((((int)threadIdx.z) * 96) + 75))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 601))], placeholder_shared[(((((int)threadIdx.z) * 96) + 75))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 601))], placeholder_shared[(((((int)threadIdx.z) * 96) + 76))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 602))], placeholder_shared[(((((int)threadIdx.z) * 96) + 76))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 602))], placeholder_shared[(((((int)threadIdx.z) * 96) + 77))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 603))], placeholder_shared[(((((int)threadIdx.z) * 96) + 77))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 624))], placeholder_shared[(((((int)threadIdx.z) * 96) + 78))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 625))], placeholder_shared[(((((int)threadIdx.z) * 96) + 78))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 625))], placeholder_shared[(((((int)threadIdx.z) * 96) + 79))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 626))], placeholder_shared[(((((int)threadIdx.z) * 96) + 79))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 626))], placeholder_shared[(((((int)threadIdx.z) * 96) + 80))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 627))], placeholder_shared[(((((int)threadIdx.z) * 96) + 80))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 648))], placeholder_shared[(((((int)threadIdx.z) * 96) + 81))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 649))], placeholder_shared[(((((int)threadIdx.z) * 96) + 81))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 649))], placeholder_shared[(((((int)threadIdx.z) * 96) + 82))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 650))], placeholder_shared[(((((int)threadIdx.z) * 96) + 82))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 650))], placeholder_shared[(((((int)threadIdx.z) * 96) + 83))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 651))], placeholder_shared[(((((int)threadIdx.z) * 96) + 83))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 672))], placeholder_shared[(((((int)threadIdx.z) * 96) + 84))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 673))], placeholder_shared[(((((int)threadIdx.z) * 96) + 84))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 673))], placeholder_shared[(((((int)threadIdx.z) * 96) + 85))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 674))], placeholder_shared[(((((int)threadIdx.z) * 96) + 85))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 674))], placeholder_shared[(((((int)threadIdx.z) * 96) + 86))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 675))], placeholder_shared[(((((int)threadIdx.z) * 96) + 86))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 696))], placeholder_shared[(((((int)threadIdx.z) * 96) + 87))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 697))], placeholder_shared[(((((int)threadIdx.z) * 96) + 87))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 697))], placeholder_shared[(((((int)threadIdx.z) * 96) + 88))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 698))], placeholder_shared[(((((int)threadIdx.z) * 96) + 88))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 698))], placeholder_shared[(((((int)threadIdx.z) * 96) + 89))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 699))], placeholder_shared[(((((int)threadIdx.z) * 96) + 89))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 720))], placeholder_shared[(((((int)threadIdx.z) * 96) + 90))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 721))], placeholder_shared[(((((int)threadIdx.z) * 96) + 90))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 721))], placeholder_shared[(((((int)threadIdx.z) * 96) + 91))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 722))], placeholder_shared[(((((int)threadIdx.z) * 96) + 91))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 722))], placeholder_shared[(((((int)threadIdx.z) * 96) + 92))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 723))], placeholder_shared[(((((int)threadIdx.z) * 96) + 92))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 744))], placeholder_shared[(((((int)threadIdx.z) * 96) + 93))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 745))], placeholder_shared[(((((int)threadIdx.z) * 96) + 93))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 745))], placeholder_shared[(((((int)threadIdx.z) * 96) + 94))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 746))], placeholder_shared[(((((int)threadIdx.z) * 96) + 94))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 746))], placeholder_shared[(((((int)threadIdx.z) * 96) + 95))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 6) + (((int)threadIdx.x) * 2)) + 747))], placeholder_shared[(((((int)threadIdx.z) * 96) + 95))], compute[(1)]);
  }
  T_relu[(((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) * 2)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) * 2)) + 1))] = max((compute[(1)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_33_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[4096];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 5; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 16; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((((rc_outer * 16384) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))];
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 16; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      placeholder_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 256)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 256; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 16) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 256) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_23_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[272];
  __shared__ float placeholder_shared[256];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 48; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[(((((int)threadIdx.z) * 17) + ((int)threadIdx.x)))] = placeholder[(((((rc_outer * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))];
    if (((((int)threadIdx.x) >> 4) + ((int)threadIdx.z)) < 16) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 256) {
        if (((int)threadIdx.x) < 16) {
          placeholder_shared[(((((int)threadIdx.z) * 16) + ((int)threadIdx.x)))] = placeholder1[(((((((int)blockIdx.z) * 12288) + (((int)threadIdx.z) * 768)) + (rc_outer * 16)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 16; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 17) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 16) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_26_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[1428];
  __shared__ float placeholder_shared[2688];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1428) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[(((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)))] = (((3 <= (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) % 119) / 17) + ((int)blockIdx.y))) && ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) / 119) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1427) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 1))] = (((3 <= ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 1) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 1) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 1) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 1) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1426) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 2))] = (((3 <= ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 2) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 2) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 2) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 2) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1425) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 3))] = (((3 <= ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 3) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 3) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 3) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 3) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1424) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 4))] = (((3 <= ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 4) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 4) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 4) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 4) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) < 1423) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 5))] = (((3 <= ((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 5) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 5) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 3468) + (((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 5) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 90) + (((int)threadIdx.x) * 6)) + 5) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    placeholder_shared[(((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + (((((int)threadIdx.x) * 10) / 84) * 1344)) + (rc_outer * 84)) + ((((int)threadIdx.x) * 10) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 1) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 1) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 2) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 2) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 3) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 3) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 4) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 4) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 5))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 5) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 5) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 6))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 6) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 6) % 84)))];
    placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 7))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 7) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 7) % 84)))];
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 10) + 8) / 84)) < 32) {
      if (((((int)threadIdx.z) * 24) + (((((int)threadIdx.x) * 10) + 8) / 7)) < 384) {
        if (((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) < 2680) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 8))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 8) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 8) % 84)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 10) + 9) / 84)) < 32) {
      if (((((int)threadIdx.z) * 24) + (((((int)threadIdx.x) * 10) + 9) / 7)) < 384) {
        if (((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) < 2679) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 168) + (((int)threadIdx.x) * 10)) + 9))] = placeholder1[((((((((int)blockIdx.z) * 43008) + (((int)threadIdx.z) * 2688)) + ((((((int)threadIdx.x) * 10) + 9) / 84) * 1344)) + (rc_outer * 84)) + (((((int)threadIdx.x) * 10) + 9) % 84)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 168))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 168) + 84))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 17))], placeholder_shared[(((((int)threadIdx.z) * 168) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 17))], placeholder_shared[(((((int)threadIdx.z) * 168) + 85))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 34))], placeholder_shared[(((((int)threadIdx.z) * 168) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 34))], placeholder_shared[(((((int)threadIdx.z) * 168) + 86))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 168) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 168) + 87))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 68))], placeholder_shared[(((((int)threadIdx.z) * 168) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 68))], placeholder_shared[(((((int)threadIdx.z) * 168) + 88))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 85))], placeholder_shared[(((((int)threadIdx.z) * 168) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 85))], placeholder_shared[(((((int)threadIdx.z) * 168) + 89))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 102))], placeholder_shared[(((((int)threadIdx.z) * 168) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 102))], placeholder_shared[(((((int)threadIdx.z) * 168) + 90))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 168) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 168) + 91))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 136))], placeholder_shared[(((((int)threadIdx.z) * 168) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 136))], placeholder_shared[(((((int)threadIdx.z) * 168) + 92))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 153))], placeholder_shared[(((((int)threadIdx.z) * 168) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 153))], placeholder_shared[(((((int)threadIdx.z) * 168) + 93))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 170))], placeholder_shared[(((((int)threadIdx.z) * 168) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 170))], placeholder_shared[(((((int)threadIdx.z) * 168) + 94))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 168) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 168) + 95))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 204))], placeholder_shared[(((((int)threadIdx.z) * 168) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 204))], placeholder_shared[(((((int)threadIdx.z) * 168) + 96))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 221))], placeholder_shared[(((((int)threadIdx.z) * 168) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 221))], placeholder_shared[(((((int)threadIdx.z) * 168) + 97))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 238))], placeholder_shared[(((((int)threadIdx.z) * 168) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 238))], placeholder_shared[(((((int)threadIdx.z) * 168) + 98))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 168) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 168) + 99))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 272))], placeholder_shared[(((((int)threadIdx.z) * 168) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 272))], placeholder_shared[(((((int)threadIdx.z) * 168) + 100))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 289))], placeholder_shared[(((((int)threadIdx.z) * 168) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 289))], placeholder_shared[(((((int)threadIdx.z) * 168) + 101))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 306))], placeholder_shared[(((((int)threadIdx.z) * 168) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 306))], placeholder_shared[(((((int)threadIdx.z) * 168) + 102))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 168) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 168) + 103))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 340))], placeholder_shared[(((((int)threadIdx.z) * 168) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 340))], placeholder_shared[(((((int)threadIdx.z) * 168) + 104))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 357))], placeholder_shared[(((((int)threadIdx.z) * 168) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 357))], placeholder_shared[(((((int)threadIdx.z) * 168) + 105))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 168) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 168) + 106))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 168) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 168) + 107))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 408))], placeholder_shared[(((((int)threadIdx.z) * 168) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 408))], placeholder_shared[(((((int)threadIdx.z) * 168) + 108))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 425))], placeholder_shared[(((((int)threadIdx.z) * 168) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 425))], placeholder_shared[(((((int)threadIdx.z) * 168) + 109))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 168) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 168) + 110))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 459))], placeholder_shared[(((((int)threadIdx.z) * 168) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 459))], placeholder_shared[(((((int)threadIdx.z) * 168) + 111))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 476))], placeholder_shared[(((((int)threadIdx.z) * 168) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 476))], placeholder_shared[(((((int)threadIdx.z) * 168) + 112))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 493))], placeholder_shared[(((((int)threadIdx.z) * 168) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 493))], placeholder_shared[(((((int)threadIdx.z) * 168) + 113))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 510))], placeholder_shared[(((((int)threadIdx.z) * 168) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 510))], placeholder_shared[(((((int)threadIdx.z) * 168) + 114))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 527))], placeholder_shared[(((((int)threadIdx.z) * 168) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 527))], placeholder_shared[(((((int)threadIdx.z) * 168) + 115))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 544))], placeholder_shared[(((((int)threadIdx.z) * 168) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 544))], placeholder_shared[(((((int)threadIdx.z) * 168) + 116))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 561))], placeholder_shared[(((((int)threadIdx.z) * 168) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 561))], placeholder_shared[(((((int)threadIdx.z) * 168) + 117))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 578))], placeholder_shared[(((((int)threadIdx.z) * 168) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 578))], placeholder_shared[(((((int)threadIdx.z) * 168) + 118))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 595))], placeholder_shared[(((((int)threadIdx.z) * 168) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 595))], placeholder_shared[(((((int)threadIdx.z) * 168) + 119))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 612))], placeholder_shared[(((((int)threadIdx.z) * 168) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 612))], placeholder_shared[(((((int)threadIdx.z) * 168) + 120))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 629))], placeholder_shared[(((((int)threadIdx.z) * 168) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 629))], placeholder_shared[(((((int)threadIdx.z) * 168) + 121))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 646))], placeholder_shared[(((((int)threadIdx.z) * 168) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 646))], placeholder_shared[(((((int)threadIdx.z) * 168) + 122))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 663))], placeholder_shared[(((((int)threadIdx.z) * 168) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 663))], placeholder_shared[(((((int)threadIdx.z) * 168) + 123))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 680))], placeholder_shared[(((((int)threadIdx.z) * 168) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 680))], placeholder_shared[(((((int)threadIdx.z) * 168) + 124))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 697))], placeholder_shared[(((((int)threadIdx.z) * 168) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 697))], placeholder_shared[(((((int)threadIdx.z) * 168) + 125))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 714))], placeholder_shared[(((((int)threadIdx.z) * 168) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 714))], placeholder_shared[(((((int)threadIdx.z) * 168) + 126))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 731))], placeholder_shared[(((((int)threadIdx.z) * 168) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 731))], placeholder_shared[(((((int)threadIdx.z) * 168) + 127))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 748))], placeholder_shared[(((((int)threadIdx.z) * 168) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 748))], placeholder_shared[(((((int)threadIdx.z) * 168) + 128))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 765))], placeholder_shared[(((((int)threadIdx.z) * 168) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 765))], placeholder_shared[(((((int)threadIdx.z) * 168) + 129))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 782))], placeholder_shared[(((((int)threadIdx.z) * 168) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 782))], placeholder_shared[(((((int)threadIdx.z) * 168) + 130))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 799))], placeholder_shared[(((((int)threadIdx.z) * 168) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 799))], placeholder_shared[(((((int)threadIdx.z) * 168) + 131))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 816))], placeholder_shared[(((((int)threadIdx.z) * 168) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 816))], placeholder_shared[(((((int)threadIdx.z) * 168) + 132))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 833))], placeholder_shared[(((((int)threadIdx.z) * 168) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 833))], placeholder_shared[(((((int)threadIdx.z) * 168) + 133))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 850))], placeholder_shared[(((((int)threadIdx.z) * 168) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 850))], placeholder_shared[(((((int)threadIdx.z) * 168) + 134))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 867))], placeholder_shared[(((((int)threadIdx.z) * 168) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 867))], placeholder_shared[(((((int)threadIdx.z) * 168) + 135))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 884))], placeholder_shared[(((((int)threadIdx.z) * 168) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 884))], placeholder_shared[(((((int)threadIdx.z) * 168) + 136))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 901))], placeholder_shared[(((((int)threadIdx.z) * 168) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 901))], placeholder_shared[(((((int)threadIdx.z) * 168) + 137))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 918))], placeholder_shared[(((((int)threadIdx.z) * 168) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 918))], placeholder_shared[(((((int)threadIdx.z) * 168) + 138))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 935))], placeholder_shared[(((((int)threadIdx.z) * 168) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 935))], placeholder_shared[(((((int)threadIdx.z) * 168) + 139))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 952))], placeholder_shared[(((((int)threadIdx.z) * 168) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 952))], placeholder_shared[(((((int)threadIdx.z) * 168) + 140))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 969))], placeholder_shared[(((((int)threadIdx.z) * 168) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 969))], placeholder_shared[(((((int)threadIdx.z) * 168) + 141))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 986))], placeholder_shared[(((((int)threadIdx.z) * 168) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 986))], placeholder_shared[(((((int)threadIdx.z) * 168) + 142))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1003))], placeholder_shared[(((((int)threadIdx.z) * 168) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1003))], placeholder_shared[(((((int)threadIdx.z) * 168) + 143))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 168) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 168) + 144))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 168) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 168) + 145))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 168) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 168) + 146))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1071))], placeholder_shared[(((((int)threadIdx.z) * 168) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1071))], placeholder_shared[(((((int)threadIdx.z) * 168) + 147))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 168) + 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 168) + 148))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 168) + 65))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 168) + 149))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 168) + 66))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 168) + 150))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 168) + 67))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 168) + 151))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1156))], placeholder_shared[(((((int)threadIdx.z) * 168) + 68))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1156))], placeholder_shared[(((((int)threadIdx.z) * 168) + 152))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 168) + 69))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 168) + 153))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 168) + 70))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 168) + 154))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 168) + 71))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 168) + 155))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 168) + 72))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 168) + 156))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1241))], placeholder_shared[(((((int)threadIdx.z) * 168) + 73))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1241))], placeholder_shared[(((((int)threadIdx.z) * 168) + 157))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1258))], placeholder_shared[(((((int)threadIdx.z) * 168) + 74))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1258))], placeholder_shared[(((((int)threadIdx.z) * 168) + 158))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 168) + 75))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 168) + 159))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1292))], placeholder_shared[(((((int)threadIdx.z) * 168) + 76))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1292))], placeholder_shared[(((((int)threadIdx.z) * 168) + 160))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1309))], placeholder_shared[(((((int)threadIdx.z) * 168) + 77))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1309))], placeholder_shared[(((((int)threadIdx.z) * 168) + 161))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1326))], placeholder_shared[(((((int)threadIdx.z) * 168) + 78))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1326))], placeholder_shared[(((((int)threadIdx.z) * 168) + 162))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1343))], placeholder_shared[(((((int)threadIdx.z) * 168) + 79))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1343))], placeholder_shared[(((((int)threadIdx.z) * 168) + 163))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1360))], placeholder_shared[(((((int)threadIdx.z) * 168) + 80))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1360))], placeholder_shared[(((((int)threadIdx.z) * 168) + 164))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1377))], placeholder_shared[(((((int)threadIdx.z) * 168) + 81))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1377))], placeholder_shared[(((((int)threadIdx.z) * 168) + 165))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1394))], placeholder_shared[(((((int)threadIdx.z) * 168) + 82))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1394))], placeholder_shared[(((((int)threadIdx.z) * 168) + 166))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1411))], placeholder_shared[(((((int)threadIdx.z) * 168) + 83))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1411))], placeholder_shared[(((((int)threadIdx.z) * 168) + 167))], compute[(1)]);
  }
  T_relu[(((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 578)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 578)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 289))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 32) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
}

__device__ void fused_nn_avg_pool2d_10_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      tensor1[(0)] = (tensor1[(0)] + (((((1 <= (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 289) / 17) + dh)) && ((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 289) / 17) + dh) < 18)) && (1 <= (dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 17)))) && ((dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 17)) < 18)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 17)) + ((int)threadIdx.x)) + dw) - 18))] : 0.000000e+00f));
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.111111e-01f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[4];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 497664))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 995328))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1244160))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1492992))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1990656))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2239488))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2488320))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 497664))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 746496))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1244160))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1492992))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1741824))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2239488))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2488320))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2737152))]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 995328))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1244160))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1492992))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1990656))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2239488))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2488320))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2985984))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3234816))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3483648))]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1244160))] * -1.000000e+00f), -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1492992))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1741824))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2239488))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2488320))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2737152))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3234816))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3483648))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3732480))]);
  for (int ax2_inner = 0; ax2_inner < 2; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      if (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 1296) / 36) * 2) + ax2_inner) < 71) {
        if ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 36) * 2) + ax3_inner) < 71) {
          T_relu[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 1296) * 5041) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 1296) / 36) * 142)) + (ax2_inner * 71)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 36) * 2)) + ax3_inner))] = max((inverse[(((ax2_inner * 2) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 1296))]), 0.000000e+00f);
        }
      }
    }
  }
}

__device__ void fused_nn_max_pool2d_8_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor_local[1];
  tensor_local[(0)] = -3.402823e+38f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      tensor_local[(0)] = max(tensor_local[(0)], placeholder[(((((((((int)blockIdx.x) * 1156) + ((((int)threadIdx.x) >> 6) * 289)) + (((((int)threadIdx.x) & 63) >> 3) * 34)) + (dh * 17)) + ((((int)threadIdx.x) & 7) * 2)) + dw))]);
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = tensor_local[(0)];
}

__device__ void fused_nn_conv2d_add_nn_relu_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[512];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 8; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((rc_outer * 4096) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))];
    }
    placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))];
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 64; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 64) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 64)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_dense_add_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ placeholder2){
  float T_dense_rf[1];
  float red_buf0[1];
  __shared__ float T_dense[1];
  T_dense_rf[(0)] = 0.000000e+00f;
  for (int k_outer = 0; k_outer < 32; ++k_outer) {
    T_dense_rf[(0)] = __ocml_fma_f32(placeholder[(((k_outer * 64) + ((int)threadIdx.x)))], placeholder1[((((((int)blockIdx.x) * 2048) + (k_outer * 64)) + ((int)threadIdx.x)))], T_dense_rf[(0)]);
  }
  unsigned int mask[1];
  float t0[1];
  red_buf0[(0)] = T_dense_rf[(0)];
  ((int*)mask)[(0)] = 0;
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 32) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 32)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 16) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 16)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 8) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 8)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 4) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 4)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 2) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 2)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 1) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 1)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = (red_buf0[(0)] + t0[(0)]);
  red_buf0[(0)] = __hip_ds_bpermute(((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & (~63)) << 2), red_buf0[(0)]);
  if (((int)threadIdx.x) == 0) {
    T_dense[(0)] = red_buf0[(0)];
  }
  if (((int)threadIdx.x) == 0) {
    T_add[(((int)blockIdx.x))] = (T_dense[(0)] + placeholder2[(((int)blockIdx.x))]);
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[2];
  __shared__ float placeholder_shared[2048];
  __shared__ float data_pack_shared[128];
  bgemm_local[(0)] = 0.000000e+00f;
  bgemm_local[(1)] = 0.000000e+00f;
  for (int ci_outer = 0; ci_outer < 14; ++ci_outer) {
    __syncthreads();
    placeholder_shared[(((((int)threadIdx.y) * 2) + ((int)threadIdx.x)))] = placeholder[((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 128))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 768))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 256))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 1536))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 384))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 2304))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 512))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 3072))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 640))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 3840))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 768))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 4608))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 896))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 5376))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1024))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 6144))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1152))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 6912))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1280))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 7680))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1408))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 8448))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1536))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 9216))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1664))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 9984))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1792))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 10752))];
    placeholder_shared[((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) + 1920))] = placeholder[(((((((((int)blockIdx.z) * 172032) + (ci_outer * 12288)) + ((((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) >> 6) * 384)) + (((int)blockIdx.y) * 64)) + (((((int)threadIdx.y) * 2) + ((int)threadIdx.x)) & 63)) + 11520))];
    data_pack_shared[(((((int)threadIdx.y) * 2) + ((int)threadIdx.x)))] = data_pack[(((((((int)blockIdx.z) * 1792) + (ci_outer * 128)) + (((int)threadIdx.y) * 2)) + ((int)threadIdx.x)))];
    __syncthreads();
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((int)threadIdx.y))], data_pack_shared[((((int)threadIdx.x) * 2))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((int)threadIdx.y))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 4))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 5))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 8))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 9))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 12))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 13))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 256))], data_pack_shared[(((((int)threadIdx.x) * 2) + 16))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 256))], data_pack_shared[(((((int)threadIdx.x) * 2) + 17))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 320))], data_pack_shared[(((((int)threadIdx.x) * 2) + 20))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 320))], data_pack_shared[(((((int)threadIdx.x) * 2) + 21))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 384))], data_pack_shared[(((((int)threadIdx.x) * 2) + 24))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 384))], data_pack_shared[(((((int)threadIdx.x) * 2) + 25))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 448))], data_pack_shared[(((((int)threadIdx.x) * 2) + 28))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 448))], data_pack_shared[(((((int)threadIdx.x) * 2) + 29))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 512))], data_pack_shared[(((((int)threadIdx.x) * 2) + 32))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 512))], data_pack_shared[(((((int)threadIdx.x) * 2) + 33))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 576))], data_pack_shared[(((((int)threadIdx.x) * 2) + 36))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 576))], data_pack_shared[(((((int)threadIdx.x) * 2) + 37))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 640))], data_pack_shared[(((((int)threadIdx.x) * 2) + 40))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 640))], data_pack_shared[(((((int)threadIdx.x) * 2) + 41))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 704))], data_pack_shared[(((((int)threadIdx.x) * 2) + 44))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 704))], data_pack_shared[(((((int)threadIdx.x) * 2) + 45))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 768))], data_pack_shared[(((((int)threadIdx.x) * 2) + 48))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 768))], data_pack_shared[(((((int)threadIdx.x) * 2) + 49))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 832))], data_pack_shared[(((((int)threadIdx.x) * 2) + 52))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 832))], data_pack_shared[(((((int)threadIdx.x) * 2) + 53))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 896))], data_pack_shared[(((((int)threadIdx.x) * 2) + 56))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 896))], data_pack_shared[(((((int)threadIdx.x) * 2) + 57))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 960))], data_pack_shared[(((((int)threadIdx.x) * 2) + 60))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 960))], data_pack_shared[(((((int)threadIdx.x) * 2) + 61))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1024))], data_pack_shared[(((((int)threadIdx.x) * 2) + 64))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1024))], data_pack_shared[(((((int)threadIdx.x) * 2) + 65))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1088))], data_pack_shared[(((((int)threadIdx.x) * 2) + 68))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1088))], data_pack_shared[(((((int)threadIdx.x) * 2) + 69))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1152))], data_pack_shared[(((((int)threadIdx.x) * 2) + 72))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1152))], data_pack_shared[(((((int)threadIdx.x) * 2) + 73))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1216))], data_pack_shared[(((((int)threadIdx.x) * 2) + 76))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1216))], data_pack_shared[(((((int)threadIdx.x) * 2) + 77))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1280))], data_pack_shared[(((((int)threadIdx.x) * 2) + 80))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1280))], data_pack_shared[(((((int)threadIdx.x) * 2) + 81))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1344))], data_pack_shared[(((((int)threadIdx.x) * 2) + 84))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1344))], data_pack_shared[(((((int)threadIdx.x) * 2) + 85))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1408))], data_pack_shared[(((((int)threadIdx.x) * 2) + 88))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1408))], data_pack_shared[(((((int)threadIdx.x) * 2) + 89))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1472))], data_pack_shared[(((((int)threadIdx.x) * 2) + 92))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1472))], data_pack_shared[(((((int)threadIdx.x) * 2) + 93))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1536))], data_pack_shared[(((((int)threadIdx.x) * 2) + 96))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1536))], data_pack_shared[(((((int)threadIdx.x) * 2) + 97))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1600))], data_pack_shared[(((((int)threadIdx.x) * 2) + 100))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1600))], data_pack_shared[(((((int)threadIdx.x) * 2) + 101))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1664))], data_pack_shared[(((((int)threadIdx.x) * 2) + 104))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1664))], data_pack_shared[(((((int)threadIdx.x) * 2) + 105))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1728))], data_pack_shared[(((((int)threadIdx.x) * 2) + 108))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1728))], data_pack_shared[(((((int)threadIdx.x) * 2) + 109))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1792))], data_pack_shared[(((((int)threadIdx.x) * 2) + 112))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1792))], data_pack_shared[(((((int)threadIdx.x) * 2) + 113))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1856))], data_pack_shared[(((((int)threadIdx.x) * 2) + 116))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1856))], data_pack_shared[(((((int)threadIdx.x) * 2) + 117))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1920))], data_pack_shared[(((((int)threadIdx.x) * 2) + 120))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1920))], data_pack_shared[(((((int)threadIdx.x) * 2) + 121))], bgemm_local[(1)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1984))], data_pack_shared[(((((int)threadIdx.x) * 2) + 124))], bgemm_local[(0)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) + 1984))], data_pack_shared[(((((int)threadIdx.x) * 2) + 125))], bgemm_local[(1)]);
  }
  bgemm[(((((((int)blockIdx.z) * 1536) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 4)) + (((int)threadIdx.x) * 2)))] = bgemm_local[(0)];
  bgemm[((((((((int)blockIdx.z) * 1536) + (((int)blockIdx.y) * 256)) + (((int)threadIdx.y) * 4)) + (((int)threadIdx.x) * 2)) + 1))] = bgemm_local[(1)];
}

__device__ void fused_nn_conv2d_add_nn_relu_14_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[600];
  __shared__ float placeholder_shared[576];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder[(((((((rc_outer * 29400) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))];
    if (((((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) / 24) + ((int)threadIdx.z)) < 24) {
      if ((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)) < 576) {
        if (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) < 24) {
          placeholder_shared[((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 6912) + (((int)threadIdx.z) * 288)) + (rc_outer * 24)) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 24; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 24) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((((int)blockIdx.z) * 29400) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 24) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_9_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[32];
  __shared__ float pad_temp_shared[897];
  __shared__ float placeholder_shared[288];
  for (int ff_init = 0; ff_init < 4; ++ff_init) {
    compute[(ff_init)] = 0.000000e+00f;
    compute[((ff_init + 4))] = 0.000000e+00f;
    compute[((ff_init + 8))] = 0.000000e+00f;
    compute[((ff_init + 12))] = 0.000000e+00f;
    compute[((ff_init + 16))] = 0.000000e+00f;
    compute[((ff_init + 20))] = 0.000000e+00f;
    compute[((ff_init + 24))] = 0.000000e+00f;
    compute[((ff_init + 28))] = 0.000000e+00f;
  }
  for (int ry_outer = 0; ry_outer < 3; ++ry_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 897) {
        pad_temp_shared[(((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 299) * 89401) + (((int)blockIdx.y) * 598)) + (ry_outer * 299)) + (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 299)))];
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 288) {
        placeholder_shared[(((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 3) * 9) + (ry_outer * 3)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 3)))];
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 3; ++rc_inner) {
      for (int rx_inner = 0; rx_inner < 3; ++rx_inner) {
        for (int ff = 0; ff < 4; ++ff) {
          compute[(ff)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[((((ff * 9) + (rc_inner * 3)) + rx_inner))], compute[(ff)]);
          compute[((ff + 4))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 36))], compute[((ff + 4))]);
          compute[((ff + 8))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 72))], compute[((ff + 8))]);
          compute[((ff + 12))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 108))], compute[((ff + 12))]);
          compute[((ff + 16))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 144))], compute[((ff + 16))]);
          compute[((ff + 20))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 180))], compute[((ff + 20))]);
          compute[((ff + 24))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 216))], compute[((ff + 24))]);
          compute[((ff + 28))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 299) + (((int)threadIdx.x) * 2)) + rx_inner))], placeholder_shared[(((((ff * 9) + (rc_inner * 3)) + rx_inner) + 252))], compute[((ff + 28))]);
        }
      }
    }
  }
  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 4; ++ax1_inner_inner_inner) {
    T_relu[((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)))] = max((compute[(ax1_inner_inner_inner)] + placeholder2[(ax1_inner_inner_inner)]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 88804))] = max((compute[((ax1_inner_inner_inner + 4))] + placeholder2[((ax1_inner_inner_inner + 4))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 177608))] = max((compute[((ax1_inner_inner_inner + 8))] + placeholder2[((ax1_inner_inner_inner + 8))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 266412))] = max((compute[((ax1_inner_inner_inner + 12))] + placeholder2[((ax1_inner_inner_inner + 12))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 355216))] = max((compute[((ax1_inner_inner_inner + 16))] + placeholder2[((ax1_inner_inner_inner + 16))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 444020))] = max((compute[((ax1_inner_inner_inner + 20))] + placeholder2[((ax1_inner_inner_inner + 20))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 532824))] = max((compute[((ax1_inner_inner_inner + 24))] + placeholder2[((ax1_inner_inner_inner + 24))]), 0.000000e+00f);
    T_relu[(((((ax1_inner_inner_inner * 22201) + (((int)blockIdx.y) * 149)) + ((int)threadIdx.x)) + 621628))] = max((compute[((ax1_inner_inner_inner + 28))] + placeholder2[((ax1_inner_inner_inner + 28))]), 0.000000e+00f);
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_24_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[230];
  __shared__ float placeholder_shared[840];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) < 230) {
      if (((int)threadIdx.x) < 16) {
        pad_temp_shared[(((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)))] = (((3 <= (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) % 23)) && ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) % 23) < 20)) ? placeholder[((((((rc_outer * 2890) + ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) < 229) {
      if (((int)threadIdx.x) < 16) {
        pad_temp_shared[((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 1))] = (((3 <= ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 1) % 23)) && (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 1) % 23) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 1) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 1) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) < 228) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 2))] = (((3 <= ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 2) % 23)) && (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 2) % 23) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 2) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 2) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) < 227) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 3))] = (((3 <= ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 3) % 23)) && (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 3) % 23) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 3) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 3) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) < 226) {
      if (((int)threadIdx.x) < 15) {
        pad_temp_shared[((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 4))] = (((3 <= ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 4) % 23)) && (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 4) % 23) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 4) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 77) + (((int)threadIdx.x) * 5)) + 4) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    placeholder_shared[(((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + (((((int)threadIdx.x) * 17) / 70) * 1120)) + (rc_outer * 70)) + ((((int)threadIdx.x) * 17) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 1) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 1) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 2) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 2) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 3) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 3) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 4) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 4) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 5))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 5) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 5) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 6))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 6) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 6) % 70)))];
    placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 7))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 7) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 7) % 70)))];
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 8) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 8) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 832) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 8))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 8) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 8) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 9) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 9) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 831) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 9))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 9) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 9) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 10) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 10) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 830) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 10))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 10) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 10) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 11) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 11) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 829) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 11))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 11) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 11) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 12) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 12) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 828) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 12))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 12) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 12) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 13) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 13) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 827) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 13))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 13) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 13) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 14) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + ((((int)threadIdx.x) * 17) / 7)) < 118) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 826) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 14))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 14) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 14) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 15) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 15) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 825) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 15))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 15) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 15) % 70)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 17) + 16) / 70)) < 12) {
      if (((((int)threadIdx.z) * 40) + (((((int)threadIdx.x) * 17) + 16) / 7)) < 120) {
        if (((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) < 824) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 280) + (((int)threadIdx.x) * 17)) + 16))] = placeholder1[((((((((int)blockIdx.z) * 13440) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 17) + 16) / 70) * 1120)) + (rc_outer * 70)) + (((((int)threadIdx.x) * 17) + 16) % 70)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 70))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 70) + 210))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 70) + 420))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 70) + 630))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 70) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 70) + 211))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 70) + 421))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 70) + 631))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 70) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 70) + 212))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 70) + 422))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 70) + 632))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 70) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 70) + 213))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 70) + 423))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 70) + 633))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 70) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 70) + 214))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 70) + 424))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 70) + 634))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 70) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 70) + 215))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 70) + 425))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 70) + 635))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 70) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 70) + 216))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 70) + 426))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 70) + 636))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 70) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 70) + 217))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 70) + 427))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 70) + 637))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 70) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 70) + 218))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 70) + 428))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 70) + 638))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 70) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 70) + 219))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 70) + 429))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 70) + 639))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 70) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 70) + 220))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 70) + 430))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 70) + 640))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 70) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 70) + 221))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 70) + 431))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 70) + 641))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 70) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 70) + 222))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 70) + 432))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 70) + 642))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 70) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 70) + 223))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 70) + 433))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 70) + 643))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 70) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 70) + 224))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 70) + 434))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 70) + 644))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 70) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 70) + 225))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 70) + 435))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 70) + 645))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 70) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 70) + 226))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 70) + 436))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 70) + 646))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 70) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 70) + 227))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 70) + 437))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 70) + 647))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 70) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 70) + 228))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 70) + 438))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 70) + 648))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 229))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 439))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 649))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 70) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 70) + 230))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 70) + 440))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 70) + 650))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 70) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 70) + 231))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 70) + 441))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 70) + 651))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 70) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 70) + 232))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 70) + 442))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 70) + 652))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 70) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 70) + 233))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 70) + 443))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 70) + 653))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 70) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 70) + 234))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 70) + 444))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 70) + 654))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 70) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 70) + 235))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 70) + 445))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 70) + 655))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 70) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 70) + 236))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 70) + 446))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 70) + 656))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 70) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 70) + 237))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 70) + 447))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 70) + 657))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 70) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 70) + 238))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 70) + 448))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 70) + 658))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 70) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 70) + 239))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 70) + 449))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 70) + 659))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 70) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 70) + 240))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 70) + 450))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 70) + 660))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 70) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 70) + 241))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 70) + 451))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 70) + 661))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 70) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 70) + 242))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 70) + 452))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 70) + 662))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 70) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 70) + 243))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 70) + 453))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 70) + 663))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 70) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 70) + 244))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 70) + 454))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 70) + 664))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 70) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 70) + 245))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 70) + 455))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 70) + 665))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 70) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 70) + 246))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 70) + 456))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 70) + 666))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 70) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 70) + 247))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 70) + 457))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 70) + 667))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 70) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 70) + 248))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 70) + 458))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 70) + 668))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 249))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 459))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 669))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 70) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 70) + 250))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 70) + 460))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 70) + 670))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 70) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 70) + 251))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 70) + 461))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 70) + 671))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 70) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 70) + 252))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 70) + 462))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 70) + 672))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 253))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 463))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 673))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 70) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 70) + 254))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 70) + 464))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 70) + 674))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 70) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 70) + 255))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 70) + 465))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 70) + 675))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 70) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 70) + 256))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 70) + 466))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 70) + 676))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 70) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 70) + 257))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 70) + 467))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 70) + 677))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 70) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 70) + 258))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 70) + 468))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 70) + 678))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 70) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 70) + 259))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 70) + 469))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 70) + 679))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 70) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 70) + 260))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 70) + 470))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 70) + 680))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 70) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 70) + 261))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 70) + 471))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 70) + 681))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 70) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 70) + 262))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 70) + 472))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 70) + 682))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 70) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 70) + 263))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 70) + 473))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 70) + 683))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 70) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 70) + 264))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 70) + 474))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 70) + 684))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 70) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 70) + 265))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 70) + 475))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 70) + 685))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 70) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 70) + 266))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 70) + 476))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 70) + 686))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 70) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 70) + 267))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 70) + 477))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 70) + 687))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 70) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 70) + 268))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 70) + 478))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 70) + 688))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 269))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 479))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 689))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 70) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 70) + 270))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 70) + 480))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 70) + 690))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 70) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 70) + 271))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 70) + 481))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 70) + 691))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 70) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 70) + 272))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 70) + 482))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 70) + 692))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 70) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 70) + 273))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 70) + 483))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 70) + 693))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 70) + 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 70) + 274))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 70) + 484))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 70) + 694))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 70) + 65))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 70) + 275))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 70) + 485))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 70) + 695))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 70) + 66))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 70) + 276))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 70) + 486))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 70) + 696))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 70) + 67))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 70) + 277))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 70) + 487))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 70) + 697))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 70) + 68))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 70) + 278))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 70) + 488))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 70) + 698))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 70) + 69))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 70) + 279))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 70) + 489))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 70) + 699))], compute[(3)]);
  }
  T_relu[(((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 12) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 867))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 3))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 1734))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 6))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 2601))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 12) + ((int)threadIdx.z)) + 9))]), 0.000000e+00f);
}

__device__ void fused_concatenate_7_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6)) < 1280) {
      if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 8192) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) >> 3)) < 10240) {
        if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) < 81920) {
          T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((512 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 32768))] : ((320 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 20480))] : placeholder2[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))]));
        }
      }
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_32_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[2048];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 10; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 4))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 5))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 6))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)))] = placeholder1[((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 2))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 3))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 128))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 128) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 128) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 128) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 128) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 128) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 128) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 128) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 128) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 128) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 128) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 128) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 128) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 128) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 128) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 128) + 15))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 128) + 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 128) + 17))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 128) + 18))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 608))], placeholder_shared[(((((int)threadIdx.z) * 128) + 19))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 128) + 20))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 672))], placeholder_shared[(((((int)threadIdx.z) * 128) + 21))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 128) + 22))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 736))], placeholder_shared[(((((int)threadIdx.z) * 128) + 23))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 128) + 24))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 128) + 25))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 128) + 26))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 864))], placeholder_shared[(((((int)threadIdx.z) * 128) + 27))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 128) + 28))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 928))], placeholder_shared[(((((int)threadIdx.z) * 128) + 29))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 128) + 30))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 992))], placeholder_shared[(((((int)threadIdx.z) * 128) + 31))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 128) + 32))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 128) + 33))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 128) + 34))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1120))], placeholder_shared[(((((int)threadIdx.z) * 128) + 35))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 128) + 36))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1184))], placeholder_shared[(((((int)threadIdx.z) * 128) + 37))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 128) + 38))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1248))], placeholder_shared[(((((int)threadIdx.z) * 128) + 39))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 128) + 40))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1312))], placeholder_shared[(((((int)threadIdx.z) * 128) + 41))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 128) + 42))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1376))], placeholder_shared[(((((int)threadIdx.z) * 128) + 43))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 128) + 44))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1440))], placeholder_shared[(((((int)threadIdx.z) * 128) + 45))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 128) + 46))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1504))], placeholder_shared[(((((int)threadIdx.z) * 128) + 47))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 128) + 48))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1568))], placeholder_shared[(((((int)threadIdx.z) * 128) + 49))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 128) + 50))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1632))], placeholder_shared[(((((int)threadIdx.z) * 128) + 51))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 128) + 52))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1696))], placeholder_shared[(((((int)threadIdx.z) * 128) + 53))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 128) + 54))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1760))], placeholder_shared[(((((int)threadIdx.z) * 128) + 55))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 128) + 56))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1824))], placeholder_shared[(((((int)threadIdx.z) * 128) + 57))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 128) + 58))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1888))], placeholder_shared[(((((int)threadIdx.z) * 128) + 59))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 128) + 60))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1952))], placeholder_shared[(((((int)threadIdx.z) * 128) + 61))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 128) + 62))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2016))], placeholder_shared[(((((int)threadIdx.z) * 128) + 63))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 128) + 64))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2080))], placeholder_shared[(((((int)threadIdx.z) * 128) + 65))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 128) + 66))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2144))], placeholder_shared[(((((int)threadIdx.z) * 128) + 67))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 128) + 68))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2208))], placeholder_shared[(((((int)threadIdx.z) * 128) + 69))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 128) + 70))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2272))], placeholder_shared[(((((int)threadIdx.z) * 128) + 71))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 128) + 72))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2336))], placeholder_shared[(((((int)threadIdx.z) * 128) + 73))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 128) + 74))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2400))], placeholder_shared[(((((int)threadIdx.z) * 128) + 75))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 128) + 76))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2464))], placeholder_shared[(((((int)threadIdx.z) * 128) + 77))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 128) + 78))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2528))], placeholder_shared[(((((int)threadIdx.z) * 128) + 79))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 128) + 80))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2592))], placeholder_shared[(((((int)threadIdx.z) * 128) + 81))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 128) + 82))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2656))], placeholder_shared[(((((int)threadIdx.z) * 128) + 83))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 128) + 84))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2720))], placeholder_shared[(((((int)threadIdx.z) * 128) + 85))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 128) + 86))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2784))], placeholder_shared[(((((int)threadIdx.z) * 128) + 87))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 128) + 88))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2848))], placeholder_shared[(((((int)threadIdx.z) * 128) + 89))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 128) + 90))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2912))], placeholder_shared[(((((int)threadIdx.z) * 128) + 91))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 128) + 92))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2976))], placeholder_shared[(((((int)threadIdx.z) * 128) + 93))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 128) + 94))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3040))], placeholder_shared[(((((int)threadIdx.z) * 128) + 95))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 128) + 96))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3104))], placeholder_shared[(((((int)threadIdx.z) * 128) + 97))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 128) + 98))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3168))], placeholder_shared[(((((int)threadIdx.z) * 128) + 99))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 128) + 100))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3232))], placeholder_shared[(((((int)threadIdx.z) * 128) + 101))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 128) + 102))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3296))], placeholder_shared[(((((int)threadIdx.z) * 128) + 103))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 128) + 104))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3360))], placeholder_shared[(((((int)threadIdx.z) * 128) + 105))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 128) + 106))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3424))], placeholder_shared[(((((int)threadIdx.z) * 128) + 107))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 128) + 108))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3488))], placeholder_shared[(((((int)threadIdx.z) * 128) + 109))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 128) + 110))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3552))], placeholder_shared[(((((int)threadIdx.z) * 128) + 111))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 128) + 112))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3616))], placeholder_shared[(((((int)threadIdx.z) * 128) + 113))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 128) + 114))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3680))], placeholder_shared[(((((int)threadIdx.z) * 128) + 115))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 128) + 116))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3744))], placeholder_shared[(((((int)threadIdx.z) * 128) + 117))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 128) + 118))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3808))], placeholder_shared[(((((int)threadIdx.z) * 128) + 119))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 128) + 120))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3872))], placeholder_shared[(((((int)threadIdx.z) * 128) + 121))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 128) + 122))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3936))], placeholder_shared[(((((int)threadIdx.z) * 128) + 123))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 128) + 124))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4000))], placeholder_shared[(((((int)threadIdx.z) * 128) + 125))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 128) + 126))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4064))], placeholder_shared[(((((int)threadIdx.z) * 128) + 127))], compute[(0)]);
  }
  T_relu[((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_4_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[420];
  __shared__ float placeholder_shared[864];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 72; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 2) + (((int)threadIdx.x) / 7)) < 12) {
      if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 420) {
        if (((int)threadIdx.x) < 14) {
          pad_temp_shared[(((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)))] = placeholder[((((((rc_outer * 4900) + ((((((int)threadIdx.z) * 2) + (((int)threadIdx.x) / 7)) / 3) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((int)threadIdx.z) * 2) + (((int)threadIdx.x) / 7)) % 3) * 35)) + ((((int)threadIdx.x) % 7) * 5)))];
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 1) / 35)) < 12) {
      if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 419) {
        if (((int)threadIdx.x) < 14) {
          pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 1))] = placeholder[((((((rc_outer * 4900) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 1) / 35)) / 3) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 1) / 35)) % 3) * 35)) + (((((int)threadIdx.x) * 5) + 1) % 35)))];
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 2) / 35)) < 12) {
      if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 418) {
        if (((int)threadIdx.x) < 14) {
          pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 2))] = placeholder[((((((rc_outer * 4900) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 2) / 35)) / 3) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 2) / 35)) % 3) * 35)) + (((((int)threadIdx.x) * 5) + 2) % 35)))];
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 3) / 35)) < 12) {
      if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 417) {
        if (((int)threadIdx.x) < 14) {
          pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 3))] = placeholder[((((((rc_outer * 4900) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 3) / 35)) / 3) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 3) / 35)) % 3) * 35)) + (((((int)threadIdx.x) * 5) + 3) % 35)))];
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 4) / 35)) < 12) {
      if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 416) {
        if (((int)threadIdx.x) < 14) {
          pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 4))] = placeholder[((((((rc_outer * 4900) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 4) / 35)) / 3) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 5) + 4) / 35)) % 3) * 35)) + (((((int)threadIdx.x) * 5) + 4) % 35)))];
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 288) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 864) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[(((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)))] = placeholder1[((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 288) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 863) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 1))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 288) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 862) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 2))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 287) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 861) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 3))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 287) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 860) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 4))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 287) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 859) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 5))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 286) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 858) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 6))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 286) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 857) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 7))];
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 24) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 96) {
        if (((((int)threadIdx.z) * 48) + (((int)threadIdx.x) * 3)) < 286) {
          if (((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) < 856) {
            if (((int)threadIdx.x) < 16) {
              placeholder_shared[((((((int)threadIdx.z) * 144) + (((int)threadIdx.x) * 9)) + 8))] = placeholder1[(((((((((int)blockIdx.z) * 62208) + (((int)threadIdx.z) * 10368)) + ((((int)threadIdx.x) >> 2) * 2592)) + (rc_outer * 36)) + ((((int)threadIdx.x) & 3) * 9)) + 8))];
            }
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) * 2))], placeholder_shared[((((int)threadIdx.z) * 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) * 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 216))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) * 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 432))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) * 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 648))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 1))], placeholder_shared[(((((int)threadIdx.z) * 36) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 1))], placeholder_shared[(((((int)threadIdx.z) * 36) + 217))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 1))], placeholder_shared[(((((int)threadIdx.z) * 36) + 433))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 1))], placeholder_shared[(((((int)threadIdx.z) * 36) + 649))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 218))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 434))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 2))], placeholder_shared[(((((int)threadIdx.z) * 36) + 650))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 35))], placeholder_shared[(((((int)threadIdx.z) * 36) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 35))], placeholder_shared[(((((int)threadIdx.z) * 36) + 219))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 35))], placeholder_shared[(((((int)threadIdx.z) * 36) + 435))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 35))], placeholder_shared[(((((int)threadIdx.z) * 36) + 651))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 36))], placeholder_shared[(((((int)threadIdx.z) * 36) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 36))], placeholder_shared[(((((int)threadIdx.z) * 36) + 220))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 36))], placeholder_shared[(((((int)threadIdx.z) * 36) + 436))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 36))], placeholder_shared[(((((int)threadIdx.z) * 36) + 652))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 37))], placeholder_shared[(((((int)threadIdx.z) * 36) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 37))], placeholder_shared[(((((int)threadIdx.z) * 36) + 221))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 37))], placeholder_shared[(((((int)threadIdx.z) * 36) + 437))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 37))], placeholder_shared[(((((int)threadIdx.z) * 36) + 653))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 70))], placeholder_shared[(((((int)threadIdx.z) * 36) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 70))], placeholder_shared[(((((int)threadIdx.z) * 36) + 222))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 70))], placeholder_shared[(((((int)threadIdx.z) * 36) + 438))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 70))], placeholder_shared[(((((int)threadIdx.z) * 36) + 654))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 71))], placeholder_shared[(((((int)threadIdx.z) * 36) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 71))], placeholder_shared[(((((int)threadIdx.z) * 36) + 223))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 71))], placeholder_shared[(((((int)threadIdx.z) * 36) + 439))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 71))], placeholder_shared[(((((int)threadIdx.z) * 36) + 655))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 72))], placeholder_shared[(((((int)threadIdx.z) * 36) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 72))], placeholder_shared[(((((int)threadIdx.z) * 36) + 224))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 72))], placeholder_shared[(((((int)threadIdx.z) * 36) + 440))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 72))], placeholder_shared[(((((int)threadIdx.z) * 36) + 656))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 105))], placeholder_shared[(((((int)threadIdx.z) * 36) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 105))], placeholder_shared[(((((int)threadIdx.z) * 36) + 225))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 105))], placeholder_shared[(((((int)threadIdx.z) * 36) + 441))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 105))], placeholder_shared[(((((int)threadIdx.z) * 36) + 657))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 106))], placeholder_shared[(((((int)threadIdx.z) * 36) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 106))], placeholder_shared[(((((int)threadIdx.z) * 36) + 226))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 106))], placeholder_shared[(((((int)threadIdx.z) * 36) + 442))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 106))], placeholder_shared[(((((int)threadIdx.z) * 36) + 658))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 107))], placeholder_shared[(((((int)threadIdx.z) * 36) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 107))], placeholder_shared[(((((int)threadIdx.z) * 36) + 227))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 107))], placeholder_shared[(((((int)threadIdx.z) * 36) + 443))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 107))], placeholder_shared[(((((int)threadIdx.z) * 36) + 659))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 140))], placeholder_shared[(((((int)threadIdx.z) * 36) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 140))], placeholder_shared[(((((int)threadIdx.z) * 36) + 228))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 140))], placeholder_shared[(((((int)threadIdx.z) * 36) + 444))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 140))], placeholder_shared[(((((int)threadIdx.z) * 36) + 660))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 141))], placeholder_shared[(((((int)threadIdx.z) * 36) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 141))], placeholder_shared[(((((int)threadIdx.z) * 36) + 229))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 141))], placeholder_shared[(((((int)threadIdx.z) * 36) + 445))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 141))], placeholder_shared[(((((int)threadIdx.z) * 36) + 661))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 142))], placeholder_shared[(((((int)threadIdx.z) * 36) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 142))], placeholder_shared[(((((int)threadIdx.z) * 36) + 230))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 142))], placeholder_shared[(((((int)threadIdx.z) * 36) + 446))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 142))], placeholder_shared[(((((int)threadIdx.z) * 36) + 662))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 175))], placeholder_shared[(((((int)threadIdx.z) * 36) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 175))], placeholder_shared[(((((int)threadIdx.z) * 36) + 231))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 175))], placeholder_shared[(((((int)threadIdx.z) * 36) + 447))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 175))], placeholder_shared[(((((int)threadIdx.z) * 36) + 663))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 176))], placeholder_shared[(((((int)threadIdx.z) * 36) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 176))], placeholder_shared[(((((int)threadIdx.z) * 36) + 232))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 176))], placeholder_shared[(((((int)threadIdx.z) * 36) + 448))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 176))], placeholder_shared[(((((int)threadIdx.z) * 36) + 664))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 177))], placeholder_shared[(((((int)threadIdx.z) * 36) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 177))], placeholder_shared[(((((int)threadIdx.z) * 36) + 233))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 177))], placeholder_shared[(((((int)threadIdx.z) * 36) + 449))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 177))], placeholder_shared[(((((int)threadIdx.z) * 36) + 665))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 210))], placeholder_shared[(((((int)threadIdx.z) * 36) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 210))], placeholder_shared[(((((int)threadIdx.z) * 36) + 234))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 210))], placeholder_shared[(((((int)threadIdx.z) * 36) + 450))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 210))], placeholder_shared[(((((int)threadIdx.z) * 36) + 666))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 211))], placeholder_shared[(((((int)threadIdx.z) * 36) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 211))], placeholder_shared[(((((int)threadIdx.z) * 36) + 235))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 211))], placeholder_shared[(((((int)threadIdx.z) * 36) + 451))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 211))], placeholder_shared[(((((int)threadIdx.z) * 36) + 667))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 212))], placeholder_shared[(((((int)threadIdx.z) * 36) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 212))], placeholder_shared[(((((int)threadIdx.z) * 36) + 236))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 212))], placeholder_shared[(((((int)threadIdx.z) * 36) + 452))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 212))], placeholder_shared[(((((int)threadIdx.z) * 36) + 668))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 245))], placeholder_shared[(((((int)threadIdx.z) * 36) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 245))], placeholder_shared[(((((int)threadIdx.z) * 36) + 237))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 245))], placeholder_shared[(((((int)threadIdx.z) * 36) + 453))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 245))], placeholder_shared[(((((int)threadIdx.z) * 36) + 669))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 246))], placeholder_shared[(((((int)threadIdx.z) * 36) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 246))], placeholder_shared[(((((int)threadIdx.z) * 36) + 238))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 246))], placeholder_shared[(((((int)threadIdx.z) * 36) + 454))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 246))], placeholder_shared[(((((int)threadIdx.z) * 36) + 670))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 247))], placeholder_shared[(((((int)threadIdx.z) * 36) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 247))], placeholder_shared[(((((int)threadIdx.z) * 36) + 239))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 247))], placeholder_shared[(((((int)threadIdx.z) * 36) + 455))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 247))], placeholder_shared[(((((int)threadIdx.z) * 36) + 671))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 280))], placeholder_shared[(((((int)threadIdx.z) * 36) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 280))], placeholder_shared[(((((int)threadIdx.z) * 36) + 240))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 280))], placeholder_shared[(((((int)threadIdx.z) * 36) + 456))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 280))], placeholder_shared[(((((int)threadIdx.z) * 36) + 672))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 281))], placeholder_shared[(((((int)threadIdx.z) * 36) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 281))], placeholder_shared[(((((int)threadIdx.z) * 36) + 241))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 281))], placeholder_shared[(((((int)threadIdx.z) * 36) + 457))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 281))], placeholder_shared[(((((int)threadIdx.z) * 36) + 673))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 282))], placeholder_shared[(((((int)threadIdx.z) * 36) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 282))], placeholder_shared[(((((int)threadIdx.z) * 36) + 242))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 282))], placeholder_shared[(((((int)threadIdx.z) * 36) + 458))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 282))], placeholder_shared[(((((int)threadIdx.z) * 36) + 674))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 315))], placeholder_shared[(((((int)threadIdx.z) * 36) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 315))], placeholder_shared[(((((int)threadIdx.z) * 36) + 243))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 315))], placeholder_shared[(((((int)threadIdx.z) * 36) + 459))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 315))], placeholder_shared[(((((int)threadIdx.z) * 36) + 675))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 316))], placeholder_shared[(((((int)threadIdx.z) * 36) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 316))], placeholder_shared[(((((int)threadIdx.z) * 36) + 244))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 316))], placeholder_shared[(((((int)threadIdx.z) * 36) + 460))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 316))], placeholder_shared[(((((int)threadIdx.z) * 36) + 676))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 317))], placeholder_shared[(((((int)threadIdx.z) * 36) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 317))], placeholder_shared[(((((int)threadIdx.z) * 36) + 245))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 317))], placeholder_shared[(((((int)threadIdx.z) * 36) + 461))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 317))], placeholder_shared[(((((int)threadIdx.z) * 36) + 677))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 350))], placeholder_shared[(((((int)threadIdx.z) * 36) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 350))], placeholder_shared[(((((int)threadIdx.z) * 36) + 246))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 350))], placeholder_shared[(((((int)threadIdx.z) * 36) + 462))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 350))], placeholder_shared[(((((int)threadIdx.z) * 36) + 678))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 351))], placeholder_shared[(((((int)threadIdx.z) * 36) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 351))], placeholder_shared[(((((int)threadIdx.z) * 36) + 247))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 351))], placeholder_shared[(((((int)threadIdx.z) * 36) + 463))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 351))], placeholder_shared[(((((int)threadIdx.z) * 36) + 679))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 352))], placeholder_shared[(((((int)threadIdx.z) * 36) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 352))], placeholder_shared[(((((int)threadIdx.z) * 36) + 248))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 352))], placeholder_shared[(((((int)threadIdx.z) * 36) + 464))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 352))], placeholder_shared[(((((int)threadIdx.z) * 36) + 680))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 385))], placeholder_shared[(((((int)threadIdx.z) * 36) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 385))], placeholder_shared[(((((int)threadIdx.z) * 36) + 249))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 385))], placeholder_shared[(((((int)threadIdx.z) * 36) + 465))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 385))], placeholder_shared[(((((int)threadIdx.z) * 36) + 681))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 386))], placeholder_shared[(((((int)threadIdx.z) * 36) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 386))], placeholder_shared[(((((int)threadIdx.z) * 36) + 250))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 386))], placeholder_shared[(((((int)threadIdx.z) * 36) + 466))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 386))], placeholder_shared[(((((int)threadIdx.z) * 36) + 682))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 387))], placeholder_shared[(((((int)threadIdx.z) * 36) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 387))], placeholder_shared[(((((int)threadIdx.z) * 36) + 251))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 387))], placeholder_shared[(((((int)threadIdx.z) * 36) + 467))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.x) * 2) + 387))], placeholder_shared[(((((int)threadIdx.z) * 36) + 683))], compute[(3)]);
  }
  T_relu[(((((((int)blockIdx.z) * 6936) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 24) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 6936) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 1734))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 24) + ((int)threadIdx.z)) + 6))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 6936) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 3468))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 24) + ((int)threadIdx.z)) + 12))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 6936) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 5202))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 24) + ((int)threadIdx.z)) + 18))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_17_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[46];
  __shared__ float placeholder_shared[112];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 64; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) < 46) {
      if (((int)threadIdx.x) < 12) {
        pad_temp_shared[(((((int)threadIdx.z) * 12) + ((int)threadIdx.x)))] = (((3 <= (((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) % 23)) && ((((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) % 23) < 20)) ? placeholder[((((((rc_outer * 578) + ((((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) % 23)) - 3))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 2) + (((int)threadIdx.x) / 7)) < 8) {
      if (((((int)threadIdx.z) * 4) + ((((int)threadIdx.x) * 2) / 7)) < 16) {
        if (((((int)threadIdx.z) * 28) + (((int)threadIdx.x) * 2)) < 112) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[(((((int)threadIdx.z) * 28) + (((int)threadIdx.x) * 2)))] = placeholder1[((((((((int)blockIdx.z) * 7168) + (((int)threadIdx.z) * 1792)) + ((((int)threadIdx.x) / 7) * 896)) + (rc_outer * 14)) + ((((int)threadIdx.x) % 7) * 2)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) * 2) + 1) / 14)) < 8) {
      if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 2) + 1) / 7)) < 16) {
        if (((((int)threadIdx.z) * 28) + (((int)threadIdx.x) * 2)) < 111) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 28) + (((int)threadIdx.x) * 2)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 7168) + (((int)threadIdx.z) * 1792)) + ((((((int)threadIdx.x) * 2) + 1) / 14) * 896)) + (rc_outer * 14)) + (((((int)threadIdx.x) * 2) + 1) % 14)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 28) + 14))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 28) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 28) + 15))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 28) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 28) + 16))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 28) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 28) + 17))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 28) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 28) + 18))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 28) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 28) + 19))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 28) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 28) + 20))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 28) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 28) + 21))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 28) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 28) + 22))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 28) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 28) + 23))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 28) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 28) + 24))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 28) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 28) + 25))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 28) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 28) + 26))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 28) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 28) + 27))], compute[(1)]);
  }
  T_relu[(((((((int)blockIdx.z) * 2312) + (((int)threadIdx.z) * 578)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 2312) + (((int)threadIdx.z) * 578)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 289))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
}

__device__ void fused_concatenate_8_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 4; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) < 221952) {
      T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((166464 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 166464))] : ((110976 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 110976))] : ((55488 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder2[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 55488))] : placeholder3[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))])));
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_10_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[162];
  __shared__ float placeholder_shared[400];
  compute[(0)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 24; ++rc_outer) {
    __syncthreads();
    if (((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) / 81) + ((int)threadIdx.z)) < 2) {
      if (((((int)threadIdx.z) * 9) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) / 9)) < 18) {
        if ((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) < 162) {
          if (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) < 81) {
            pad_temp_shared[((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)))] = (((((2 <= ((((int)blockIdx.y) * 5) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) / 9))) && (((((int)blockIdx.y) * 5) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) / 9)) < 37)) && (2 <= ((((int)blockIdx.x) * 5) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) % 9)))) && (((((int)blockIdx.x) * 5) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) % 9)) < 37)) ? placeholder[((((((((rc_outer * 2450) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) / 9) * 35)) + (((int)blockIdx.x) * 5)) + (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) % 9)) - 72))] : 0.000000e+00f);
          }
        }
      }
    }
    if ((((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) / 81) + ((int)threadIdx.z)) < 2) {
      if (((((int)threadIdx.z) * 9) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) / 9)) < 18) {
        if ((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) < 161) {
          if (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) < 80) {
            if (((int)threadIdx.x) < 4) {
              pad_temp_shared[(((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) + 1))] = (((((2 <= ((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) / 9))) && (((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) / 9)) < 37)) && (2 <= ((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) % 9)))) && (((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) % 9)) < 37)) ? placeholder[((((((((rc_outer * 2450) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) / 9) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 1) % 9)) - 72))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if ((((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) / 81) + ((int)threadIdx.z)) < 2) {
      if (((((int)threadIdx.z) * 9) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) / 9)) < 18) {
        if ((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) < 160) {
          if (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) < 79) {
            if (((int)threadIdx.x) < 4) {
              pad_temp_shared[(((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) + 2))] = (((((2 <= ((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) / 9))) && (((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) / 9)) < 37)) && (2 <= ((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) % 9)))) && (((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) % 9)) < 37)) ? placeholder[((((((((rc_outer * 2450) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) / 9) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 2) % 9)) - 72))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if ((((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) / 81) + ((int)threadIdx.z)) < 2) {
      if (((((int)threadIdx.z) * 9) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) / 9)) < 18) {
        if ((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) < 159) {
          if (((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) < 78) {
            if (((int)threadIdx.x) < 4) {
              pad_temp_shared[(((((((int)threadIdx.z) * 81) + (((int)threadIdx.y) * 17)) + (((int)threadIdx.x) * 4)) + 3))] = (((((2 <= ((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) / 9))) && (((((int)blockIdx.y) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) / 9)) < 37)) && (2 <= ((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) % 9)))) && (((((int)blockIdx.x) * 5) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) % 9)) < 37)) ? placeholder[((((((((rc_outer * 2450) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) / 9) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.y) * 17) + (((int)threadIdx.x) * 4)) + 3) % 9)) - 72))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    placeholder_shared[((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) * 8) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) * 8) / 5)) % 10) * 5)) + ((((int)threadIdx.x) * 8) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 1) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 1) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 1) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 2) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 2) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 2) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 3) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 3) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 3) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 4) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 4) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 4) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + (((((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) * 8) / 5)) + 1) / 10) * 1200)) + (rc_outer * 50)) + (((((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) * 8) / 5)) + 1) % 10) * 5)) + ((((int)threadIdx.x) * 8) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 6) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 6) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 1) % 5)))];
    placeholder_shared[(((((((int)threadIdx.z) * 200) + (((int)threadIdx.y) * 40)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 9600) + (((int)threadIdx.z) * 4800)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 7) / 5)) / 10) * 1200)) + (rc_outer * 50)) + ((((((int)threadIdx.y) * 8) + (((((int)threadIdx.x) * 8) + 7) / 5)) % 10) * 5)) + (((((int)threadIdx.x) * 8) + 2) % 5)))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 9) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 100))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 9) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 100) + 200))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 9) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 100) + 50))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 9) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 100) + 250))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 100) + 1))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 100) + 201))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 100) + 51))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 100) + 251))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 100) + 2))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 100) + 202))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 100) + 52))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 100) + 252))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 100) + 3))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 100) + 203))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 100) + 53))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 100) + 253))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 100) + 4))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 100) + 204))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 100) + 54))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 100) + 254))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 9))], placeholder_shared[(((((int)threadIdx.z) * 100) + 5))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 9))], placeholder_shared[(((((int)threadIdx.z) * 100) + 205))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 9))], placeholder_shared[(((((int)threadIdx.z) * 100) + 55))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 9))], placeholder_shared[(((((int)threadIdx.z) * 100) + 255))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 10))], placeholder_shared[(((((int)threadIdx.z) * 100) + 6))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 10))], placeholder_shared[(((((int)threadIdx.z) * 100) + 206))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 10))], placeholder_shared[(((((int)threadIdx.z) * 100) + 56))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 10))], placeholder_shared[(((((int)threadIdx.z) * 100) + 256))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 11))], placeholder_shared[(((((int)threadIdx.z) * 100) + 7))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 11))], placeholder_shared[(((((int)threadIdx.z) * 100) + 207))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 11))], placeholder_shared[(((((int)threadIdx.z) * 100) + 57))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 11))], placeholder_shared[(((((int)threadIdx.z) * 100) + 257))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 12))], placeholder_shared[(((((int)threadIdx.z) * 100) + 8))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 12))], placeholder_shared[(((((int)threadIdx.z) * 100) + 208))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 12))], placeholder_shared[(((((int)threadIdx.z) * 100) + 58))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 12))], placeholder_shared[(((((int)threadIdx.z) * 100) + 258))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 13))], placeholder_shared[(((((int)threadIdx.z) * 100) + 9))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 13))], placeholder_shared[(((((int)threadIdx.z) * 100) + 209))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 13))], placeholder_shared[(((((int)threadIdx.z) * 100) + 59))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 13))], placeholder_shared[(((((int)threadIdx.z) * 100) + 259))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 100) + 10))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 100) + 210))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 100) + 60))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 100) + 260))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 100) + 11))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 100) + 211))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 100) + 61))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 100) + 261))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 100) + 12))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 100) + 212))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 100) + 62))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 100) + 262))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 100) + 13))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 100) + 213))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 100) + 63))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 100) + 263))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 22))], placeholder_shared[(((((int)threadIdx.z) * 100) + 14))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 22))], placeholder_shared[(((((int)threadIdx.z) * 100) + 214))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 22))], placeholder_shared[(((((int)threadIdx.z) * 100) + 64))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 22))], placeholder_shared[(((((int)threadIdx.z) * 100) + 264))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 27))], placeholder_shared[(((((int)threadIdx.z) * 100) + 15))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 27))], placeholder_shared[(((((int)threadIdx.z) * 100) + 215))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 27))], placeholder_shared[(((((int)threadIdx.z) * 100) + 65))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 27))], placeholder_shared[(((((int)threadIdx.z) * 100) + 265))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 28))], placeholder_shared[(((((int)threadIdx.z) * 100) + 16))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 28))], placeholder_shared[(((((int)threadIdx.z) * 100) + 216))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 28))], placeholder_shared[(((((int)threadIdx.z) * 100) + 66))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 28))], placeholder_shared[(((((int)threadIdx.z) * 100) + 266))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 29))], placeholder_shared[(((((int)threadIdx.z) * 100) + 17))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 29))], placeholder_shared[(((((int)threadIdx.z) * 100) + 217))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 29))], placeholder_shared[(((((int)threadIdx.z) * 100) + 67))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 29))], placeholder_shared[(((((int)threadIdx.z) * 100) + 267))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 30))], placeholder_shared[(((((int)threadIdx.z) * 100) + 18))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 30))], placeholder_shared[(((((int)threadIdx.z) * 100) + 218))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 30))], placeholder_shared[(((((int)threadIdx.z) * 100) + 68))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 30))], placeholder_shared[(((((int)threadIdx.z) * 100) + 268))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 31))], placeholder_shared[(((((int)threadIdx.z) * 100) + 19))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 31))], placeholder_shared[(((((int)threadIdx.z) * 100) + 219))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 31))], placeholder_shared[(((((int)threadIdx.z) * 100) + 69))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 31))], placeholder_shared[(((((int)threadIdx.z) * 100) + 269))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 100) + 20))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 100) + 220))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 100) + 70))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 100) + 270))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 100) + 21))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 100) + 221))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 100) + 71))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 100) + 271))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 100) + 22))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 100) + 222))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 100) + 72))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 100) + 272))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 39))], placeholder_shared[(((((int)threadIdx.z) * 100) + 23))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 39))], placeholder_shared[(((((int)threadIdx.z) * 100) + 223))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 39))], placeholder_shared[(((((int)threadIdx.z) * 100) + 73))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 39))], placeholder_shared[(((((int)threadIdx.z) * 100) + 273))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 40))], placeholder_shared[(((((int)threadIdx.z) * 100) + 24))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 40))], placeholder_shared[(((((int)threadIdx.z) * 100) + 224))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 40))], placeholder_shared[(((((int)threadIdx.z) * 100) + 74))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 40))], placeholder_shared[(((((int)threadIdx.z) * 100) + 274))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 81))], placeholder_shared[(((((int)threadIdx.z) * 100) + 25))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 81))], placeholder_shared[(((((int)threadIdx.z) * 100) + 225))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 81))], placeholder_shared[(((((int)threadIdx.z) * 100) + 75))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 81))], placeholder_shared[(((((int)threadIdx.z) * 100) + 275))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 82))], placeholder_shared[(((((int)threadIdx.z) * 100) + 26))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 82))], placeholder_shared[(((((int)threadIdx.z) * 100) + 226))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 82))], placeholder_shared[(((((int)threadIdx.z) * 100) + 76))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 82))], placeholder_shared[(((((int)threadIdx.z) * 100) + 276))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 83))], placeholder_shared[(((((int)threadIdx.z) * 100) + 27))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 83))], placeholder_shared[(((((int)threadIdx.z) * 100) + 227))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 83))], placeholder_shared[(((((int)threadIdx.z) * 100) + 77))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 83))], placeholder_shared[(((((int)threadIdx.z) * 100) + 277))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 84))], placeholder_shared[(((((int)threadIdx.z) * 100) + 28))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 84))], placeholder_shared[(((((int)threadIdx.z) * 100) + 228))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 84))], placeholder_shared[(((((int)threadIdx.z) * 100) + 78))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 84))], placeholder_shared[(((((int)threadIdx.z) * 100) + 278))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 100) + 29))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 100) + 229))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 100) + 79))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 100) + 279))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 90))], placeholder_shared[(((((int)threadIdx.z) * 100) + 30))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 90))], placeholder_shared[(((((int)threadIdx.z) * 100) + 230))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 90))], placeholder_shared[(((((int)threadIdx.z) * 100) + 80))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 90))], placeholder_shared[(((((int)threadIdx.z) * 100) + 280))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 91))], placeholder_shared[(((((int)threadIdx.z) * 100) + 31))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 91))], placeholder_shared[(((((int)threadIdx.z) * 100) + 231))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 91))], placeholder_shared[(((((int)threadIdx.z) * 100) + 81))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 91))], placeholder_shared[(((((int)threadIdx.z) * 100) + 281))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 92))], placeholder_shared[(((((int)threadIdx.z) * 100) + 32))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 92))], placeholder_shared[(((((int)threadIdx.z) * 100) + 232))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 92))], placeholder_shared[(((((int)threadIdx.z) * 100) + 82))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 92))], placeholder_shared[(((((int)threadIdx.z) * 100) + 282))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 93))], placeholder_shared[(((((int)threadIdx.z) * 100) + 33))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 93))], placeholder_shared[(((((int)threadIdx.z) * 100) + 233))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 93))], placeholder_shared[(((((int)threadIdx.z) * 100) + 83))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 93))], placeholder_shared[(((((int)threadIdx.z) * 100) + 283))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 94))], placeholder_shared[(((((int)threadIdx.z) * 100) + 34))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 94))], placeholder_shared[(((((int)threadIdx.z) * 100) + 234))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 94))], placeholder_shared[(((((int)threadIdx.z) * 100) + 84))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 94))], placeholder_shared[(((((int)threadIdx.z) * 100) + 284))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 99))], placeholder_shared[(((((int)threadIdx.z) * 100) + 35))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 99))], placeholder_shared[(((((int)threadIdx.z) * 100) + 235))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 99))], placeholder_shared[(((((int)threadIdx.z) * 100) + 85))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 99))], placeholder_shared[(((((int)threadIdx.z) * 100) + 285))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 100))], placeholder_shared[(((((int)threadIdx.z) * 100) + 36))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 100))], placeholder_shared[(((((int)threadIdx.z) * 100) + 236))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 100))], placeholder_shared[(((((int)threadIdx.z) * 100) + 86))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 100))], placeholder_shared[(((((int)threadIdx.z) * 100) + 286))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 101))], placeholder_shared[(((((int)threadIdx.z) * 100) + 37))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 101))], placeholder_shared[(((((int)threadIdx.z) * 100) + 237))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 101))], placeholder_shared[(((((int)threadIdx.z) * 100) + 87))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 101))], placeholder_shared[(((((int)threadIdx.z) * 100) + 287))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 100) + 38))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 100) + 238))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 100) + 88))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 100) + 288))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 100) + 39))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 100) + 239))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 100) + 89))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 100) + 289))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 108))], placeholder_shared[(((((int)threadIdx.z) * 100) + 40))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 108))], placeholder_shared[(((((int)threadIdx.z) * 100) + 240))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 108))], placeholder_shared[(((((int)threadIdx.z) * 100) + 90))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 108))], placeholder_shared[(((((int)threadIdx.z) * 100) + 290))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 109))], placeholder_shared[(((((int)threadIdx.z) * 100) + 41))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 109))], placeholder_shared[(((((int)threadIdx.z) * 100) + 241))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 109))], placeholder_shared[(((((int)threadIdx.z) * 100) + 91))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 109))], placeholder_shared[(((((int)threadIdx.z) * 100) + 291))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 110))], placeholder_shared[(((((int)threadIdx.z) * 100) + 42))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 110))], placeholder_shared[(((((int)threadIdx.z) * 100) + 242))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 110))], placeholder_shared[(((((int)threadIdx.z) * 100) + 92))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 110))], placeholder_shared[(((((int)threadIdx.z) * 100) + 292))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 111))], placeholder_shared[(((((int)threadIdx.z) * 100) + 43))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 111))], placeholder_shared[(((((int)threadIdx.z) * 100) + 243))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 111))], placeholder_shared[(((((int)threadIdx.z) * 100) + 93))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 111))], placeholder_shared[(((((int)threadIdx.z) * 100) + 293))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 100) + 44))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 100) + 244))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 100) + 94))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 100) + 294))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 117))], placeholder_shared[(((((int)threadIdx.z) * 100) + 45))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 117))], placeholder_shared[(((((int)threadIdx.z) * 100) + 245))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 117))], placeholder_shared[(((((int)threadIdx.z) * 100) + 95))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 117))], placeholder_shared[(((((int)threadIdx.z) * 100) + 295))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 118))], placeholder_shared[(((((int)threadIdx.z) * 100) + 46))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 118))], placeholder_shared[(((((int)threadIdx.z) * 100) + 246))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 118))], placeholder_shared[(((((int)threadIdx.z) * 100) + 96))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 118))], placeholder_shared[(((((int)threadIdx.z) * 100) + 296))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 100) + 47))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 100) + 247))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 100) + 97))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 100) + 297))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 100) + 48))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 100) + 248))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 100) + 98))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 100) + 298))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 100) + 49))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 100) + 249))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 100) + 99))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 9) + ((int)threadIdx.x)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 100) + 299))], compute[(3)]);
  }
  T_relu[(((((((((int)blockIdx.z) * 9800) + (((int)threadIdx.z) * 2450)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 9800) + (((int)threadIdx.z) * 2450)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)) + 4900))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 4))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 9800) + (((int)threadIdx.z) * 2450)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)) + 1225))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 9800) + (((int)threadIdx.z) * 2450)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)) + 6125))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 5))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[4];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 350464))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 700928))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1401856))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2102784))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2803712))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3154176))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3504640))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 350464))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 700928))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1051392))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2102784))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2453248))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3154176))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3504640))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3855104))]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1401856))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2102784))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2803712))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3154176))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3504640))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4205568))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4556032))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4906496))]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1752320))] * -1.000000e+00f), -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2102784))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 2453248))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3154176))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3504640))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3855104))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4556032))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4906496))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 5256960))]);
  for (int ax2_inner = 0; ax2_inner < 2; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      if (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 2) + ax2_inner) < 147) {
        if ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2) + ax3_inner) < 147) {
          T_relu[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476) * 21609) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 5476) / 74) * 294)) + (ax2_inner * 147)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 74) * 2)) + ax3_inner))] = max((inverse[(((ax2_inner * 2) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 5476))]), 0.000000e+00f);
        }
      }
    }
  }
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[16];
  float data_pack_local[16];
  for (int eps = 0; eps < 4; ++eps) {
    for (int nu = 0; nu < 4; ++nu) {
      d[(((eps * 4) + nu))] = (((((1 <= ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + eps)) && (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + eps) < 36)) && (1 <= (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + nu))) && ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + nu) < 36)) ? placeholder[((((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324) * 1225) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 70)) + (eps * 35)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2)) + nu) - 36))] : 0.000000e+00f);
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(2)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(1)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(8)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(10)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(9)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(11)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(4)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(6)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(5)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(6)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(9)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(14)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(14)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(13)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(14)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(15)]);
  for (int eps1 = 0; eps1 < 4; ++eps1) {
    for (int nu1 = 0; nu1 < 4; ++nu1) {
      data_pack[(((((eps1 * 124416) + (nu1 * 31104)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 4) + nu1))];
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_2_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[1360];
  __shared__ float placeholder_shared[1440];
  compute[(0)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)))] = placeholder[(((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 1))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 2))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 3))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 4))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 4))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 5))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 5))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 6))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 6))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 7))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 7))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 8))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 8))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 9))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 9))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 10))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 10))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 11))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 11))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 12))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 12))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 13))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 13))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 14))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 14))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 15))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 15))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 16))] = placeholder[((((((rc_outer * 4624) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) / 5) * 289)) + (((int)blockIdx.y) * 68)) + (((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) % 5) * 17)) + 16))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 17))] = placeholder[(((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 18))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 19))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 20))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 21))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 4))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 22))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 5))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 23))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 6))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 24))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 7))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 25))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 8))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 26))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 9))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 27))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 10))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 28))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 11))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 29))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 12))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 30))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 13))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 31))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 14))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 32))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 15))];
    pad_temp_shared[(((((((int)threadIdx.z) * 272) + (((int)threadIdx.y) * 136)) + (((int)threadIdx.x) * 34)) + 33))] = placeholder[((((((rc_outer * 4624) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) / 5) * 289)) + (((int)blockIdx.y) * 68)) + ((((((((int)threadIdx.z) * 16) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1) % 5) * 17)) + 16))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)))] = placeholder1[((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 2))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 3))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 4))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 5))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 6))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 7))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 8))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 8))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 9))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 9))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 10))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 10))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 11))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 11))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 12))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 12))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 13))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 13))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 14))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 14))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 15))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 15))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 16))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 16))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 17))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 17))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 18))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 18))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 19))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 19))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 20))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 20))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 21))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 21))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 22))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 22))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 23))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 23))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 24))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 24))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 25))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 25))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 26))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 26))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 27))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 27))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 28))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 28))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 29))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 29))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 30))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 30))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 31))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 31))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 32))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 32))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 33))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 33))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 34))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 34))];
    placeholder_shared[(((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 144)) + (((int)threadIdx.x) * 36)) + 35))] = placeholder1[(((((((((int)blockIdx.z) * 17280) + (((int)threadIdx.z) * 3456)) + (((int)threadIdx.y) * 1728)) + (rc_outer * 144)) + (((int)threadIdx.x) * 36)) + 35))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)))], placeholder_shared[((((int)threadIdx.z) * 144))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)))], placeholder_shared[(((((int)threadIdx.z) * 144) + 720))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 2))], placeholder_shared[((((int)threadIdx.z) * 144))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 144) + 720))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 144) + 1))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1))], placeholder_shared[(((((int)threadIdx.z) * 144) + 721))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 144) + 1))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 3))], placeholder_shared[(((((int)threadIdx.z) * 144) + 721))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 144) + 2))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 2))], placeholder_shared[(((((int)threadIdx.z) * 144) + 722))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 144) + 2))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 144) + 722))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 17))], placeholder_shared[(((((int)threadIdx.z) * 144) + 3))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 17))], placeholder_shared[(((((int)threadIdx.z) * 144) + 723))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 144) + 3))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 144) + 723))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 144) + 4))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 18))], placeholder_shared[(((((int)threadIdx.z) * 144) + 724))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 144) + 4))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 20))], placeholder_shared[(((((int)threadIdx.z) * 144) + 724))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 144) + 5))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 19))], placeholder_shared[(((((int)threadIdx.z) * 144) + 725))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 144) + 5))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 21))], placeholder_shared[(((((int)threadIdx.z) * 144) + 725))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 34))], placeholder_shared[(((((int)threadIdx.z) * 144) + 6))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 34))], placeholder_shared[(((((int)threadIdx.z) * 144) + 726))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 144) + 6))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 144) + 726))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 35))], placeholder_shared[(((((int)threadIdx.z) * 144) + 7))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 35))], placeholder_shared[(((((int)threadIdx.z) * 144) + 727))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 144) + 7))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 37))], placeholder_shared[(((((int)threadIdx.z) * 144) + 727))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 144) + 8))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 36))], placeholder_shared[(((((int)threadIdx.z) * 144) + 728))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 144) + 8))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 38))], placeholder_shared[(((((int)threadIdx.z) * 144) + 728))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 144) + 9))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 144) + 729))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 87))], placeholder_shared[(((((int)threadIdx.z) * 144) + 9))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 87))], placeholder_shared[(((((int)threadIdx.z) * 144) + 729))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 86))], placeholder_shared[(((((int)threadIdx.z) * 144) + 10))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 86))], placeholder_shared[(((((int)threadIdx.z) * 144) + 730))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 88))], placeholder_shared[(((((int)threadIdx.z) * 144) + 10))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 88))], placeholder_shared[(((((int)threadIdx.z) * 144) + 730))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 87))], placeholder_shared[(((((int)threadIdx.z) * 144) + 11))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 87))], placeholder_shared[(((((int)threadIdx.z) * 144) + 731))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 89))], placeholder_shared[(((((int)threadIdx.z) * 144) + 11))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 89))], placeholder_shared[(((((int)threadIdx.z) * 144) + 731))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 144) + 12))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 144) + 732))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 104))], placeholder_shared[(((((int)threadIdx.z) * 144) + 12))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 104))], placeholder_shared[(((((int)threadIdx.z) * 144) + 732))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 144) + 13))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 103))], placeholder_shared[(((((int)threadIdx.z) * 144) + 733))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 105))], placeholder_shared[(((((int)threadIdx.z) * 144) + 13))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 105))], placeholder_shared[(((((int)threadIdx.z) * 144) + 733))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 104))], placeholder_shared[(((((int)threadIdx.z) * 144) + 14))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 104))], placeholder_shared[(((((int)threadIdx.z) * 144) + 734))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 106))], placeholder_shared[(((((int)threadIdx.z) * 144) + 14))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 106))], placeholder_shared[(((((int)threadIdx.z) * 144) + 734))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 144) + 15))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 119))], placeholder_shared[(((((int)threadIdx.z) * 144) + 735))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 144) + 15))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 144) + 735))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 144) + 16))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 144) + 736))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 122))], placeholder_shared[(((((int)threadIdx.z) * 144) + 16))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 122))], placeholder_shared[(((((int)threadIdx.z) * 144) + 736))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 144) + 17))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 121))], placeholder_shared[(((((int)threadIdx.z) * 144) + 737))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 123))], placeholder_shared[(((((int)threadIdx.z) * 144) + 17))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 123))], placeholder_shared[(((((int)threadIdx.z) * 144) + 737))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 170))], placeholder_shared[(((((int)threadIdx.z) * 144) + 18))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 170))], placeholder_shared[(((((int)threadIdx.z) * 144) + 738))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 172))], placeholder_shared[(((((int)threadIdx.z) * 144) + 18))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 172))], placeholder_shared[(((((int)threadIdx.z) * 144) + 738))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 171))], placeholder_shared[(((((int)threadIdx.z) * 144) + 19))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 171))], placeholder_shared[(((((int)threadIdx.z) * 144) + 739))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 173))], placeholder_shared[(((((int)threadIdx.z) * 144) + 19))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 173))], placeholder_shared[(((((int)threadIdx.z) * 144) + 739))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 172))], placeholder_shared[(((((int)threadIdx.z) * 144) + 20))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 172))], placeholder_shared[(((((int)threadIdx.z) * 144) + 740))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 174))], placeholder_shared[(((((int)threadIdx.z) * 144) + 20))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 174))], placeholder_shared[(((((int)threadIdx.z) * 144) + 740))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 187))], placeholder_shared[(((((int)threadIdx.z) * 144) + 21))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 187))], placeholder_shared[(((((int)threadIdx.z) * 144) + 741))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 189))], placeholder_shared[(((((int)threadIdx.z) * 144) + 21))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 189))], placeholder_shared[(((((int)threadIdx.z) * 144) + 741))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 188))], placeholder_shared[(((((int)threadIdx.z) * 144) + 22))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 188))], placeholder_shared[(((((int)threadIdx.z) * 144) + 742))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 190))], placeholder_shared[(((((int)threadIdx.z) * 144) + 22))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 190))], placeholder_shared[(((((int)threadIdx.z) * 144) + 742))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 189))], placeholder_shared[(((((int)threadIdx.z) * 144) + 23))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 189))], placeholder_shared[(((((int)threadIdx.z) * 144) + 743))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 191))], placeholder_shared[(((((int)threadIdx.z) * 144) + 23))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 191))], placeholder_shared[(((((int)threadIdx.z) * 144) + 743))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 204))], placeholder_shared[(((((int)threadIdx.z) * 144) + 24))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 204))], placeholder_shared[(((((int)threadIdx.z) * 144) + 744))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 206))], placeholder_shared[(((((int)threadIdx.z) * 144) + 24))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 206))], placeholder_shared[(((((int)threadIdx.z) * 144) + 744))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 205))], placeholder_shared[(((((int)threadIdx.z) * 144) + 25))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 205))], placeholder_shared[(((((int)threadIdx.z) * 144) + 745))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 207))], placeholder_shared[(((((int)threadIdx.z) * 144) + 25))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 207))], placeholder_shared[(((((int)threadIdx.z) * 144) + 745))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 206))], placeholder_shared[(((((int)threadIdx.z) * 144) + 26))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 206))], placeholder_shared[(((((int)threadIdx.z) * 144) + 746))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 144) + 26))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 144) + 746))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 255))], placeholder_shared[(((((int)threadIdx.z) * 144) + 27))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 255))], placeholder_shared[(((((int)threadIdx.z) * 144) + 747))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 257))], placeholder_shared[(((((int)threadIdx.z) * 144) + 27))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 257))], placeholder_shared[(((((int)threadIdx.z) * 144) + 747))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 144) + 28))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 144) + 748))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 258))], placeholder_shared[(((((int)threadIdx.z) * 144) + 28))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 258))], placeholder_shared[(((((int)threadIdx.z) * 144) + 748))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 257))], placeholder_shared[(((((int)threadIdx.z) * 144) + 29))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 257))], placeholder_shared[(((((int)threadIdx.z) * 144) + 749))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 259))], placeholder_shared[(((((int)threadIdx.z) * 144) + 29))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 259))], placeholder_shared[(((((int)threadIdx.z) * 144) + 749))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 144) + 30))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 144) + 750))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 274))], placeholder_shared[(((((int)threadIdx.z) * 144) + 30))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 274))], placeholder_shared[(((((int)threadIdx.z) * 144) + 750))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 273))], placeholder_shared[(((((int)threadIdx.z) * 144) + 31))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 273))], placeholder_shared[(((((int)threadIdx.z) * 144) + 751))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 275))], placeholder_shared[(((((int)threadIdx.z) * 144) + 31))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 275))], placeholder_shared[(((((int)threadIdx.z) * 144) + 751))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 274))], placeholder_shared[(((((int)threadIdx.z) * 144) + 32))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 274))], placeholder_shared[(((((int)threadIdx.z) * 144) + 752))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 276))], placeholder_shared[(((((int)threadIdx.z) * 144) + 32))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 276))], placeholder_shared[(((((int)threadIdx.z) * 144) + 752))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 289))], placeholder_shared[(((((int)threadIdx.z) * 144) + 33))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 289))], placeholder_shared[(((((int)threadIdx.z) * 144) + 753))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 291))], placeholder_shared[(((((int)threadIdx.z) * 144) + 33))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 291))], placeholder_shared[(((((int)threadIdx.z) * 144) + 753))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 290))], placeholder_shared[(((((int)threadIdx.z) * 144) + 34))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 290))], placeholder_shared[(((((int)threadIdx.z) * 144) + 754))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 292))], placeholder_shared[(((((int)threadIdx.z) * 144) + 34))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 292))], placeholder_shared[(((((int)threadIdx.z) * 144) + 754))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 291))], placeholder_shared[(((((int)threadIdx.z) * 144) + 35))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 291))], placeholder_shared[(((((int)threadIdx.z) * 144) + 755))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 293))], placeholder_shared[(((((int)threadIdx.z) * 144) + 35))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 293))], placeholder_shared[(((((int)threadIdx.z) * 144) + 755))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 340))], placeholder_shared[(((((int)threadIdx.z) * 144) + 36))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 340))], placeholder_shared[(((((int)threadIdx.z) * 144) + 756))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 342))], placeholder_shared[(((((int)threadIdx.z) * 144) + 36))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 342))], placeholder_shared[(((((int)threadIdx.z) * 144) + 756))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 341))], placeholder_shared[(((((int)threadIdx.z) * 144) + 37))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 341))], placeholder_shared[(((((int)threadIdx.z) * 144) + 757))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 343))], placeholder_shared[(((((int)threadIdx.z) * 144) + 37))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 343))], placeholder_shared[(((((int)threadIdx.z) * 144) + 757))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 342))], placeholder_shared[(((((int)threadIdx.z) * 144) + 38))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 342))], placeholder_shared[(((((int)threadIdx.z) * 144) + 758))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 344))], placeholder_shared[(((((int)threadIdx.z) * 144) + 38))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 344))], placeholder_shared[(((((int)threadIdx.z) * 144) + 758))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 357))], placeholder_shared[(((((int)threadIdx.z) * 144) + 39))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 357))], placeholder_shared[(((((int)threadIdx.z) * 144) + 759))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 359))], placeholder_shared[(((((int)threadIdx.z) * 144) + 39))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 359))], placeholder_shared[(((((int)threadIdx.z) * 144) + 759))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 358))], placeholder_shared[(((((int)threadIdx.z) * 144) + 40))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 358))], placeholder_shared[(((((int)threadIdx.z) * 144) + 760))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 360))], placeholder_shared[(((((int)threadIdx.z) * 144) + 40))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 360))], placeholder_shared[(((((int)threadIdx.z) * 144) + 760))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 359))], placeholder_shared[(((((int)threadIdx.z) * 144) + 41))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 359))], placeholder_shared[(((((int)threadIdx.z) * 144) + 761))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 361))], placeholder_shared[(((((int)threadIdx.z) * 144) + 41))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 361))], placeholder_shared[(((((int)threadIdx.z) * 144) + 761))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 374))], placeholder_shared[(((((int)threadIdx.z) * 144) + 42))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 374))], placeholder_shared[(((((int)threadIdx.z) * 144) + 762))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 376))], placeholder_shared[(((((int)threadIdx.z) * 144) + 42))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 376))], placeholder_shared[(((((int)threadIdx.z) * 144) + 762))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 375))], placeholder_shared[(((((int)threadIdx.z) * 144) + 43))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 375))], placeholder_shared[(((((int)threadIdx.z) * 144) + 763))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 377))], placeholder_shared[(((((int)threadIdx.z) * 144) + 43))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 377))], placeholder_shared[(((((int)threadIdx.z) * 144) + 763))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 376))], placeholder_shared[(((((int)threadIdx.z) * 144) + 44))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 376))], placeholder_shared[(((((int)threadIdx.z) * 144) + 764))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 378))], placeholder_shared[(((((int)threadIdx.z) * 144) + 44))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 378))], placeholder_shared[(((((int)threadIdx.z) * 144) + 764))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 425))], placeholder_shared[(((((int)threadIdx.z) * 144) + 45))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 425))], placeholder_shared[(((((int)threadIdx.z) * 144) + 765))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 427))], placeholder_shared[(((((int)threadIdx.z) * 144) + 45))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 427))], placeholder_shared[(((((int)threadIdx.z) * 144) + 765))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 426))], placeholder_shared[(((((int)threadIdx.z) * 144) + 46))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 426))], placeholder_shared[(((((int)threadIdx.z) * 144) + 766))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 428))], placeholder_shared[(((((int)threadIdx.z) * 144) + 46))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 428))], placeholder_shared[(((((int)threadIdx.z) * 144) + 766))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 427))], placeholder_shared[(((((int)threadIdx.z) * 144) + 47))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 427))], placeholder_shared[(((((int)threadIdx.z) * 144) + 767))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 429))], placeholder_shared[(((((int)threadIdx.z) * 144) + 47))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 429))], placeholder_shared[(((((int)threadIdx.z) * 144) + 767))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 442))], placeholder_shared[(((((int)threadIdx.z) * 144) + 48))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 442))], placeholder_shared[(((((int)threadIdx.z) * 144) + 768))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 444))], placeholder_shared[(((((int)threadIdx.z) * 144) + 48))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 444))], placeholder_shared[(((((int)threadIdx.z) * 144) + 768))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 443))], placeholder_shared[(((((int)threadIdx.z) * 144) + 49))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 443))], placeholder_shared[(((((int)threadIdx.z) * 144) + 769))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 445))], placeholder_shared[(((((int)threadIdx.z) * 144) + 49))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 445))], placeholder_shared[(((((int)threadIdx.z) * 144) + 769))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 444))], placeholder_shared[(((((int)threadIdx.z) * 144) + 50))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 444))], placeholder_shared[(((((int)threadIdx.z) * 144) + 770))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 446))], placeholder_shared[(((((int)threadIdx.z) * 144) + 50))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 446))], placeholder_shared[(((((int)threadIdx.z) * 144) + 770))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 459))], placeholder_shared[(((((int)threadIdx.z) * 144) + 51))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 459))], placeholder_shared[(((((int)threadIdx.z) * 144) + 771))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 461))], placeholder_shared[(((((int)threadIdx.z) * 144) + 51))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 461))], placeholder_shared[(((((int)threadIdx.z) * 144) + 771))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 460))], placeholder_shared[(((((int)threadIdx.z) * 144) + 52))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 460))], placeholder_shared[(((((int)threadIdx.z) * 144) + 772))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 462))], placeholder_shared[(((((int)threadIdx.z) * 144) + 52))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 462))], placeholder_shared[(((((int)threadIdx.z) * 144) + 772))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 461))], placeholder_shared[(((((int)threadIdx.z) * 144) + 53))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 461))], placeholder_shared[(((((int)threadIdx.z) * 144) + 773))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 463))], placeholder_shared[(((((int)threadIdx.z) * 144) + 53))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 463))], placeholder_shared[(((((int)threadIdx.z) * 144) + 773))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 510))], placeholder_shared[(((((int)threadIdx.z) * 144) + 54))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 510))], placeholder_shared[(((((int)threadIdx.z) * 144) + 774))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 144) + 54))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 144) + 774))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 511))], placeholder_shared[(((((int)threadIdx.z) * 144) + 55))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 511))], placeholder_shared[(((((int)threadIdx.z) * 144) + 775))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 513))], placeholder_shared[(((((int)threadIdx.z) * 144) + 55))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 513))], placeholder_shared[(((((int)threadIdx.z) * 144) + 775))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 144) + 56))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 144) + 776))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 514))], placeholder_shared[(((((int)threadIdx.z) * 144) + 56))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 514))], placeholder_shared[(((((int)threadIdx.z) * 144) + 776))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 527))], placeholder_shared[(((((int)threadIdx.z) * 144) + 57))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 527))], placeholder_shared[(((((int)threadIdx.z) * 144) + 777))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 144) + 57))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 144) + 777))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 144) + 58))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 144) + 778))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 530))], placeholder_shared[(((((int)threadIdx.z) * 144) + 58))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 530))], placeholder_shared[(((((int)threadIdx.z) * 144) + 778))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 144) + 59))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 529))], placeholder_shared[(((((int)threadIdx.z) * 144) + 779))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 531))], placeholder_shared[(((((int)threadIdx.z) * 144) + 59))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 531))], placeholder_shared[(((((int)threadIdx.z) * 144) + 779))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 144) + 60))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 144) + 780))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 546))], placeholder_shared[(((((int)threadIdx.z) * 144) + 60))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 546))], placeholder_shared[(((((int)threadIdx.z) * 144) + 780))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 545))], placeholder_shared[(((((int)threadIdx.z) * 144) + 61))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 545))], placeholder_shared[(((((int)threadIdx.z) * 144) + 781))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 547))], placeholder_shared[(((((int)threadIdx.z) * 144) + 61))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 547))], placeholder_shared[(((((int)threadIdx.z) * 144) + 781))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 546))], placeholder_shared[(((((int)threadIdx.z) * 144) + 62))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 546))], placeholder_shared[(((((int)threadIdx.z) * 144) + 782))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 548))], placeholder_shared[(((((int)threadIdx.z) * 144) + 62))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 548))], placeholder_shared[(((((int)threadIdx.z) * 144) + 782))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 595))], placeholder_shared[(((((int)threadIdx.z) * 144) + 63))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 595))], placeholder_shared[(((((int)threadIdx.z) * 144) + 783))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 597))], placeholder_shared[(((((int)threadIdx.z) * 144) + 63))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 597))], placeholder_shared[(((((int)threadIdx.z) * 144) + 783))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 596))], placeholder_shared[(((((int)threadIdx.z) * 144) + 64))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 596))], placeholder_shared[(((((int)threadIdx.z) * 144) + 784))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 598))], placeholder_shared[(((((int)threadIdx.z) * 144) + 64))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 598))], placeholder_shared[(((((int)threadIdx.z) * 144) + 784))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 597))], placeholder_shared[(((((int)threadIdx.z) * 144) + 65))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 597))], placeholder_shared[(((((int)threadIdx.z) * 144) + 785))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 599))], placeholder_shared[(((((int)threadIdx.z) * 144) + 65))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 599))], placeholder_shared[(((((int)threadIdx.z) * 144) + 785))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 612))], placeholder_shared[(((((int)threadIdx.z) * 144) + 66))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 612))], placeholder_shared[(((((int)threadIdx.z) * 144) + 786))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 614))], placeholder_shared[(((((int)threadIdx.z) * 144) + 66))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 614))], placeholder_shared[(((((int)threadIdx.z) * 144) + 786))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 613))], placeholder_shared[(((((int)threadIdx.z) * 144) + 67))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 613))], placeholder_shared[(((((int)threadIdx.z) * 144) + 787))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 615))], placeholder_shared[(((((int)threadIdx.z) * 144) + 67))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 615))], placeholder_shared[(((((int)threadIdx.z) * 144) + 787))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 614))], placeholder_shared[(((((int)threadIdx.z) * 144) + 68))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 614))], placeholder_shared[(((((int)threadIdx.z) * 144) + 788))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 616))], placeholder_shared[(((((int)threadIdx.z) * 144) + 68))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 616))], placeholder_shared[(((((int)threadIdx.z) * 144) + 788))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 629))], placeholder_shared[(((((int)threadIdx.z) * 144) + 69))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 629))], placeholder_shared[(((((int)threadIdx.z) * 144) + 789))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 631))], placeholder_shared[(((((int)threadIdx.z) * 144) + 69))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 631))], placeholder_shared[(((((int)threadIdx.z) * 144) + 789))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 630))], placeholder_shared[(((((int)threadIdx.z) * 144) + 70))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 630))], placeholder_shared[(((((int)threadIdx.z) * 144) + 790))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 632))], placeholder_shared[(((((int)threadIdx.z) * 144) + 70))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 632))], placeholder_shared[(((((int)threadIdx.z) * 144) + 790))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 631))], placeholder_shared[(((((int)threadIdx.z) * 144) + 71))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 631))], placeholder_shared[(((((int)threadIdx.z) * 144) + 791))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 633))], placeholder_shared[(((((int)threadIdx.z) * 144) + 71))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 633))], placeholder_shared[(((((int)threadIdx.z) * 144) + 791))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 680))], placeholder_shared[(((((int)threadIdx.z) * 144) + 72))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 680))], placeholder_shared[(((((int)threadIdx.z) * 144) + 792))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 682))], placeholder_shared[(((((int)threadIdx.z) * 144) + 72))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 682))], placeholder_shared[(((((int)threadIdx.z) * 144) + 792))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 681))], placeholder_shared[(((((int)threadIdx.z) * 144) + 73))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 681))], placeholder_shared[(((((int)threadIdx.z) * 144) + 793))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 683))], placeholder_shared[(((((int)threadIdx.z) * 144) + 73))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 683))], placeholder_shared[(((((int)threadIdx.z) * 144) + 793))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 682))], placeholder_shared[(((((int)threadIdx.z) * 144) + 74))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 682))], placeholder_shared[(((((int)threadIdx.z) * 144) + 794))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 684))], placeholder_shared[(((((int)threadIdx.z) * 144) + 74))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 684))], placeholder_shared[(((((int)threadIdx.z) * 144) + 794))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 697))], placeholder_shared[(((((int)threadIdx.z) * 144) + 75))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 697))], placeholder_shared[(((((int)threadIdx.z) * 144) + 795))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 699))], placeholder_shared[(((((int)threadIdx.z) * 144) + 75))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 699))], placeholder_shared[(((((int)threadIdx.z) * 144) + 795))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 698))], placeholder_shared[(((((int)threadIdx.z) * 144) + 76))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 698))], placeholder_shared[(((((int)threadIdx.z) * 144) + 796))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 700))], placeholder_shared[(((((int)threadIdx.z) * 144) + 76))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 700))], placeholder_shared[(((((int)threadIdx.z) * 144) + 796))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 699))], placeholder_shared[(((((int)threadIdx.z) * 144) + 77))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 699))], placeholder_shared[(((((int)threadIdx.z) * 144) + 797))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 701))], placeholder_shared[(((((int)threadIdx.z) * 144) + 77))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 701))], placeholder_shared[(((((int)threadIdx.z) * 144) + 797))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 714))], placeholder_shared[(((((int)threadIdx.z) * 144) + 78))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 714))], placeholder_shared[(((((int)threadIdx.z) * 144) + 798))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 716))], placeholder_shared[(((((int)threadIdx.z) * 144) + 78))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 716))], placeholder_shared[(((((int)threadIdx.z) * 144) + 798))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 715))], placeholder_shared[(((((int)threadIdx.z) * 144) + 79))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 715))], placeholder_shared[(((((int)threadIdx.z) * 144) + 799))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 717))], placeholder_shared[(((((int)threadIdx.z) * 144) + 79))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 717))], placeholder_shared[(((((int)threadIdx.z) * 144) + 799))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 716))], placeholder_shared[(((((int)threadIdx.z) * 144) + 80))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 716))], placeholder_shared[(((((int)threadIdx.z) * 144) + 800))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 718))], placeholder_shared[(((((int)threadIdx.z) * 144) + 80))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 718))], placeholder_shared[(((((int)threadIdx.z) * 144) + 800))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 765))], placeholder_shared[(((((int)threadIdx.z) * 144) + 81))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 765))], placeholder_shared[(((((int)threadIdx.z) * 144) + 801))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 767))], placeholder_shared[(((((int)threadIdx.z) * 144) + 81))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 767))], placeholder_shared[(((((int)threadIdx.z) * 144) + 801))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 766))], placeholder_shared[(((((int)threadIdx.z) * 144) + 82))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 766))], placeholder_shared[(((((int)threadIdx.z) * 144) + 802))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 144) + 82))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 144) + 802))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 767))], placeholder_shared[(((((int)threadIdx.z) * 144) + 83))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 767))], placeholder_shared[(((((int)threadIdx.z) * 144) + 803))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 769))], placeholder_shared[(((((int)threadIdx.z) * 144) + 83))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 769))], placeholder_shared[(((((int)threadIdx.z) * 144) + 803))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 782))], placeholder_shared[(((((int)threadIdx.z) * 144) + 84))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 782))], placeholder_shared[(((((int)threadIdx.z) * 144) + 804))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 144) + 84))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 144) + 804))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 783))], placeholder_shared[(((((int)threadIdx.z) * 144) + 85))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 783))], placeholder_shared[(((((int)threadIdx.z) * 144) + 805))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 785))], placeholder_shared[(((((int)threadIdx.z) * 144) + 85))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 785))], placeholder_shared[(((((int)threadIdx.z) * 144) + 805))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 144) + 86))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 144) + 806))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 786))], placeholder_shared[(((((int)threadIdx.z) * 144) + 86))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 786))], placeholder_shared[(((((int)threadIdx.z) * 144) + 806))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 799))], placeholder_shared[(((((int)threadIdx.z) * 144) + 87))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 799))], placeholder_shared[(((((int)threadIdx.z) * 144) + 807))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 801))], placeholder_shared[(((((int)threadIdx.z) * 144) + 87))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 801))], placeholder_shared[(((((int)threadIdx.z) * 144) + 807))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 144) + 88))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 144) + 808))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 802))], placeholder_shared[(((((int)threadIdx.z) * 144) + 88))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 802))], placeholder_shared[(((((int)threadIdx.z) * 144) + 808))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 801))], placeholder_shared[(((((int)threadIdx.z) * 144) + 89))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 801))], placeholder_shared[(((((int)threadIdx.z) * 144) + 809))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 803))], placeholder_shared[(((((int)threadIdx.z) * 144) + 89))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 803))], placeholder_shared[(((((int)threadIdx.z) * 144) + 809))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 850))], placeholder_shared[(((((int)threadIdx.z) * 144) + 90))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 850))], placeholder_shared[(((((int)threadIdx.z) * 144) + 810))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 852))], placeholder_shared[(((((int)threadIdx.z) * 144) + 90))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 852))], placeholder_shared[(((((int)threadIdx.z) * 144) + 810))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 851))], placeholder_shared[(((((int)threadIdx.z) * 144) + 91))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 851))], placeholder_shared[(((((int)threadIdx.z) * 144) + 811))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 853))], placeholder_shared[(((((int)threadIdx.z) * 144) + 91))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 853))], placeholder_shared[(((((int)threadIdx.z) * 144) + 811))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 852))], placeholder_shared[(((((int)threadIdx.z) * 144) + 92))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 852))], placeholder_shared[(((((int)threadIdx.z) * 144) + 812))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 854))], placeholder_shared[(((((int)threadIdx.z) * 144) + 92))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 854))], placeholder_shared[(((((int)threadIdx.z) * 144) + 812))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 867))], placeholder_shared[(((((int)threadIdx.z) * 144) + 93))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 867))], placeholder_shared[(((((int)threadIdx.z) * 144) + 813))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 869))], placeholder_shared[(((((int)threadIdx.z) * 144) + 93))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 869))], placeholder_shared[(((((int)threadIdx.z) * 144) + 813))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 868))], placeholder_shared[(((((int)threadIdx.z) * 144) + 94))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 868))], placeholder_shared[(((((int)threadIdx.z) * 144) + 814))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 870))], placeholder_shared[(((((int)threadIdx.z) * 144) + 94))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 870))], placeholder_shared[(((((int)threadIdx.z) * 144) + 814))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 869))], placeholder_shared[(((((int)threadIdx.z) * 144) + 95))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 869))], placeholder_shared[(((((int)threadIdx.z) * 144) + 815))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 871))], placeholder_shared[(((((int)threadIdx.z) * 144) + 95))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 871))], placeholder_shared[(((((int)threadIdx.z) * 144) + 815))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 884))], placeholder_shared[(((((int)threadIdx.z) * 144) + 96))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 884))], placeholder_shared[(((((int)threadIdx.z) * 144) + 816))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 886))], placeholder_shared[(((((int)threadIdx.z) * 144) + 96))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 886))], placeholder_shared[(((((int)threadIdx.z) * 144) + 816))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 885))], placeholder_shared[(((((int)threadIdx.z) * 144) + 97))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 885))], placeholder_shared[(((((int)threadIdx.z) * 144) + 817))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 887))], placeholder_shared[(((((int)threadIdx.z) * 144) + 97))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 887))], placeholder_shared[(((((int)threadIdx.z) * 144) + 817))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 886))], placeholder_shared[(((((int)threadIdx.z) * 144) + 98))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 886))], placeholder_shared[(((((int)threadIdx.z) * 144) + 818))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 888))], placeholder_shared[(((((int)threadIdx.z) * 144) + 98))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 888))], placeholder_shared[(((((int)threadIdx.z) * 144) + 818))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 935))], placeholder_shared[(((((int)threadIdx.z) * 144) + 99))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 935))], placeholder_shared[(((((int)threadIdx.z) * 144) + 819))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 937))], placeholder_shared[(((((int)threadIdx.z) * 144) + 99))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 937))], placeholder_shared[(((((int)threadIdx.z) * 144) + 819))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 936))], placeholder_shared[(((((int)threadIdx.z) * 144) + 100))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 936))], placeholder_shared[(((((int)threadIdx.z) * 144) + 820))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 938))], placeholder_shared[(((((int)threadIdx.z) * 144) + 100))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 938))], placeholder_shared[(((((int)threadIdx.z) * 144) + 820))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 937))], placeholder_shared[(((((int)threadIdx.z) * 144) + 101))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 937))], placeholder_shared[(((((int)threadIdx.z) * 144) + 821))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 939))], placeholder_shared[(((((int)threadIdx.z) * 144) + 101))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 939))], placeholder_shared[(((((int)threadIdx.z) * 144) + 821))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 952))], placeholder_shared[(((((int)threadIdx.z) * 144) + 102))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 952))], placeholder_shared[(((((int)threadIdx.z) * 144) + 822))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 954))], placeholder_shared[(((((int)threadIdx.z) * 144) + 102))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 954))], placeholder_shared[(((((int)threadIdx.z) * 144) + 822))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 953))], placeholder_shared[(((((int)threadIdx.z) * 144) + 103))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 953))], placeholder_shared[(((((int)threadIdx.z) * 144) + 823))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 955))], placeholder_shared[(((((int)threadIdx.z) * 144) + 103))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 955))], placeholder_shared[(((((int)threadIdx.z) * 144) + 823))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 954))], placeholder_shared[(((((int)threadIdx.z) * 144) + 104))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 954))], placeholder_shared[(((((int)threadIdx.z) * 144) + 824))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 956))], placeholder_shared[(((((int)threadIdx.z) * 144) + 104))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 956))], placeholder_shared[(((((int)threadIdx.z) * 144) + 824))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 969))], placeholder_shared[(((((int)threadIdx.z) * 144) + 105))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 969))], placeholder_shared[(((((int)threadIdx.z) * 144) + 825))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 971))], placeholder_shared[(((((int)threadIdx.z) * 144) + 105))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 971))], placeholder_shared[(((((int)threadIdx.z) * 144) + 825))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 970))], placeholder_shared[(((((int)threadIdx.z) * 144) + 106))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 970))], placeholder_shared[(((((int)threadIdx.z) * 144) + 826))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 972))], placeholder_shared[(((((int)threadIdx.z) * 144) + 106))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 972))], placeholder_shared[(((((int)threadIdx.z) * 144) + 826))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 971))], placeholder_shared[(((((int)threadIdx.z) * 144) + 107))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 971))], placeholder_shared[(((((int)threadIdx.z) * 144) + 827))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 973))], placeholder_shared[(((((int)threadIdx.z) * 144) + 107))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 973))], placeholder_shared[(((((int)threadIdx.z) * 144) + 827))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 144) + 108))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 144) + 828))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1022))], placeholder_shared[(((((int)threadIdx.z) * 144) + 108))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1022))], placeholder_shared[(((((int)threadIdx.z) * 144) + 828))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1021))], placeholder_shared[(((((int)threadIdx.z) * 144) + 109))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1021))], placeholder_shared[(((((int)threadIdx.z) * 144) + 829))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1023))], placeholder_shared[(((((int)threadIdx.z) * 144) + 109))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1023))], placeholder_shared[(((((int)threadIdx.z) * 144) + 829))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1022))], placeholder_shared[(((((int)threadIdx.z) * 144) + 110))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1022))], placeholder_shared[(((((int)threadIdx.z) * 144) + 830))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 144) + 110))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 144) + 830))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 144) + 111))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 144) + 831))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1039))], placeholder_shared[(((((int)threadIdx.z) * 144) + 111))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1039))], placeholder_shared[(((((int)threadIdx.z) * 144) + 831))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1038))], placeholder_shared[(((((int)threadIdx.z) * 144) + 112))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1038))], placeholder_shared[(((((int)threadIdx.z) * 144) + 832))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1040))], placeholder_shared[(((((int)threadIdx.z) * 144) + 112))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1040))], placeholder_shared[(((((int)threadIdx.z) * 144) + 832))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1039))], placeholder_shared[(((((int)threadIdx.z) * 144) + 113))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1039))], placeholder_shared[(((((int)threadIdx.z) * 144) + 833))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1041))], placeholder_shared[(((((int)threadIdx.z) * 144) + 113))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1041))], placeholder_shared[(((((int)threadIdx.z) * 144) + 833))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 144) + 114))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 144) + 834))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 144) + 114))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 144) + 834))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1055))], placeholder_shared[(((((int)threadIdx.z) * 144) + 115))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1055))], placeholder_shared[(((((int)threadIdx.z) * 144) + 835))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1057))], placeholder_shared[(((((int)threadIdx.z) * 144) + 115))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1057))], placeholder_shared[(((((int)threadIdx.z) * 144) + 835))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 144) + 116))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 144) + 836))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1058))], placeholder_shared[(((((int)threadIdx.z) * 144) + 116))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1058))], placeholder_shared[(((((int)threadIdx.z) * 144) + 836))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 144) + 117))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 144) + 837))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1107))], placeholder_shared[(((((int)threadIdx.z) * 144) + 117))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1107))], placeholder_shared[(((((int)threadIdx.z) * 144) + 837))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1106))], placeholder_shared[(((((int)threadIdx.z) * 144) + 118))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1106))], placeholder_shared[(((((int)threadIdx.z) * 144) + 838))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1108))], placeholder_shared[(((((int)threadIdx.z) * 144) + 118))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1108))], placeholder_shared[(((((int)threadIdx.z) * 144) + 838))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1107))], placeholder_shared[(((((int)threadIdx.z) * 144) + 119))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1107))], placeholder_shared[(((((int)threadIdx.z) * 144) + 839))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1109))], placeholder_shared[(((((int)threadIdx.z) * 144) + 119))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1109))], placeholder_shared[(((((int)threadIdx.z) * 144) + 839))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 144) + 120))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 144) + 840))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1124))], placeholder_shared[(((((int)threadIdx.z) * 144) + 120))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1124))], placeholder_shared[(((((int)threadIdx.z) * 144) + 840))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1123))], placeholder_shared[(((((int)threadIdx.z) * 144) + 121))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1123))], placeholder_shared[(((((int)threadIdx.z) * 144) + 841))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1125))], placeholder_shared[(((((int)threadIdx.z) * 144) + 121))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1125))], placeholder_shared[(((((int)threadIdx.z) * 144) + 841))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1124))], placeholder_shared[(((((int)threadIdx.z) * 144) + 122))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1124))], placeholder_shared[(((((int)threadIdx.z) * 144) + 842))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1126))], placeholder_shared[(((((int)threadIdx.z) * 144) + 122))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1126))], placeholder_shared[(((((int)threadIdx.z) * 144) + 842))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 144) + 123))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 144) + 843))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1141))], placeholder_shared[(((((int)threadIdx.z) * 144) + 123))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1141))], placeholder_shared[(((((int)threadIdx.z) * 144) + 843))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1140))], placeholder_shared[(((((int)threadIdx.z) * 144) + 124))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1140))], placeholder_shared[(((((int)threadIdx.z) * 144) + 844))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1142))], placeholder_shared[(((((int)threadIdx.z) * 144) + 124))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1142))], placeholder_shared[(((((int)threadIdx.z) * 144) + 844))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1141))], placeholder_shared[(((((int)threadIdx.z) * 144) + 125))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1141))], placeholder_shared[(((((int)threadIdx.z) * 144) + 845))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1143))], placeholder_shared[(((((int)threadIdx.z) * 144) + 125))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1143))], placeholder_shared[(((((int)threadIdx.z) * 144) + 845))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 144) + 126))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 144) + 846))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1192))], placeholder_shared[(((((int)threadIdx.z) * 144) + 126))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1192))], placeholder_shared[(((((int)threadIdx.z) * 144) + 846))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1191))], placeholder_shared[(((((int)threadIdx.z) * 144) + 127))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1191))], placeholder_shared[(((((int)threadIdx.z) * 144) + 847))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1193))], placeholder_shared[(((((int)threadIdx.z) * 144) + 127))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1193))], placeholder_shared[(((((int)threadIdx.z) * 144) + 847))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1192))], placeholder_shared[(((((int)threadIdx.z) * 144) + 128))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1192))], placeholder_shared[(((((int)threadIdx.z) * 144) + 848))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1194))], placeholder_shared[(((((int)threadIdx.z) * 144) + 128))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1194))], placeholder_shared[(((((int)threadIdx.z) * 144) + 848))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 144) + 129))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 144) + 849))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1209))], placeholder_shared[(((((int)threadIdx.z) * 144) + 129))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1209))], placeholder_shared[(((((int)threadIdx.z) * 144) + 849))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1208))], placeholder_shared[(((((int)threadIdx.z) * 144) + 130))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1208))], placeholder_shared[(((((int)threadIdx.z) * 144) + 850))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1210))], placeholder_shared[(((((int)threadIdx.z) * 144) + 130))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1210))], placeholder_shared[(((((int)threadIdx.z) * 144) + 850))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1209))], placeholder_shared[(((((int)threadIdx.z) * 144) + 131))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1209))], placeholder_shared[(((((int)threadIdx.z) * 144) + 851))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1211))], placeholder_shared[(((((int)threadIdx.z) * 144) + 131))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1211))], placeholder_shared[(((((int)threadIdx.z) * 144) + 851))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 144) + 132))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 144) + 852))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1226))], placeholder_shared[(((((int)threadIdx.z) * 144) + 132))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1226))], placeholder_shared[(((((int)threadIdx.z) * 144) + 852))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1225))], placeholder_shared[(((((int)threadIdx.z) * 144) + 133))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1225))], placeholder_shared[(((((int)threadIdx.z) * 144) + 853))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1227))], placeholder_shared[(((((int)threadIdx.z) * 144) + 133))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1227))], placeholder_shared[(((((int)threadIdx.z) * 144) + 853))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1226))], placeholder_shared[(((((int)threadIdx.z) * 144) + 134))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1226))], placeholder_shared[(((((int)threadIdx.z) * 144) + 854))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1228))], placeholder_shared[(((((int)threadIdx.z) * 144) + 134))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1228))], placeholder_shared[(((((int)threadIdx.z) * 144) + 854))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 144) + 135))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 144) + 855))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1277))], placeholder_shared[(((((int)threadIdx.z) * 144) + 135))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1277))], placeholder_shared[(((((int)threadIdx.z) * 144) + 855))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1276))], placeholder_shared[(((((int)threadIdx.z) * 144) + 136))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1276))], placeholder_shared[(((((int)threadIdx.z) * 144) + 856))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1278))], placeholder_shared[(((((int)threadIdx.z) * 144) + 136))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1278))], placeholder_shared[(((((int)threadIdx.z) * 144) + 856))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1277))], placeholder_shared[(((((int)threadIdx.z) * 144) + 137))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1277))], placeholder_shared[(((((int)threadIdx.z) * 144) + 857))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1279))], placeholder_shared[(((((int)threadIdx.z) * 144) + 137))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1279))], placeholder_shared[(((((int)threadIdx.z) * 144) + 857))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1292))], placeholder_shared[(((((int)threadIdx.z) * 144) + 138))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1292))], placeholder_shared[(((((int)threadIdx.z) * 144) + 858))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1294))], placeholder_shared[(((((int)threadIdx.z) * 144) + 138))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1294))], placeholder_shared[(((((int)threadIdx.z) * 144) + 858))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1293))], placeholder_shared[(((((int)threadIdx.z) * 144) + 139))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1293))], placeholder_shared[(((((int)threadIdx.z) * 144) + 859))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1295))], placeholder_shared[(((((int)threadIdx.z) * 144) + 139))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1295))], placeholder_shared[(((((int)threadIdx.z) * 144) + 859))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1294))], placeholder_shared[(((((int)threadIdx.z) * 144) + 140))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1294))], placeholder_shared[(((((int)threadIdx.z) * 144) + 860))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1296))], placeholder_shared[(((((int)threadIdx.z) * 144) + 140))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1296))], placeholder_shared[(((((int)threadIdx.z) * 144) + 860))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1309))], placeholder_shared[(((((int)threadIdx.z) * 144) + 141))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1309))], placeholder_shared[(((((int)threadIdx.z) * 144) + 861))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1311))], placeholder_shared[(((((int)threadIdx.z) * 144) + 141))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1311))], placeholder_shared[(((((int)threadIdx.z) * 144) + 861))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1310))], placeholder_shared[(((((int)threadIdx.z) * 144) + 142))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1310))], placeholder_shared[(((((int)threadIdx.z) * 144) + 862))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1312))], placeholder_shared[(((((int)threadIdx.z) * 144) + 142))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1312))], placeholder_shared[(((((int)threadIdx.z) * 144) + 862))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1311))], placeholder_shared[(((((int)threadIdx.z) * 144) + 143))], compute[(0)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1311))], placeholder_shared[(((((int)threadIdx.z) * 144) + 863))], compute[(2)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1313))], placeholder_shared[(((((int)threadIdx.z) * 144) + 143))], compute[(1)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 34) + (((int)threadIdx.x) * 4)) + 1313))], placeholder_shared[(((((int)threadIdx.z) * 144) + 863))], compute[(3)]);
  }
  T_relu[((((((((int)blockIdx.z) * 640) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 10) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[(((((((((int)blockIdx.z) * 640) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 320))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 10) + ((int)threadIdx.z)) + 5))]), 0.000000e+00f);
  T_relu[(((((((((int)blockIdx.z) * 640) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 1))] = max((compute[(1)] + placeholder2[(((((int)blockIdx.z) * 10) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[(((((((((int)blockIdx.z) * 640) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + 321))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 10) + ((int)threadIdx.z)) + 5))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_11_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[3];
  __shared__ float pad_temp_shared[1200];
  __shared__ float placeholder_shared[2304];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 4; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      pad_temp_shared[(((((((int)threadIdx.z) * 75) + (((int)threadIdx.y) * 15)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((((rc_outer * 58800) + (((int)threadIdx.z) * 3675)) + ((((((int)threadIdx.y) * 3) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) / 5) * 1225)) + (((int)blockIdx.y) * 175)) + ((((((int)threadIdx.y) * 3) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 5)) % 5) * 35)) + (((int)blockIdx.x) * 5)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 5)))];
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((((int)threadIdx.z) * 3) + ((((((int)threadIdx.y) * 29) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 48)) < 48) {
        if (((((((int)threadIdx.z) * 144) + (((int)threadIdx.y) * 29)) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 2304) {
          if ((((((int)threadIdx.y) * 29) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 144) {
            if (((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 29) {
              placeholder_shared[(((((((int)threadIdx.z) * 144) + (((int)threadIdx.y) * 29)) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((int)threadIdx.z) * 576) + (((((((int)threadIdx.y) * 29) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) / 48) * 192)) + (rc_outer * 48)) + ((((((int)threadIdx.y) * 29) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) % 48)))];
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 48; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 48) + rc_inner))], compute[(0)]);
      compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 48) + rc_inner) + 768))], compute[(1)]);
      compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 48) + rc_inner) + 1536))], compute[(2)]);
    }
  }
  T_relu[((((((((int)threadIdx.z) * 1225) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((int)threadIdx.z))]), 0.000000e+00f);
  T_relu[(((((((((int)threadIdx.z) * 1225) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)) + 19600))] = max((compute[(1)] + placeholder2[((((int)threadIdx.z) + 16))]), 0.000000e+00f);
  T_relu[(((((((((int)threadIdx.z) * 1225) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)) + 39200))] = max((compute[(2)] + placeholder2[((((int)threadIdx.z) + 32))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[24];
  __shared__ float placeholder_shared[768];
  __shared__ float data_pack_shared[384];
  bgemm_local[(0)] = 0.000000e+00f;
  bgemm_local[(8)] = 0.000000e+00f;
  bgemm_local[(16)] = 0.000000e+00f;
  bgemm_local[(1)] = 0.000000e+00f;
  bgemm_local[(9)] = 0.000000e+00f;
  bgemm_local[(17)] = 0.000000e+00f;
  bgemm_local[(2)] = 0.000000e+00f;
  bgemm_local[(10)] = 0.000000e+00f;
  bgemm_local[(18)] = 0.000000e+00f;
  bgemm_local[(3)] = 0.000000e+00f;
  bgemm_local[(11)] = 0.000000e+00f;
  bgemm_local[(19)] = 0.000000e+00f;
  bgemm_local[(4)] = 0.000000e+00f;
  bgemm_local[(12)] = 0.000000e+00f;
  bgemm_local[(20)] = 0.000000e+00f;
  bgemm_local[(5)] = 0.000000e+00f;
  bgemm_local[(13)] = 0.000000e+00f;
  bgemm_local[(21)] = 0.000000e+00f;
  bgemm_local[(6)] = 0.000000e+00f;
  bgemm_local[(14)] = 0.000000e+00f;
  bgemm_local[(22)] = 0.000000e+00f;
  bgemm_local[(7)] = 0.000000e+00f;
  bgemm_local[(15)] = 0.000000e+00f;
  bgemm_local[(23)] = 0.000000e+00f;
  for (int ci_outer = 0; ci_outer < 10; ++ci_outer) {
    __syncthreads();
    placeholder_shared[(((((int)threadIdx.y) * 16) + ((int)threadIdx.x)))] = placeholder[((((((((int)blockIdx.z) * 15360) + (ci_outer * 1536)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 96) * 192)) + (((int)blockIdx.y) * 96)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 96)))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 192))] = placeholder[(((((((((int)blockIdx.z) * 15360) + (ci_outer * 1536)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 96) * 192)) + (((int)blockIdx.y) * 96)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 96)) + 384))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 384))] = placeholder[(((((((((int)blockIdx.z) * 15360) + (ci_outer * 1536)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 96) * 192)) + (((int)blockIdx.y) * 96)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 96)) + 768))];
    placeholder_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 576))] = placeholder[(((((((((int)blockIdx.z) * 15360) + (ci_outer * 1536)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 96) * 192)) + (((int)blockIdx.y) * 96)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 96)) + 1152))];
    data_pack_shared[(((((int)threadIdx.y) * 16) + ((int)threadIdx.x)))] = data_pack[((((((((int)blockIdx.z) * 103680) + (ci_outer * 10368)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 48) * 1296)) + (((int)blockIdx.x) * 48)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 48)))];
    data_pack_shared[((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) + 192))] = data_pack[(((((((((int)blockIdx.z) * 103680) + (ci_outer * 10368)) + ((((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) / 48) * 1296)) + (((int)blockIdx.x) * 48)) + (((((int)threadIdx.y) * 16) + ((int)threadIdx.x)) % 48)) + 5184))];
    __syncthreads();
    for (int ci_inner = 0; ci_inner < 8; ++ci_inner) {
      bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((ci_inner * 96) + (((int)threadIdx.y) * 8)))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(0)]);
      bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((ci_inner * 96) + (((int)threadIdx.y) * 8)))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(8)]);
      bgemm_local[(16)] = __ocml_fma_f32(placeholder_shared[(((ci_inner * 96) + (((int)threadIdx.y) * 8)))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(16)]);
      bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 1))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(1)]);
      bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 1))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(9)]);
      bgemm_local[(17)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 1))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(17)]);
      bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 2))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(2)]);
      bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 2))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(10)]);
      bgemm_local[(18)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 2))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(18)]);
      bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 3))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(3)]);
      bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 3))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(11)]);
      bgemm_local[(19)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 3))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(19)]);
      bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 4))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(4)]);
      bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 4))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(12)]);
      bgemm_local[(20)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 4))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(20)]);
      bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 5))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(5)]);
      bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 5))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(13)]);
      bgemm_local[(21)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 5))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(21)]);
      bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 6))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(6)]);
      bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 6))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(14)]);
      bgemm_local[(22)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 6))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(22)]);
      bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 7))], data_pack_shared[(((ci_inner * 48) + ((int)threadIdx.x)))], bgemm_local[(7)]);
      bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 7))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 16))], bgemm_local[(15)]);
      bgemm_local[(23)] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 96) + (((int)threadIdx.y) * 8)) + 7))], data_pack_shared[((((ci_inner * 48) + ((int)threadIdx.x)) + 32))], bgemm_local[(23)]);
    }
  }
  bgemm[((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)))] = bgemm_local[(0)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 16))] = bgemm_local[(8)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 32))] = bgemm_local[(16)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 1296))] = bgemm_local[(1)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 1312))] = bgemm_local[(9)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 1328))] = bgemm_local[(17)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 2592))] = bgemm_local[(2)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 2608))] = bgemm_local[(10)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 2624))] = bgemm_local[(18)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 3888))] = bgemm_local[(3)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 3904))] = bgemm_local[(11)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 3920))] = bgemm_local[(19)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 5184))] = bgemm_local[(4)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 5200))] = bgemm_local[(12)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 5216))] = bgemm_local[(20)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 6480))] = bgemm_local[(5)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 6496))] = bgemm_local[(13)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 6512))] = bgemm_local[(21)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 7776))] = bgemm_local[(6)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 7792))] = bgemm_local[(14)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 7808))] = bgemm_local[(22)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 9072))] = bgemm_local[(7)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 9088))] = bgemm_local[(15)];
  bgemm[(((((((((int)blockIdx.z) * 248832) + (((int)blockIdx.y) * 124416)) + (((int)threadIdx.y) * 10368)) + (((int)blockIdx.x) * 48)) + ((int)threadIdx.x)) + 9104))] = bgemm_local[(23)];
}

__device__ void fused_nn_avg_pool2d_8_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      tensor1[(0)] = (tensor1[(0)] + (((((1 <= (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh)) && ((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh) < 36)) && (1 <= (dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)))) && ((dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)) < 36)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 35)) + ((int)threadIdx.x)) + dw) - 36))] : 0.000000e+00f));
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.111111e-01f);
}

__device__ void fused_nn_conv2d_add_nn_relu_21_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[1190];
  __shared__ float placeholder_shared[2240];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1190) {
      if (((int)threadIdx.x) < 13) {
        pad_temp_shared[(((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)))] = (((3 <= (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119) / 17) + ((int)blockIdx.y))) && ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) / 119) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1189) {
      if (((int)threadIdx.x) < 13) {
        pad_temp_shared[((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1))] = (((3 <= ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1188) {
      if (((int)threadIdx.x) < 12) {
        pad_temp_shared[((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2))] = (((3 <= ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.x) / 14) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + ((((int)threadIdx.x) * 5) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2240) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[(((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)))] = placeholder1[(((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 1) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 1) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2239) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 1))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 2) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 2) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2238) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 2))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 3) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 3) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2237) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 3))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 4) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 4) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2236) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 4))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 70))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 17))], placeholder_shared[(((((int)threadIdx.z) * 70) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 34))], placeholder_shared[(((((int)threadIdx.z) * 70) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 68))], placeholder_shared[(((((int)threadIdx.z) * 70) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 85))], placeholder_shared[(((((int)threadIdx.z) * 70) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 102))], placeholder_shared[(((((int)threadIdx.z) * 70) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 136))], placeholder_shared[(((((int)threadIdx.z) * 70) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 153))], placeholder_shared[(((((int)threadIdx.z) * 70) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 170))], placeholder_shared[(((((int)threadIdx.z) * 70) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 204))], placeholder_shared[(((((int)threadIdx.z) * 70) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 221))], placeholder_shared[(((((int)threadIdx.z) * 70) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 238))], placeholder_shared[(((((int)threadIdx.z) * 70) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 70) + 15))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 272))], placeholder_shared[(((((int)threadIdx.z) * 70) + 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 289))], placeholder_shared[(((((int)threadIdx.z) * 70) + 17))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 306))], placeholder_shared[(((((int)threadIdx.z) * 70) + 18))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 70) + 19))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 340))], placeholder_shared[(((((int)threadIdx.z) * 70) + 20))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 357))], placeholder_shared[(((((int)threadIdx.z) * 70) + 21))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 70) + 22))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 70) + 23))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 408))], placeholder_shared[(((((int)threadIdx.z) * 70) + 24))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 425))], placeholder_shared[(((((int)threadIdx.z) * 70) + 25))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 70) + 26))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 459))], placeholder_shared[(((((int)threadIdx.z) * 70) + 27))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 476))], placeholder_shared[(((((int)threadIdx.z) * 70) + 28))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 493))], placeholder_shared[(((((int)threadIdx.z) * 70) + 29))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 510))], placeholder_shared[(((((int)threadIdx.z) * 70) + 30))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 527))], placeholder_shared[(((((int)threadIdx.z) * 70) + 31))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 544))], placeholder_shared[(((((int)threadIdx.z) * 70) + 32))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 561))], placeholder_shared[(((((int)threadIdx.z) * 70) + 33))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 578))], placeholder_shared[(((((int)threadIdx.z) * 70) + 34))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 595))], placeholder_shared[(((((int)threadIdx.z) * 70) + 35))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 612))], placeholder_shared[(((((int)threadIdx.z) * 70) + 36))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 629))], placeholder_shared[(((((int)threadIdx.z) * 70) + 37))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 646))], placeholder_shared[(((((int)threadIdx.z) * 70) + 38))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 663))], placeholder_shared[(((((int)threadIdx.z) * 70) + 39))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 680))], placeholder_shared[(((((int)threadIdx.z) * 70) + 40))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 697))], placeholder_shared[(((((int)threadIdx.z) * 70) + 41))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 714))], placeholder_shared[(((((int)threadIdx.z) * 70) + 42))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 731))], placeholder_shared[(((((int)threadIdx.z) * 70) + 43))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 748))], placeholder_shared[(((((int)threadIdx.z) * 70) + 44))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 765))], placeholder_shared[(((((int)threadIdx.z) * 70) + 45))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 782))], placeholder_shared[(((((int)threadIdx.z) * 70) + 46))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 799))], placeholder_shared[(((((int)threadIdx.z) * 70) + 47))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 816))], placeholder_shared[(((((int)threadIdx.z) * 70) + 48))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 833))], placeholder_shared[(((((int)threadIdx.z) * 70) + 49))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 850))], placeholder_shared[(((((int)threadIdx.z) * 70) + 50))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 867))], placeholder_shared[(((((int)threadIdx.z) * 70) + 51))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 884))], placeholder_shared[(((((int)threadIdx.z) * 70) + 52))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 901))], placeholder_shared[(((((int)threadIdx.z) * 70) + 53))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 918))], placeholder_shared[(((((int)threadIdx.z) * 70) + 54))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 935))], placeholder_shared[(((((int)threadIdx.z) * 70) + 55))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 952))], placeholder_shared[(((((int)threadIdx.z) * 70) + 56))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 969))], placeholder_shared[(((((int)threadIdx.z) * 70) + 57))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 986))], placeholder_shared[(((((int)threadIdx.z) * 70) + 58))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1003))], placeholder_shared[(((((int)threadIdx.z) * 70) + 59))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 70) + 60))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 70) + 61))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 70) + 62))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1071))], placeholder_shared[(((((int)threadIdx.z) * 70) + 63))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 70) + 64))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 70) + 65))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 70) + 66))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 67))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1156))], placeholder_shared[(((((int)threadIdx.z) * 70) + 68))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 70) + 69))], compute[(0)]);
  }
  T_relu[(((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[16];
  float data_pack_local[16];
  for (int eps = 0; eps < 4; ++eps) {
    for (int nu = 0; nu < 4; ++nu) {
      d[(((eps * 4) + nu))] = placeholder[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 1296) * 5329) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 1296) / 36) * 146)) + (eps * 73)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 36) * 2)) + nu))];
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(2)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(1)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(8)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(10)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(9)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(11)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(4)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(6)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(5)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(6)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(9)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(14)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(14)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(13)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(14)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(15)]);
  for (int eps1 = 0; eps1 < 4; ++eps1) {
    for (int nu1 = 0; nu1 < 4; ++nu1) {
      data_pack[(((((eps1 * 414720) + (nu1 * 103680)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 4) + nu1))];
    }
  }
}

__device__ void fused_concatenate_6_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3, float* __restrict__ placeholder4, float* __restrict__ placeholder5){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((1856 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 118784))] : ((1472 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 94208))] : ((1088 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder2[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 69632))] : ((704 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder3[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 45056))] : ((320 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 1024) + (((int)blockIdx.x) * 4)) + (((int)threadIdx.x) >> 6))) ? placeholder4[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 20480))] : placeholder5[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))])))));
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_8_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[5];
  __shared__ float pad_temp_shared[292];
  __shared__ float placeholder_shared[80];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  compute[(4)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[(((((int)threadIdx.z) * 73) + ((int)threadIdx.x)))] = placeholder[(((((rc_outer * 21316) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)))];
    if (((((int)threadIdx.z) * 5) + (((int)threadIdx.x) >> 2)) < 20) {
      if (((((int)threadIdx.z) * 20) + ((int)threadIdx.x)) < 80) {
        if (((int)threadIdx.x) < 20) {
          placeholder_shared[(((((int)threadIdx.z) * 20) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 1280) + (((int)threadIdx.z) * 320)) + ((((int)threadIdx.x) >> 2) * 64)) + (rc_outer * 4)) + (((int)threadIdx.x) & 3)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 4; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 73) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 4) + rc_inner))], compute[(0)]);
      compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 73) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 4) + rc_inner) + 16))], compute[(1)]);
      compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 73) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 4) + rc_inner) + 32))], compute[(2)]);
      compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 73) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 4) + rc_inner) + 48))], compute[(3)]);
      compute[(4)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 73) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 4) + rc_inner) + 64))], compute[(4)]);
    }
  }
  T_relu[(((((((int)blockIdx.z) * 106580) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 20) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 106580) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)) + 21316))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 20) + ((int)threadIdx.z)) + 4))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 106580) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)) + 42632))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 20) + ((int)threadIdx.z)) + 8))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 106580) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)) + 63948))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 20) + ((int)threadIdx.z)) + 12))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 106580) + (((int)threadIdx.z) * 5329)) + (((int)blockIdx.y) * 73)) + ((int)threadIdx.x)) + 85264))] = max((compute[(4)] + placeholder2[((((((int)blockIdx.z) * 20) + ((int)threadIdx.z)) + 16))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel0_device(float* __restrict__ placeholder, float* __restrict__ data_pack){
  float d[16];
  float data_pack_local[16];
  for (int eps = 0; eps < 4; ++eps) {
    for (int nu = 0; nu < 4; ++nu) {
      d[(((eps * 4) + nu))] = (((((1 <= ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + eps)) && (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + eps) < 36)) && (1 <= (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + nu))) && ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + nu) < 36)) ? placeholder[((((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324) * 1225) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 70)) + (eps * 35)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2)) + nu) - 36))] : 0.000000e+00f);
    }
  }
  data_pack_local[(0)] = 0.000000e+00f;
  data_pack_local[(0)] = (data_pack_local[(0)] + d[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(2)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32(d[(8)], -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(0)] = __ocml_fma_f32((d[(10)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(0)]);
  data_pack_local[(1)] = 0.000000e+00f;
  data_pack_local[(1)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = (data_pack_local[(1)] + d[(2)]);
  data_pack_local[(1)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(1)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(1)]);
  data_pack_local[(2)] = 0.000000e+00f;
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(1)]);
  data_pack_local[(2)] = (data_pack_local[(2)] + d[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(2)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(2)]);
  data_pack_local[(3)] = 0.000000e+00f;
  data_pack_local[(3)] = __ocml_fma_f32(d[(1)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = (data_pack_local[(3)] + d[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32((d[(9)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(3)] = __ocml_fma_f32(d[(11)], -1.000000e+00f, data_pack_local[(3)]);
  data_pack_local[(4)] = 0.000000e+00f;
  data_pack_local[(4)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(4)] = (data_pack_local[(4)] + d[(8)]);
  data_pack_local[(4)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(4)]);
  data_pack_local[(5)] = 0.000000e+00f;
  data_pack_local[(5)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(5)]);
  data_pack_local[(5)] = (data_pack_local[(5)] + d[(10)]);
  data_pack_local[(6)] = 0.000000e+00f;
  data_pack_local[(6)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(6)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(9)]);
  data_pack_local[(6)] = (data_pack_local[(6)] + d[(10)]);
  data_pack_local[(7)] = 0.000000e+00f;
  data_pack_local[(7)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(7)]);
  data_pack_local[(7)] = (data_pack_local[(7)] + d[(11)]);
  data_pack_local[(8)] = 0.000000e+00f;
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(4)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(8)] = (data_pack_local[(8)] + d[(8)]);
  data_pack_local[(8)] = __ocml_fma_f32(d[(10)], -1.000000e+00f, data_pack_local[(8)]);
  data_pack_local[(9)] = 0.000000e+00f;
  data_pack_local[(9)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(6)]);
  data_pack_local[(9)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(9)]);
  data_pack_local[(9)] = (data_pack_local[(9)] + d[(10)]);
  data_pack_local[(10)] = 0.000000e+00f;
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(5)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(6)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(9)]);
  data_pack_local[(10)] = (data_pack_local[(10)] + d[(10)]);
  data_pack_local[(11)] = 0.000000e+00f;
  data_pack_local[(11)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(7)]);
  data_pack_local[(11)] = __ocml_fma_f32(d[(9)], -1.000000e+00f, data_pack_local[(11)]);
  data_pack_local[(11)] = (data_pack_local[(11)] + d[(11)]);
  data_pack_local[(12)] = 0.000000e+00f;
  data_pack_local[(12)] = __ocml_fma_f32(d[(4)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32((d[(6)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(12)] = (data_pack_local[(12)] + d[(12)]);
  data_pack_local[(12)] = __ocml_fma_f32(d[(14)], -1.000000e+00f, data_pack_local[(12)]);
  data_pack_local[(13)] = 0.000000e+00f;
  data_pack_local[(13)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(13)]);
  data_pack_local[(13)] = (data_pack_local[(13)] + d[(14)]);
  data_pack_local[(14)] = 0.000000e+00f;
  data_pack_local[(14)] = __ocml_fma_f32(d[(5)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = __ocml_fma_f32(d[(6)], -1.000000e+00f, data_pack_local[(14)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(13)]);
  data_pack_local[(14)] = (data_pack_local[(14)] + d[(14)]);
  data_pack_local[(15)] = 0.000000e+00f;
  data_pack_local[(15)] = __ocml_fma_f32((d[(5)] * -1.000000e+00f), -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(7)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = __ocml_fma_f32(d[(13)], -1.000000e+00f, data_pack_local[(15)]);
  data_pack_local[(15)] = (data_pack_local[(15)] + d[(15)]);
  for (int eps1 = 0; eps1 < 4; ++eps1) {
    for (int nu1 = 0; nu1 < 4; ++nu1) {
      data_pack[(((((eps1 * 82944) + (nu1 * 20736)) + (((int)blockIdx.x) * 128)) + ((int)threadIdx.x)))] = data_pack_local[(((eps1 * 4) + nu1))];
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_22_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[460];
  __shared__ float placeholder_shared[2240];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  compute[(2)] = 0.000000e+00f;
  compute[(3)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 8; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[(((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)))] = (((3 <= ((((int)threadIdx.x) * 7) % 23)) && (((((int)threadIdx.x) * 7) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + (((((int)threadIdx.x) * 7) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((int)threadIdx.x) * 7) % 23)) - 3))] : 0.000000e+00f);
    pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 1))] = (((3 <= (((((int)threadIdx.x) * 7) + 1) % 23)) && ((((((int)threadIdx.x) * 7) + 1) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 1) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 1) % 23)) - 3))] : 0.000000e+00f);
    pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 2))] = (((3 <= (((((int)threadIdx.x) * 7) + 2) % 23)) && ((((((int)threadIdx.x) * 7) + 2) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 2) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 2) % 23)) - 3))] : 0.000000e+00f);
    if (((((int)threadIdx.z) * 5) + (((((int)threadIdx.x) * 7) + 3) / 23)) < 20) {
      if (((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) < 457) {
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 3))] = (((3 <= (((((int)threadIdx.x) * 7) + 3) % 23)) && ((((((int)threadIdx.x) * 7) + 3) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 3) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 3) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    if (((((int)threadIdx.z) * 5) + (((((int)threadIdx.x) * 7) + 4) / 23)) < 20) {
      if (((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) < 456) {
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 4))] = (((3 <= (((((int)threadIdx.x) * 7) + 4) % 23)) && ((((((int)threadIdx.x) * 7) + 4) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 4) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 4) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    if (((((int)threadIdx.z) * 5) + (((((int)threadIdx.x) * 7) + 5) / 23)) < 20) {
      if (((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) < 455) {
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 5))] = (((3 <= (((((int)threadIdx.x) * 7) + 5) % 23)) && ((((((int)threadIdx.x) * 7) + 5) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 5) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 5) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    if (((((int)threadIdx.z) * 5) + (((((int)threadIdx.x) * 7) + 6) / 23)) < 20) {
      if (((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) < 454) {
        if (((int)threadIdx.x) < 16) {
          pad_temp_shared[((((((int)threadIdx.z) * 115) + (((int)threadIdx.x) * 7)) + 6))] = (((3 <= (((((int)threadIdx.x) * 7) + 6) % 23)) && ((((((int)threadIdx.x) * 7) + 6) % 23) < 20)) ? placeholder[(((((((rc_outer * 5780) + (((int)threadIdx.z) * 1445)) + ((((((int)threadIdx.x) * 7) + 6) / 23) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.x) * 7) + 6) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    placeholder_shared[(((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + (((((int)threadIdx.x) * 33) / 140) * 1120)) + (rc_outer * 140)) + ((((int)threadIdx.x) * 33) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 1) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 1) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 2) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 2) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 3) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 3) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 4) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 4) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 5))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 5) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 5) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 6))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 6) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 6) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 7))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 7) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 7) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 8))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 8) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 8) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 9))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 9) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 9) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 10))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 10) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 10) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 11))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 11) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 11) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 12))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 12) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 12) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 13))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 13) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 13) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 14))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 14) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 14) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 15))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 15) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 15) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 16))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 16) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 16) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 17))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 17) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 17) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 18))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 18) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 18) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 19))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 19) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 19) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 20))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 20) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 20) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 21))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 21) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 21) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 22))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 22) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 22) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 23))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 23) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 23) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 24))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 24) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 24) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 25))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 25) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 25) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 26))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 26) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 26) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 27))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 27) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 27) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 28))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 28) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 28) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 29))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 29) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 29) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 30))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 30) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 30) % 140)))];
    placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 31))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 31) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 31) % 140)))];
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.x) * 33) + 32) / 140)) < 16) {
      if (((((int)threadIdx.z) * 80) + (((((int)threadIdx.x) * 33) + 32) / 7)) < 320) {
        if (((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) < 2208) {
          if (((int)threadIdx.x) < 16) {
            placeholder_shared[((((((int)threadIdx.z) * 560) + (((int)threadIdx.x) * 33)) + 32))] = placeholder1[((((((((int)blockIdx.z) * 17920) + (((int)threadIdx.z) * 4480)) + ((((((int)threadIdx.x) * 33) + 32) / 140) * 1120)) + (rc_outer * 140)) + (((((int)threadIdx.x) * 33) + 32) % 140)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 140))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 140) + 560))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1120))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1680))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 140) + 561))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1121))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1681))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 140) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 140) + 562))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1122))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 2))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1682))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 140) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 140) + 563))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1123))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 3))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1683))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 140) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 140) + 564))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1124))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 4))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1684))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 140) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 140) + 565))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1125))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 5))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1685))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 140) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 140) + 566))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1126))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 6))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1686))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 140) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 140) + 567))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1127))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 23))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1687))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 140) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 140) + 568))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1128))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 24))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1688))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 140) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 140) + 569))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1129))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 25))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1689))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 140) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 140) + 570))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1130))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 26))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1690))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 140) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 140) + 571))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1131))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 27))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1691))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 140) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 140) + 572))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1132))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 28))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1692))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 140) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 140) + 573))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1133))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 29))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1693))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 140) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 140) + 574))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1134))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 46))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1694))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 140) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 140) + 575))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1135))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 47))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1695))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 140) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 140) + 576))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1136))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 48))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1696))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 140) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 140) + 577))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1137))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 49))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1697))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 140) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 140) + 578))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1138))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 50))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1698))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 140) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 140) + 579))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1139))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1699))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 140) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 140) + 580))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1140))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 52))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1700))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 140) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 140) + 581))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1141))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 69))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1701))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 140) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 140) + 582))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1142))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 70))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1702))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 140) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 140) + 583))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1143))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 71))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1703))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 140) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 140) + 584))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1144))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 72))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1704))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 140) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 140) + 585))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1145))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 73))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1705))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 140) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 140) + 586))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1146))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 74))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1706))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 140) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 140) + 587))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1147))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 75))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1707))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 140) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 140) + 588))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1148))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 92))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1708))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 140) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 140) + 589))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1149))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 93))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1709))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 140) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 140) + 590))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1150))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 94))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1710))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 140) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 140) + 591))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1151))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 95))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1711))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 140) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 140) + 592))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1152))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 96))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1712))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 140) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 140) + 593))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1153))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 97))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1713))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 140) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 140) + 594))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1154))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 98))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1714))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 140) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 140) + 595))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1155))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 115))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1715))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 140) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 140) + 596))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1156))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 116))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1716))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 140) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 140) + 597))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1157))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 117))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1717))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 140) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 140) + 598))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1158))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 118))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1718))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 140) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 140) + 599))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1159))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1719))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 140) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 140) + 600))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1160))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 120))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1720))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 140) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 140) + 601))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1161))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 121))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1721))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 140) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 140) + 602))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1162))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 138))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1722))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 140) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 140) + 603))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1163))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 139))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1723))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 140) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 140) + 604))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1164))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 140))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1724))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 140) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 140) + 605))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1165))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 141))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1725))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 140) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 140) + 606))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1166))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 142))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1726))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 140) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 140) + 607))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1167))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 143))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1727))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 140) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 140) + 608))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1168))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 144))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1728))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 140) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 140) + 609))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1169))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 161))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1729))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 140) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 140) + 610))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1170))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 162))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1730))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 140) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 140) + 611))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1171))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 163))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1731))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 140) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 140) + 612))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1172))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 164))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1732))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 140) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 140) + 613))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1173))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 165))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1733))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 140) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 140) + 614))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1174))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 166))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1734))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 140) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 140) + 615))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1175))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 167))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1735))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 140) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 140) + 616))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1176))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 184))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1736))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 140) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 140) + 617))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1177))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 185))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1737))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 140) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 140) + 618))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1178))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 186))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1738))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 140) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 140) + 619))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1179))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1739))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 140) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 140) + 620))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1180))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 188))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1740))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 140) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 140) + 621))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1181))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 189))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1741))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 140) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 140) + 622))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1182))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 190))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1742))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 140) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 140) + 623))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1183))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 207))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1743))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 140) + 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 140) + 624))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1184))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 208))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1744))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 140) + 65))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 140) + 625))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1185))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 209))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1745))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 140) + 66))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 140) + 626))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1186))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 210))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1746))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 140) + 67))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 140) + 627))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1187))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 211))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1747))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 140) + 68))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 140) + 628))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1188))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 212))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1748))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 140) + 69))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 140) + 629))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1189))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 213))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1749))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 230))], placeholder_shared[(((((int)threadIdx.z) * 140) + 70))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 230))], placeholder_shared[(((((int)threadIdx.z) * 140) + 630))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 230))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1190))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 230))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1750))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 231))], placeholder_shared[(((((int)threadIdx.z) * 140) + 71))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 231))], placeholder_shared[(((((int)threadIdx.z) * 140) + 631))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 231))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1191))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 231))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1751))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 232))], placeholder_shared[(((((int)threadIdx.z) * 140) + 72))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 232))], placeholder_shared[(((((int)threadIdx.z) * 140) + 632))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 232))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1192))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 232))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1752))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 233))], placeholder_shared[(((((int)threadIdx.z) * 140) + 73))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 233))], placeholder_shared[(((((int)threadIdx.z) * 140) + 633))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 233))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1193))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 233))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1753))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 234))], placeholder_shared[(((((int)threadIdx.z) * 140) + 74))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 234))], placeholder_shared[(((((int)threadIdx.z) * 140) + 634))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 234))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1194))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 234))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1754))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 235))], placeholder_shared[(((((int)threadIdx.z) * 140) + 75))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 235))], placeholder_shared[(((((int)threadIdx.z) * 140) + 635))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 235))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1195))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 235))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1755))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 236))], placeholder_shared[(((((int)threadIdx.z) * 140) + 76))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 236))], placeholder_shared[(((((int)threadIdx.z) * 140) + 636))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 236))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1196))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 236))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1756))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 253))], placeholder_shared[(((((int)threadIdx.z) * 140) + 77))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 253))], placeholder_shared[(((((int)threadIdx.z) * 140) + 637))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 253))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1197))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 253))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1757))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 254))], placeholder_shared[(((((int)threadIdx.z) * 140) + 78))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 254))], placeholder_shared[(((((int)threadIdx.z) * 140) + 638))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 254))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1198))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 254))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1758))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 140) + 79))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 140) + 639))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1199))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1759))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 256))], placeholder_shared[(((((int)threadIdx.z) * 140) + 80))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 256))], placeholder_shared[(((((int)threadIdx.z) * 140) + 640))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 256))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1200))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 256))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1760))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 257))], placeholder_shared[(((((int)threadIdx.z) * 140) + 81))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 257))], placeholder_shared[(((((int)threadIdx.z) * 140) + 641))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 257))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1201))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 257))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1761))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 258))], placeholder_shared[(((((int)threadIdx.z) * 140) + 82))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 258))], placeholder_shared[(((((int)threadIdx.z) * 140) + 642))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 258))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1202))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 258))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1762))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 259))], placeholder_shared[(((((int)threadIdx.z) * 140) + 83))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 259))], placeholder_shared[(((((int)threadIdx.z) * 140) + 643))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 259))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1203))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 259))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1763))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 276))], placeholder_shared[(((((int)threadIdx.z) * 140) + 84))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 276))], placeholder_shared[(((((int)threadIdx.z) * 140) + 644))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 276))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1204))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 276))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1764))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 277))], placeholder_shared[(((((int)threadIdx.z) * 140) + 85))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 277))], placeholder_shared[(((((int)threadIdx.z) * 140) + 645))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 277))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1205))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 277))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1765))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 278))], placeholder_shared[(((((int)threadIdx.z) * 140) + 86))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 278))], placeholder_shared[(((((int)threadIdx.z) * 140) + 646))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 278))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1206))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 278))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1766))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 279))], placeholder_shared[(((((int)threadIdx.z) * 140) + 87))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 279))], placeholder_shared[(((((int)threadIdx.z) * 140) + 647))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 279))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1207))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 279))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1767))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 280))], placeholder_shared[(((((int)threadIdx.z) * 140) + 88))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 280))], placeholder_shared[(((((int)threadIdx.z) * 140) + 648))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 280))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1208))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 280))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1768))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 281))], placeholder_shared[(((((int)threadIdx.z) * 140) + 89))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 281))], placeholder_shared[(((((int)threadIdx.z) * 140) + 649))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 281))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1209))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 281))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1769))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 282))], placeholder_shared[(((((int)threadIdx.z) * 140) + 90))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 282))], placeholder_shared[(((((int)threadIdx.z) * 140) + 650))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 282))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1210))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 282))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1770))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 299))], placeholder_shared[(((((int)threadIdx.z) * 140) + 91))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 299))], placeholder_shared[(((((int)threadIdx.z) * 140) + 651))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 299))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1211))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 299))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1771))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 300))], placeholder_shared[(((((int)threadIdx.z) * 140) + 92))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 300))], placeholder_shared[(((((int)threadIdx.z) * 140) + 652))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 300))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1212))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 300))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1772))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 301))], placeholder_shared[(((((int)threadIdx.z) * 140) + 93))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 301))], placeholder_shared[(((((int)threadIdx.z) * 140) + 653))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 301))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1213))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 301))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1773))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 302))], placeholder_shared[(((((int)threadIdx.z) * 140) + 94))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 302))], placeholder_shared[(((((int)threadIdx.z) * 140) + 654))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 302))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1214))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 302))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1774))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 303))], placeholder_shared[(((((int)threadIdx.z) * 140) + 95))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 303))], placeholder_shared[(((((int)threadIdx.z) * 140) + 655))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 303))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1215))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 303))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1775))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 304))], placeholder_shared[(((((int)threadIdx.z) * 140) + 96))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 304))], placeholder_shared[(((((int)threadIdx.z) * 140) + 656))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 304))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1216))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 304))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1776))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 305))], placeholder_shared[(((((int)threadIdx.z) * 140) + 97))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 305))], placeholder_shared[(((((int)threadIdx.z) * 140) + 657))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 305))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1217))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 305))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1777))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 322))], placeholder_shared[(((((int)threadIdx.z) * 140) + 98))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 322))], placeholder_shared[(((((int)threadIdx.z) * 140) + 658))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 322))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1218))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 322))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1778))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 140) + 99))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 140) + 659))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1219))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1779))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 324))], placeholder_shared[(((((int)threadIdx.z) * 140) + 100))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 324))], placeholder_shared[(((((int)threadIdx.z) * 140) + 660))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 324))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1220))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 324))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1780))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 325))], placeholder_shared[(((((int)threadIdx.z) * 140) + 101))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 325))], placeholder_shared[(((((int)threadIdx.z) * 140) + 661))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 325))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1221))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 325))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1781))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 326))], placeholder_shared[(((((int)threadIdx.z) * 140) + 102))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 326))], placeholder_shared[(((((int)threadIdx.z) * 140) + 662))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 326))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1222))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 326))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1782))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 327))], placeholder_shared[(((((int)threadIdx.z) * 140) + 103))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 327))], placeholder_shared[(((((int)threadIdx.z) * 140) + 663))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 327))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1223))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 327))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1783))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 328))], placeholder_shared[(((((int)threadIdx.z) * 140) + 104))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 328))], placeholder_shared[(((((int)threadIdx.z) * 140) + 664))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 328))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1224))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 328))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1784))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 345))], placeholder_shared[(((((int)threadIdx.z) * 140) + 105))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 345))], placeholder_shared[(((((int)threadIdx.z) * 140) + 665))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 345))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1225))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 345))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1785))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 346))], placeholder_shared[(((((int)threadIdx.z) * 140) + 106))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 346))], placeholder_shared[(((((int)threadIdx.z) * 140) + 666))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 346))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1226))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 346))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1786))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 347))], placeholder_shared[(((((int)threadIdx.z) * 140) + 107))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 347))], placeholder_shared[(((((int)threadIdx.z) * 140) + 667))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 347))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1227))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 347))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1787))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 348))], placeholder_shared[(((((int)threadIdx.z) * 140) + 108))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 348))], placeholder_shared[(((((int)threadIdx.z) * 140) + 668))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 348))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1228))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 348))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1788))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 349))], placeholder_shared[(((((int)threadIdx.z) * 140) + 109))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 349))], placeholder_shared[(((((int)threadIdx.z) * 140) + 669))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 349))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1229))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 349))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1789))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 350))], placeholder_shared[(((((int)threadIdx.z) * 140) + 110))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 350))], placeholder_shared[(((((int)threadIdx.z) * 140) + 670))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 350))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1230))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 350))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1790))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 351))], placeholder_shared[(((((int)threadIdx.z) * 140) + 111))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 351))], placeholder_shared[(((((int)threadIdx.z) * 140) + 671))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 351))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1231))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 351))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1791))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 368))], placeholder_shared[(((((int)threadIdx.z) * 140) + 112))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 368))], placeholder_shared[(((((int)threadIdx.z) * 140) + 672))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 368))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1232))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 368))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1792))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 369))], placeholder_shared[(((((int)threadIdx.z) * 140) + 113))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 369))], placeholder_shared[(((((int)threadIdx.z) * 140) + 673))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 369))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1233))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 369))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1793))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 370))], placeholder_shared[(((((int)threadIdx.z) * 140) + 114))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 370))], placeholder_shared[(((((int)threadIdx.z) * 140) + 674))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 370))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1234))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 370))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1794))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 371))], placeholder_shared[(((((int)threadIdx.z) * 140) + 115))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 371))], placeholder_shared[(((((int)threadIdx.z) * 140) + 675))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 371))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1235))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 371))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1795))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 372))], placeholder_shared[(((((int)threadIdx.z) * 140) + 116))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 372))], placeholder_shared[(((((int)threadIdx.z) * 140) + 676))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 372))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1236))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 372))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1796))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 373))], placeholder_shared[(((((int)threadIdx.z) * 140) + 117))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 373))], placeholder_shared[(((((int)threadIdx.z) * 140) + 677))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 373))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1237))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 373))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1797))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 140) + 118))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 140) + 678))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1238))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1798))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 140) + 119))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 140) + 679))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1239))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1799))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 392))], placeholder_shared[(((((int)threadIdx.z) * 140) + 120))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 392))], placeholder_shared[(((((int)threadIdx.z) * 140) + 680))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 392))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1240))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 392))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1800))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 393))], placeholder_shared[(((((int)threadIdx.z) * 140) + 121))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 393))], placeholder_shared[(((((int)threadIdx.z) * 140) + 681))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 393))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1241))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 393))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1801))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 394))], placeholder_shared[(((((int)threadIdx.z) * 140) + 122))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 394))], placeholder_shared[(((((int)threadIdx.z) * 140) + 682))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 394))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1242))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 394))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1802))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 395))], placeholder_shared[(((((int)threadIdx.z) * 140) + 123))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 395))], placeholder_shared[(((((int)threadIdx.z) * 140) + 683))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 395))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1243))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 395))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1803))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 396))], placeholder_shared[(((((int)threadIdx.z) * 140) + 124))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 396))], placeholder_shared[(((((int)threadIdx.z) * 140) + 684))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 396))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1244))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 396))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1804))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 397))], placeholder_shared[(((((int)threadIdx.z) * 140) + 125))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 397))], placeholder_shared[(((((int)threadIdx.z) * 140) + 685))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 397))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1245))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 397))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1805))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 414))], placeholder_shared[(((((int)threadIdx.z) * 140) + 126))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 414))], placeholder_shared[(((((int)threadIdx.z) * 140) + 686))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 414))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1246))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 414))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1806))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 415))], placeholder_shared[(((((int)threadIdx.z) * 140) + 127))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 415))], placeholder_shared[(((((int)threadIdx.z) * 140) + 687))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 415))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1247))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 415))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1807))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 416))], placeholder_shared[(((((int)threadIdx.z) * 140) + 128))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 416))], placeholder_shared[(((((int)threadIdx.z) * 140) + 688))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 416))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1248))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 416))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1808))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 417))], placeholder_shared[(((((int)threadIdx.z) * 140) + 129))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 417))], placeholder_shared[(((((int)threadIdx.z) * 140) + 689))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 417))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1249))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 417))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1809))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 418))], placeholder_shared[(((((int)threadIdx.z) * 140) + 130))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 418))], placeholder_shared[(((((int)threadIdx.z) * 140) + 690))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 418))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1250))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 418))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1810))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 419))], placeholder_shared[(((((int)threadIdx.z) * 140) + 131))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 419))], placeholder_shared[(((((int)threadIdx.z) * 140) + 691))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 419))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1251))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 419))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1811))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 420))], placeholder_shared[(((((int)threadIdx.z) * 140) + 132))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 420))], placeholder_shared[(((((int)threadIdx.z) * 140) + 692))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 420))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1252))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 420))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1812))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 437))], placeholder_shared[(((((int)threadIdx.z) * 140) + 133))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 437))], placeholder_shared[(((((int)threadIdx.z) * 140) + 693))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 437))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1253))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 437))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1813))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 438))], placeholder_shared[(((((int)threadIdx.z) * 140) + 134))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 438))], placeholder_shared[(((((int)threadIdx.z) * 140) + 694))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 438))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1254))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 438))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1814))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 439))], placeholder_shared[(((((int)threadIdx.z) * 140) + 135))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 439))], placeholder_shared[(((((int)threadIdx.z) * 140) + 695))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 439))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1255))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 439))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1815))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 440))], placeholder_shared[(((((int)threadIdx.z) * 140) + 136))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 440))], placeholder_shared[(((((int)threadIdx.z) * 140) + 696))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 440))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1256))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 440))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1816))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 441))], placeholder_shared[(((((int)threadIdx.z) * 140) + 137))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 441))], placeholder_shared[(((((int)threadIdx.z) * 140) + 697))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 441))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1257))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 441))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1817))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 140) + 138))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 140) + 698))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1258))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1818))], compute[(3)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 443))], placeholder_shared[(((((int)threadIdx.z) * 140) + 139))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 443))], placeholder_shared[(((((int)threadIdx.z) * 140) + 699))], compute[(1)]);
    compute[(2)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 443))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1259))], compute[(2)]);
    compute[(3)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 443))], placeholder_shared[(((((int)threadIdx.z) * 140) + 1819))], compute[(3)]);
  }
  T_relu[(((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 1156))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 16) + ((int)threadIdx.z)) + 4))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 2312))] = max((compute[(2)] + placeholder2[((((((int)blockIdx.z) * 16) + ((int)threadIdx.z)) + 8))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 3468))] = max((compute[(3)] + placeholder2[((((((int)blockIdx.z) * 16) + ((int)threadIdx.z)) + 12))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_12_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[600];
  __shared__ float placeholder_shared[768];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 8; ++rc_outer) {
    __syncthreads();
    if ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) < 600) {
      if (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) < 19) {
        if (((int)threadIdx.x) < 4) {
          pad_temp_shared[((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)))] = placeholder[(((((((rc_outer * 29400) + (((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) / 25) * 1225)) + (((int)blockIdx.y) * 175)) + ((((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 25) / 5) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 5)))];
        }
      }
    }
    if (((((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) / 24) + ((int)threadIdx.z)) < 32) {
      if ((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)) < 768) {
        if (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) < 24) {
          placeholder_shared[((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder1[(((((((int)threadIdx.z) * 192) + (rc_outer * 24)) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 24; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 24) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[((((((((int)threadIdx.z) * 1225) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((int)threadIdx.z))]), 0.000000e+00f);
}

__device__ void fused_nn_batch_flatten_1_kernel0_device(float* __restrict__ tensor, float* __restrict__ placeholder){
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = placeholder[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))];
}

__device__ void fused_nn_max_pool2d_9_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor_local[1];
  tensor_local[(0)] = -3.402823e+38f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      tensor_local[(0)] = max(tensor_local[(0)], (((((1 <= (((((int)threadIdx.x) & 63) >> 3) + dh)) && ((((((int)threadIdx.x) & 63) >> 3) + dh) < 9)) && (1 <= (dw + (((int)threadIdx.x) & 7)))) && ((dw + (((int)threadIdx.x) & 7)) < 9)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 8)) + ((int)threadIdx.x)) + dw) - 9))] : -3.402823e+38f));
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = tensor_local[(0)];
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[12];
  __shared__ float placeholder_shared[576];
  __shared__ float data_pack_shared[2592];
  for (int p_c_init = 0; p_c_init < 4; ++p_c_init) {
    bgemm_local[(p_c_init)] = 0.000000e+00f;
    bgemm_local[((p_c_init + 4))] = 0.000000e+00f;
    bgemm_local[((p_c_init + 8))] = 0.000000e+00f;
  }
  for (int ci_outer = 0; ci_outer < 4; ++ci_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer) {
      if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 216) + (((int)threadIdx.y) * 27)) + ((int)threadIdx.x)) < 576) {
        if (((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 8) + ((int)threadIdx.y)) < 22) {
          placeholder_shared[((((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 9) + (((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) / 24)) % 24) * 24) + (((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) % 24)))] = placeholder[((((((((int)blockIdx.z) * 9216) + (ci_outer * 2304)) + ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer * 9) + (((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) / 24)) % 24) * 96)) + (((int)blockIdx.y) * 24)) + (((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) % 24)))];
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 < 12; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1) {
      data_pack_shared[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 * 216) + (((int)threadIdx.y) * 27)) + ((int)threadIdx.x)))] = data_pack[(((((((((int)blockIdx.z) * 31104) + (ci_outer * 7776)) + (ax0_ax1_fused_ax2_fused_ax3_fused_outer_outer_outer1 * 648)) + ((((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) / 108) * 324)) + (((int)blockIdx.x) * 108)) + (((((int)threadIdx.y) * 27) + ((int)threadIdx.x)) % 108)))];
    }
    __syncthreads();
    for (int ci_inner = 0; ci_inner < 24; ++ci_inner) {
      for (int p_c = 0; p_c < 4; ++p_c) {
        bgemm_local[(p_c)] = __ocml_fma_f32(placeholder_shared[(((ci_inner * 24) + ((int)threadIdx.y)))], data_pack_shared[((((ci_inner * 108) + (((int)threadIdx.x) * 4)) + p_c))], bgemm_local[(p_c)]);
        bgemm_local[((p_c + 4))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 24) + ((int)threadIdx.y)) + 8))], data_pack_shared[((((ci_inner * 108) + (((int)threadIdx.x) * 4)) + p_c))], bgemm_local[((p_c + 4))]);
        bgemm_local[((p_c + 8))] = __ocml_fma_f32(placeholder_shared[((((ci_inner * 24) + ((int)threadIdx.y)) + 16))], data_pack_shared[((((ci_inner * 108) + (((int)threadIdx.x) * 4)) + p_c))], bgemm_local[((p_c + 8))]);
      }
    }
  }
  for (int p_inner_inner_inner = 0; p_inner_inner_inner < 4; ++p_inner_inner_inner) {
    bgemm[(((((((((int)blockIdx.z) * 31104) + (((int)blockIdx.y) * 7776)) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 108)) + (((int)threadIdx.x) * 4)) + p_inner_inner_inner))] = bgemm_local[(p_inner_inner_inner)];
    bgemm[((((((((((int)blockIdx.z) * 31104) + (((int)blockIdx.y) * 7776)) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 108)) + (((int)threadIdx.x) * 4)) + p_inner_inner_inner) + 2592))] = bgemm_local[((p_inner_inner_inner + 4))];
    bgemm[((((((((((int)blockIdx.z) * 31104) + (((int)blockIdx.y) * 7776)) + (((int)threadIdx.y) * 324)) + (((int)blockIdx.x) * 108)) + (((int)threadIdx.x) * 4)) + p_inner_inner_inner) + 5184))] = bgemm_local[((p_inner_inner_inner + 8))];
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_30_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[2048];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 10; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 4))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 5))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 6))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[((((((((rc_outer * 8192) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 2) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)))] = placeholder1[((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 2))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 20480) + (((int)threadIdx.z) * 1280)) + (rc_outer * 128)) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4)) + 3))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 128))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 128) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 128) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 128) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 128) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 128) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 128) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 128) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 128) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 128) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 128) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 128) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 128) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 128) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 128) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 128) + 15))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 128) + 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 128) + 17))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 128) + 18))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 608))], placeholder_shared[(((((int)threadIdx.z) * 128) + 19))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 128) + 20))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 672))], placeholder_shared[(((((int)threadIdx.z) * 128) + 21))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 128) + 22))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 736))], placeholder_shared[(((((int)threadIdx.z) * 128) + 23))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 128) + 24))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 128) + 25))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 128) + 26))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 864))], placeholder_shared[(((((int)threadIdx.z) * 128) + 27))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 128) + 28))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 928))], placeholder_shared[(((((int)threadIdx.z) * 128) + 29))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 128) + 30))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 992))], placeholder_shared[(((((int)threadIdx.z) * 128) + 31))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 128) + 32))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1056))], placeholder_shared[(((((int)threadIdx.z) * 128) + 33))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 128) + 34))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1120))], placeholder_shared[(((((int)threadIdx.z) * 128) + 35))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 128) + 36))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1184))], placeholder_shared[(((((int)threadIdx.z) * 128) + 37))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 128) + 38))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1248))], placeholder_shared[(((((int)threadIdx.z) * 128) + 39))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 128) + 40))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1312))], placeholder_shared[(((((int)threadIdx.z) * 128) + 41))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 128) + 42))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1376))], placeholder_shared[(((((int)threadIdx.z) * 128) + 43))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 128) + 44))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1440))], placeholder_shared[(((((int)threadIdx.z) * 128) + 45))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 128) + 46))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1504))], placeholder_shared[(((((int)threadIdx.z) * 128) + 47))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 128) + 48))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1568))], placeholder_shared[(((((int)threadIdx.z) * 128) + 49))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 128) + 50))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1632))], placeholder_shared[(((((int)threadIdx.z) * 128) + 51))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 128) + 52))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1696))], placeholder_shared[(((((int)threadIdx.z) * 128) + 53))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 128) + 54))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1760))], placeholder_shared[(((((int)threadIdx.z) * 128) + 55))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 128) + 56))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1824))], placeholder_shared[(((((int)threadIdx.z) * 128) + 57))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 128) + 58))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1888))], placeholder_shared[(((((int)threadIdx.z) * 128) + 59))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 128) + 60))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1952))], placeholder_shared[(((((int)threadIdx.z) * 128) + 61))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 128) + 62))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2016))], placeholder_shared[(((((int)threadIdx.z) * 128) + 63))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 128) + 64))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2080))], placeholder_shared[(((((int)threadIdx.z) * 128) + 65))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 128) + 66))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2144))], placeholder_shared[(((((int)threadIdx.z) * 128) + 67))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 128) + 68))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2208))], placeholder_shared[(((((int)threadIdx.z) * 128) + 69))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 128) + 70))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2272))], placeholder_shared[(((((int)threadIdx.z) * 128) + 71))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 128) + 72))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2336))], placeholder_shared[(((((int)threadIdx.z) * 128) + 73))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 128) + 74))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2400))], placeholder_shared[(((((int)threadIdx.z) * 128) + 75))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 128) + 76))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2464))], placeholder_shared[(((((int)threadIdx.z) * 128) + 77))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 128) + 78))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2528))], placeholder_shared[(((((int)threadIdx.z) * 128) + 79))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 128) + 80))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2592))], placeholder_shared[(((((int)threadIdx.z) * 128) + 81))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 128) + 82))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2656))], placeholder_shared[(((((int)threadIdx.z) * 128) + 83))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 128) + 84))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2720))], placeholder_shared[(((((int)threadIdx.z) * 128) + 85))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 128) + 86))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2784))], placeholder_shared[(((((int)threadIdx.z) * 128) + 87))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 128) + 88))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2848))], placeholder_shared[(((((int)threadIdx.z) * 128) + 89))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 128) + 90))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2912))], placeholder_shared[(((((int)threadIdx.z) * 128) + 91))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 128) + 92))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2976))], placeholder_shared[(((((int)threadIdx.z) * 128) + 93))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 128) + 94))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3040))], placeholder_shared[(((((int)threadIdx.z) * 128) + 95))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 128) + 96))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3104))], placeholder_shared[(((((int)threadIdx.z) * 128) + 97))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 128) + 98))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3168))], placeholder_shared[(((((int)threadIdx.z) * 128) + 99))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 128) + 100))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3232))], placeholder_shared[(((((int)threadIdx.z) * 128) + 101))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 128) + 102))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3296))], placeholder_shared[(((((int)threadIdx.z) * 128) + 103))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 128) + 104))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3360))], placeholder_shared[(((((int)threadIdx.z) * 128) + 105))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 128) + 106))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3424))], placeholder_shared[(((((int)threadIdx.z) * 128) + 107))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 128) + 108))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3488))], placeholder_shared[(((((int)threadIdx.z) * 128) + 109))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 128) + 110))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3552))], placeholder_shared[(((((int)threadIdx.z) * 128) + 111))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 128) + 112))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3616))], placeholder_shared[(((((int)threadIdx.z) * 128) + 113))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 128) + 114))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3680))], placeholder_shared[(((((int)threadIdx.z) * 128) + 115))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 128) + 116))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3744))], placeholder_shared[(((((int)threadIdx.z) * 128) + 117))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 128) + 118))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3808))], placeholder_shared[(((((int)threadIdx.z) * 128) + 119))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 128) + 120))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3872))], placeholder_shared[(((((int)threadIdx.z) * 128) + 121))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 128) + 122))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3936))], placeholder_shared[(((((int)threadIdx.z) * 128) + 123))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 128) + 124))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4000))], placeholder_shared[(((((int)threadIdx.z) * 128) + 125))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 128) + 126))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4064))], placeholder_shared[(((((int)threadIdx.z) * 128) + 127))], compute[(0)]);
  }
  T_relu[((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 32)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_6_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[784];
  __shared__ float placeholder_shared[512];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 49) + (((int)threadIdx.y) * 7)) + ((int)threadIdx.x)))] = placeholder[(((((((rc_outer * 19600) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 245)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 7)) + ((int)threadIdx.x)))];
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) >> 4)) < 32) {
      if ((((((int)threadIdx.z) * 32) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)) < 512) {
        if (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) < 32) {
          if (((int)threadIdx.x) < 5) {
            placeholder_shared[((((((int)threadIdx.z) * 32) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 8192) + (((int)threadIdx.z) * 512)) + ((((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) >> 4) * 256)) + (rc_outer * 16)) + (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) & 15)))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 7) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 7) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 16) + 256))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 49))], placeholder_shared[(((((int)threadIdx.z) * 16) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 49))], placeholder_shared[(((((int)threadIdx.z) * 16) + 257))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 98))], placeholder_shared[(((((int)threadIdx.z) * 16) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 98))], placeholder_shared[(((((int)threadIdx.z) * 16) + 258))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 147))], placeholder_shared[(((((int)threadIdx.z) * 16) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 147))], placeholder_shared[(((((int)threadIdx.z) * 16) + 259))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 196))], placeholder_shared[(((((int)threadIdx.z) * 16) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 196))], placeholder_shared[(((((int)threadIdx.z) * 16) + 260))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 245))], placeholder_shared[(((((int)threadIdx.z) * 16) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 245))], placeholder_shared[(((((int)threadIdx.z) * 16) + 261))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 294))], placeholder_shared[(((((int)threadIdx.z) * 16) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 294))], placeholder_shared[(((((int)threadIdx.z) * 16) + 262))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 343))], placeholder_shared[(((((int)threadIdx.z) * 16) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 343))], placeholder_shared[(((((int)threadIdx.z) * 16) + 263))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 392))], placeholder_shared[(((((int)threadIdx.z) * 16) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 392))], placeholder_shared[(((((int)threadIdx.z) * 16) + 264))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 441))], placeholder_shared[(((((int)threadIdx.z) * 16) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 441))], placeholder_shared[(((((int)threadIdx.z) * 16) + 265))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 490))], placeholder_shared[(((((int)threadIdx.z) * 16) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 490))], placeholder_shared[(((((int)threadIdx.z) * 16) + 266))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 539))], placeholder_shared[(((((int)threadIdx.z) * 16) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 539))], placeholder_shared[(((((int)threadIdx.z) * 16) + 267))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 588))], placeholder_shared[(((((int)threadIdx.z) * 16) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 588))], placeholder_shared[(((((int)threadIdx.z) * 16) + 268))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 637))], placeholder_shared[(((((int)threadIdx.z) * 16) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 637))], placeholder_shared[(((((int)threadIdx.z) * 16) + 269))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 686))], placeholder_shared[(((((int)threadIdx.z) * 16) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 686))], placeholder_shared[(((((int)threadIdx.z) * 16) + 270))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 735))], placeholder_shared[(((((int)threadIdx.z) * 16) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) + 735))], placeholder_shared[(((((int)threadIdx.z) * 16) + 271))], compute[(1)]);
  }
  T_relu[(((((((((int)blockIdx.z) * 39200) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 245)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 7)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((((int)blockIdx.z) * 39200) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 245)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 7)) + ((int)threadIdx.x)) + 19600))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 32) + ((int)threadIdx.z)) + 16))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel1_device(float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm){
  float bgemm_local[16];
  __shared__ float placeholder_shared[256];
  __shared__ float data_pack_shared[1184];
  bgemm_local[(0)] = 0.000000e+00f;
  bgemm_local[(8)] = 0.000000e+00f;
  bgemm_local[(4)] = 0.000000e+00f;
  bgemm_local[(12)] = 0.000000e+00f;
  bgemm_local[(1)] = 0.000000e+00f;
  bgemm_local[(9)] = 0.000000e+00f;
  bgemm_local[(5)] = 0.000000e+00f;
  bgemm_local[(13)] = 0.000000e+00f;
  bgemm_local[(2)] = 0.000000e+00f;
  bgemm_local[(10)] = 0.000000e+00f;
  bgemm_local[(6)] = 0.000000e+00f;
  bgemm_local[(14)] = 0.000000e+00f;
  bgemm_local[(3)] = 0.000000e+00f;
  bgemm_local[(11)] = 0.000000e+00f;
  bgemm_local[(7)] = 0.000000e+00f;
  bgemm_local[(15)] = 0.000000e+00f;
  for (int ci_outer = 0; ci_outer < 4; ++ci_outer) {
    __syncthreads();
    if (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) < 256) {
      if (((int)threadIdx.y) < 7) {
        placeholder_shared[(((((int)threadIdx.y) * 37) + ((int)threadIdx.x)))] = placeholder[(((((((int)blockIdx.z) * 1024) + (ci_outer * 256)) + (((int)threadIdx.y) * 37)) + ((int)threadIdx.x)))];
      }
    }
    data_pack_shared[(((((int)threadIdx.y) * 37) + ((int)threadIdx.x)))] = data_pack[((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 296))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 10952))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 592))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 21904))];
    data_pack_shared[((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) + 888))] = data_pack[(((((((((int)blockIdx.z) * 175232) + (ci_outer * 43808)) + ((((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) / 148) * 5476)) + (((int)blockIdx.x) * 148)) + (((((int)threadIdx.y) * 37) + ((int)threadIdx.x)) % 148)) + 32856))];
    __syncthreads();
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[((((int)threadIdx.x) * 2))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[((((int)threadIdx.x) * 2))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 2) + 74))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 2) + 74))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[((((int)threadIdx.y) * 2))], data_pack_shared[(((((int)threadIdx.x) * 2) + 75))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 16))], data_pack_shared[(((((int)threadIdx.x) * 2) + 75))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[((((int)threadIdx.x) * 2))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[((((int)threadIdx.x) * 2))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 2) + 74))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 2) + 74))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 1))], data_pack_shared[(((((int)threadIdx.x) * 2) + 75))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 17))], data_pack_shared[(((((int)threadIdx.x) * 2) + 75))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 2) + 148))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 2) + 148))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 2) + 222))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 2) + 222))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 2) + 149))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 2) + 149))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 32))], data_pack_shared[(((((int)threadIdx.x) * 2) + 223))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 48))], data_pack_shared[(((((int)threadIdx.x) * 2) + 223))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 2) + 148))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 2) + 148))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 2) + 222))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 2) + 222))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 2) + 149))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 2) + 149))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 33))], data_pack_shared[(((((int)threadIdx.x) * 2) + 223))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 49))], data_pack_shared[(((((int)threadIdx.x) * 2) + 223))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 296))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 2) + 296))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 370))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 2) + 370))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 297))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 2) + 297))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 64))], data_pack_shared[(((((int)threadIdx.x) * 2) + 371))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 80))], data_pack_shared[(((((int)threadIdx.x) * 2) + 371))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 2) + 296))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 2) + 296))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 2) + 370))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 2) + 370))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 2) + 297))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 2) + 297))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 65))], data_pack_shared[(((((int)threadIdx.x) * 2) + 371))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 81))], data_pack_shared[(((((int)threadIdx.x) * 2) + 371))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 2) + 444))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 2) + 444))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 2) + 518))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 2) + 518))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 2) + 445))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 2) + 445))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 96))], data_pack_shared[(((((int)threadIdx.x) * 2) + 519))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 112))], data_pack_shared[(((((int)threadIdx.x) * 2) + 519))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 2) + 444))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 2) + 444))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 2) + 518))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 2) + 518))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 2) + 445))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 2) + 445))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 97))], data_pack_shared[(((((int)threadIdx.x) * 2) + 519))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 113))], data_pack_shared[(((((int)threadIdx.x) * 2) + 519))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 592))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 2) + 592))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 666))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 2) + 666))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 593))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 2) + 593))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 128))], data_pack_shared[(((((int)threadIdx.x) * 2) + 667))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 144))], data_pack_shared[(((((int)threadIdx.x) * 2) + 667))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 2) + 592))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 2) + 592))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 2) + 666))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 2) + 666))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 2) + 593))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 2) + 593))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 129))], data_pack_shared[(((((int)threadIdx.x) * 2) + 667))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 145))], data_pack_shared[(((((int)threadIdx.x) * 2) + 667))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 2) + 740))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 2) + 740))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 2) + 814))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 2) + 814))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 2) + 741))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 2) + 741))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 160))], data_pack_shared[(((((int)threadIdx.x) * 2) + 815))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 176))], data_pack_shared[(((((int)threadIdx.x) * 2) + 815))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 2) + 740))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 2) + 740))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 2) + 814))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 2) + 814))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 2) + 741))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 2) + 741))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 161))], data_pack_shared[(((((int)threadIdx.x) * 2) + 815))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 177))], data_pack_shared[(((((int)threadIdx.x) * 2) + 815))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 888))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 2) + 888))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 962))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 2) + 962))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 889))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 2) + 889))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 192))], data_pack_shared[(((((int)threadIdx.x) * 2) + 963))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 208))], data_pack_shared[(((((int)threadIdx.x) * 2) + 963))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 2) + 888))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 2) + 888))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 2) + 962))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 2) + 962))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 2) + 889))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 2) + 889))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 193))], data_pack_shared[(((((int)threadIdx.x) * 2) + 963))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 209))], data_pack_shared[(((((int)threadIdx.x) * 2) + 963))], bgemm_local[(15)]);
    bgemm_local[(0)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1036))], bgemm_local[(0)]);
    bgemm_local[(8)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1036))], bgemm_local[(8)]);
    bgemm_local[(4)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1110))], bgemm_local[(4)]);
    bgemm_local[(12)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1110))], bgemm_local[(12)]);
    bgemm_local[(1)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1037))], bgemm_local[(1)]);
    bgemm_local[(9)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1037))], bgemm_local[(9)]);
    bgemm_local[(5)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 224))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1111))], bgemm_local[(5)]);
    bgemm_local[(13)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 240))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1111))], bgemm_local[(13)]);
    bgemm_local[(2)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1036))], bgemm_local[(2)]);
    bgemm_local[(10)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1036))], bgemm_local[(10)]);
    bgemm_local[(6)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1110))], bgemm_local[(6)]);
    bgemm_local[(14)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1110))], bgemm_local[(14)]);
    bgemm_local[(3)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1037))], bgemm_local[(3)]);
    bgemm_local[(11)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1037))], bgemm_local[(11)]);
    bgemm_local[(7)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 225))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1111))], bgemm_local[(7)]);
    bgemm_local[(15)] = __ocml_fma_f32(placeholder_shared[(((((int)threadIdx.y) * 2) + 241))], data_pack_shared[(((((int)threadIdx.x) * 2) + 1111))], bgemm_local[(15)]);
  }
  bgemm[(((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)))] = bgemm_local[(0)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 87616))] = bgemm_local[(8)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 74))] = bgemm_local[(4)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 87690))] = bgemm_local[(12)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 1))] = bgemm_local[(1)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 87617))] = bgemm_local[(9)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 75))] = bgemm_local[(5)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 87691))] = bgemm_local[(13)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 5476))] = bgemm_local[(2)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 93092))] = bgemm_local[(10)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 5550))] = bgemm_local[(6)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 93166))] = bgemm_local[(14)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 5477))] = bgemm_local[(3)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 93093))] = bgemm_local[(11)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 5551))] = bgemm_local[(7)];
  bgemm[((((((((int)blockIdx.z) * 175232) + (((int)threadIdx.y) * 10952)) + (((int)blockIdx.x) * 148)) + (((int)threadIdx.x) * 2)) + 93167))] = bgemm_local[(15)];
}

__device__ void fused_nn_conv2d_add_nn_relu_16_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[3128];
  __shared__ float placeholder_shared[224];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 4) + (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3128) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1564) {
            if (((int)threadIdx.x) < 16) {
              pad_temp_shared[((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)))] = (((51 <= (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) % 391)) && ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) / 391) * 289)) + (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3127) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1563) {
            if (((int)threadIdx.x) < 16) {
              pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + 1))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 1) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3126) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1562) {
            if (((int)threadIdx.x) < 15) {
              pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + 2))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 2) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3125) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1561) {
            if (((int)threadIdx.x) < 15) {
              pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + 3))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 3) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3124) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1560) {
            if (((int)threadIdx.x) < 15) {
              pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + 4))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 4) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) / 391)) < 8) {
      if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) / 17)) < 184) {
        if ((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) < 3123) {
          if (((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) < 1559) {
            if (((int)threadIdx.x) < 15) {
              pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + 5))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + 5) % 391)) - 51))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) / 7) + ((int)threadIdx.y)) >> 3)) < 4) {
      if ((((((int)threadIdx.z) * 16) + (((int)threadIdx.x) / 7)) + ((int)threadIdx.y)) < 32) {
        if ((((((int)threadIdx.z) * 112) + (((int)threadIdx.y) * 7)) + ((int)threadIdx.x)) < 224) {
          if (((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) < 112) {
            if (((int)threadIdx.x) < 7) {
              if ((((((int)blockIdx.z) * 4) + (((int)threadIdx.z) * 2)) + (((int)threadIdx.y) >> 3)) < 192) {
                placeholder_shared[((((((int)threadIdx.z) * 112) + (((int)threadIdx.y) * 7)) + ((int)threadIdx.x)))] = placeholder1[(((((((((int)blockIdx.z) * 3584) + (((int)threadIdx.z) * 1792)) + ((((int)threadIdx.y) >> 3) * 896)) + (rc_outer * 56)) + ((((int)threadIdx.y) & 7) * 7)) + ((int)threadIdx.x)))];
              }
            }
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 17) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 17) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 56) + 112))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 17))], placeholder_shared[(((((int)threadIdx.z) * 56) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 17))], placeholder_shared[(((((int)threadIdx.z) * 56) + 113))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 34))], placeholder_shared[(((((int)threadIdx.z) * 56) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 34))], placeholder_shared[(((((int)threadIdx.z) * 56) + 114))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 51))], placeholder_shared[(((((int)threadIdx.z) * 56) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 51))], placeholder_shared[(((((int)threadIdx.z) * 56) + 115))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 68))], placeholder_shared[(((((int)threadIdx.z) * 56) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 68))], placeholder_shared[(((((int)threadIdx.z) * 56) + 116))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 56) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 85))], placeholder_shared[(((((int)threadIdx.z) * 56) + 117))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 56) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 102))], placeholder_shared[(((((int)threadIdx.z) * 56) + 118))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 391))], placeholder_shared[(((((int)threadIdx.z) * 56) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 391))], placeholder_shared[(((((int)threadIdx.z) * 56) + 119))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 408))], placeholder_shared[(((((int)threadIdx.z) * 56) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 408))], placeholder_shared[(((((int)threadIdx.z) * 56) + 120))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 425))], placeholder_shared[(((((int)threadIdx.z) * 56) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 425))], placeholder_shared[(((((int)threadIdx.z) * 56) + 121))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 442))], placeholder_shared[(((((int)threadIdx.z) * 56) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 442))], placeholder_shared[(((((int)threadIdx.z) * 56) + 122))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 459))], placeholder_shared[(((((int)threadIdx.z) * 56) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 459))], placeholder_shared[(((((int)threadIdx.z) * 56) + 123))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 476))], placeholder_shared[(((((int)threadIdx.z) * 56) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 476))], placeholder_shared[(((((int)threadIdx.z) * 56) + 124))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 493))], placeholder_shared[(((((int)threadIdx.z) * 56) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 493))], placeholder_shared[(((((int)threadIdx.z) * 56) + 125))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 782))], placeholder_shared[(((((int)threadIdx.z) * 56) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 782))], placeholder_shared[(((((int)threadIdx.z) * 56) + 126))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 799))], placeholder_shared[(((((int)threadIdx.z) * 56) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 799))], placeholder_shared[(((((int)threadIdx.z) * 56) + 127))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 816))], placeholder_shared[(((((int)threadIdx.z) * 56) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 816))], placeholder_shared[(((((int)threadIdx.z) * 56) + 128))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 833))], placeholder_shared[(((((int)threadIdx.z) * 56) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 833))], placeholder_shared[(((((int)threadIdx.z) * 56) + 129))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 850))], placeholder_shared[(((((int)threadIdx.z) * 56) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 850))], placeholder_shared[(((((int)threadIdx.z) * 56) + 130))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 867))], placeholder_shared[(((((int)threadIdx.z) * 56) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 867))], placeholder_shared[(((((int)threadIdx.z) * 56) + 131))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 884))], placeholder_shared[(((((int)threadIdx.z) * 56) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 884))], placeholder_shared[(((((int)threadIdx.z) * 56) + 132))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 56) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 56) + 133))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 56) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1190))], placeholder_shared[(((((int)threadIdx.z) * 56) + 134))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 56) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1207))], placeholder_shared[(((((int)threadIdx.z) * 56) + 135))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 56) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1224))], placeholder_shared[(((((int)threadIdx.z) * 56) + 136))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1241))], placeholder_shared[(((((int)threadIdx.z) * 56) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1241))], placeholder_shared[(((((int)threadIdx.z) * 56) + 137))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1258))], placeholder_shared[(((((int)threadIdx.z) * 56) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1258))], placeholder_shared[(((((int)threadIdx.z) * 56) + 138))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 56) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1275))], placeholder_shared[(((((int)threadIdx.z) * 56) + 139))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1564))], placeholder_shared[(((((int)threadIdx.z) * 56) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1564))], placeholder_shared[(((((int)threadIdx.z) * 56) + 140))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1581))], placeholder_shared[(((((int)threadIdx.z) * 56) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1581))], placeholder_shared[(((((int)threadIdx.z) * 56) + 141))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1598))], placeholder_shared[(((((int)threadIdx.z) * 56) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1598))], placeholder_shared[(((((int)threadIdx.z) * 56) + 142))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1615))], placeholder_shared[(((((int)threadIdx.z) * 56) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1615))], placeholder_shared[(((((int)threadIdx.z) * 56) + 143))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1632))], placeholder_shared[(((((int)threadIdx.z) * 56) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1632))], placeholder_shared[(((((int)threadIdx.z) * 56) + 144))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1649))], placeholder_shared[(((((int)threadIdx.z) * 56) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1649))], placeholder_shared[(((((int)threadIdx.z) * 56) + 145))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1666))], placeholder_shared[(((((int)threadIdx.z) * 56) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1666))], placeholder_shared[(((((int)threadIdx.z) * 56) + 146))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1955))], placeholder_shared[(((((int)threadIdx.z) * 56) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1955))], placeholder_shared[(((((int)threadIdx.z) * 56) + 147))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1972))], placeholder_shared[(((((int)threadIdx.z) * 56) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1972))], placeholder_shared[(((((int)threadIdx.z) * 56) + 148))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1989))], placeholder_shared[(((((int)threadIdx.z) * 56) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 1989))], placeholder_shared[(((((int)threadIdx.z) * 56) + 149))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2006))], placeholder_shared[(((((int)threadIdx.z) * 56) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2006))], placeholder_shared[(((((int)threadIdx.z) * 56) + 150))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2023))], placeholder_shared[(((((int)threadIdx.z) * 56) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2023))], placeholder_shared[(((((int)threadIdx.z) * 56) + 151))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2040))], placeholder_shared[(((((int)threadIdx.z) * 56) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2040))], placeholder_shared[(((((int)threadIdx.z) * 56) + 152))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2057))], placeholder_shared[(((((int)threadIdx.z) * 56) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2057))], placeholder_shared[(((((int)threadIdx.z) * 56) + 153))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2346))], placeholder_shared[(((((int)threadIdx.z) * 56) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2346))], placeholder_shared[(((((int)threadIdx.z) * 56) + 154))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2363))], placeholder_shared[(((((int)threadIdx.z) * 56) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2363))], placeholder_shared[(((((int)threadIdx.z) * 56) + 155))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2380))], placeholder_shared[(((((int)threadIdx.z) * 56) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2380))], placeholder_shared[(((((int)threadIdx.z) * 56) + 156))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2397))], placeholder_shared[(((((int)threadIdx.z) * 56) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2397))], placeholder_shared[(((((int)threadIdx.z) * 56) + 157))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2414))], placeholder_shared[(((((int)threadIdx.z) * 56) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2414))], placeholder_shared[(((((int)threadIdx.z) * 56) + 158))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2431))], placeholder_shared[(((((int)threadIdx.z) * 56) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2431))], placeholder_shared[(((((int)threadIdx.z) * 56) + 159))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2448))], placeholder_shared[(((((int)threadIdx.z) * 56) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2448))], placeholder_shared[(((((int)threadIdx.z) * 56) + 160))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2737))], placeholder_shared[(((((int)threadIdx.z) * 56) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2737))], placeholder_shared[(((((int)threadIdx.z) * 56) + 161))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2754))], placeholder_shared[(((((int)threadIdx.z) * 56) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2754))], placeholder_shared[(((((int)threadIdx.z) * 56) + 162))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2771))], placeholder_shared[(((((int)threadIdx.z) * 56) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2771))], placeholder_shared[(((((int)threadIdx.z) * 56) + 163))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2788))], placeholder_shared[(((((int)threadIdx.z) * 56) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2788))], placeholder_shared[(((((int)threadIdx.z) * 56) + 164))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2805))], placeholder_shared[(((((int)threadIdx.z) * 56) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2805))], placeholder_shared[(((((int)threadIdx.z) * 56) + 165))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2822))], placeholder_shared[(((((int)threadIdx.z) * 56) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2822))], placeholder_shared[(((((int)threadIdx.z) * 56) + 166))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2839))], placeholder_shared[(((((int)threadIdx.z) * 56) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 17) + ((int)threadIdx.x)) + 2839))], placeholder_shared[(((((int)threadIdx.z) * 56) + 167))], compute[(1)]);
  }
  T_relu[(((((((int)blockIdx.z) * 1156) + (((int)threadIdx.z) * 289)) + (((int)threadIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 4) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 1156) + (((int)threadIdx.z) * 289)) + (((int)threadIdx.y) * 17)) + ((int)threadIdx.x)) + 578))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 4) + ((int)threadIdx.z)) + 2))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_31_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[1280];
  __shared__ float placeholder_shared[1536];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 80) + (((int)threadIdx.y) * 10)) + (((int)threadIdx.x) * 3)))] = (((4 <= (((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) % 40)) && ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) % 40) < 36)) ? placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) / 40) * 64)) + (((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) % 40) >> 2) * 8)) + (((int)blockIdx.x) * 4)) + (((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) & 3)) - 8))] : 0.000000e+00f);
    if (((((int)threadIdx.z) * 2) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) / 40)) < 32) {
      if (((((int)threadIdx.z) * 20) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) >> 2)) < 320) {
        if ((((((int)threadIdx.z) * 80) + (((int)threadIdx.y) * 10)) + (((int)threadIdx.x) * 3)) < 1279) {
          if (((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) < 79) {
            if (((int)threadIdx.x) < 3) {
              pad_temp_shared[(((((((int)threadIdx.z) * 80) + (((int)threadIdx.y) * 10)) + (((int)threadIdx.x) * 3)) + 1))] = (((4 <= ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) % 40)) && (((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) % 40) < 36)) ? placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + (((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) / 40) * 64)) + ((((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) % 40) >> 2) * 8)) + (((int)blockIdx.x) * 4)) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 1) & 3)) - 8))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) / 40)) < 32) {
      if (((((int)threadIdx.z) * 20) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) >> 2)) < 320) {
        if ((((((int)threadIdx.z) * 80) + (((int)threadIdx.y) * 10)) + (((int)threadIdx.x) * 3)) < 1278) {
          if (((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) < 78) {
            if (((int)threadIdx.x) < 3) {
              pad_temp_shared[(((((((int)threadIdx.z) * 80) + (((int)threadIdx.y) * 10)) + (((int)threadIdx.x) * 3)) + 2))] = (((4 <= ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) % 40)) && (((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) % 40) < 36)) ? placeholder[((((((((rc_outer * 2048) + (((int)threadIdx.z) * 128)) + (((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) / 40) * 64)) + ((((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) % 40) >> 2) * 8)) + (((int)blockIdx.x) * 4)) + ((((((int)threadIdx.y) * 10) + (((int)threadIdx.x) * 3)) + 2) & 3)) - 8))] : 0.000000e+00f);
            }
          }
        }
      }
    }
    placeholder_shared[((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)))] = placeholder1[((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 96) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 18432) + (((int)threadIdx.z) * 1152)) + (rc_outer * 96)) + (((int)threadIdx.y) * 12)) + (((int)threadIdx.x) * 3)) + 2))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 4) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 96))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 4))], placeholder_shared[(((((int)threadIdx.z) * 96) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 8))], placeholder_shared[(((((int)threadIdx.z) * 96) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 40))], placeholder_shared[(((((int)threadIdx.z) * 96) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 44))], placeholder_shared[(((((int)threadIdx.z) * 96) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 96) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 80))], placeholder_shared[(((((int)threadIdx.z) * 96) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 84))], placeholder_shared[(((((int)threadIdx.z) * 96) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 88))], placeholder_shared[(((((int)threadIdx.z) * 96) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 120))], placeholder_shared[(((((int)threadIdx.z) * 96) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 124))], placeholder_shared[(((((int)threadIdx.z) * 96) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 96) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 96) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 164))], placeholder_shared[(((((int)threadIdx.z) * 96) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 168))], placeholder_shared[(((((int)threadIdx.z) * 96) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 200))], placeholder_shared[(((((int)threadIdx.z) * 96) + 15))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 204))], placeholder_shared[(((((int)threadIdx.z) * 96) + 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 96) + 17))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 96) + 18))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 244))], placeholder_shared[(((((int)threadIdx.z) * 96) + 19))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 248))], placeholder_shared[(((((int)threadIdx.z) * 96) + 20))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 280))], placeholder_shared[(((((int)threadIdx.z) * 96) + 21))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 284))], placeholder_shared[(((((int)threadIdx.z) * 96) + 22))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 96) + 23))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 96) + 24))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 324))], placeholder_shared[(((((int)threadIdx.z) * 96) + 25))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 328))], placeholder_shared[(((((int)threadIdx.z) * 96) + 26))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 360))], placeholder_shared[(((((int)threadIdx.z) * 96) + 27))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 364))], placeholder_shared[(((((int)threadIdx.z) * 96) + 28))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 368))], placeholder_shared[(((((int)threadIdx.z) * 96) + 29))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 400))], placeholder_shared[(((((int)threadIdx.z) * 96) + 30))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 404))], placeholder_shared[(((((int)threadIdx.z) * 96) + 31))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 408))], placeholder_shared[(((((int)threadIdx.z) * 96) + 32))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 440))], placeholder_shared[(((((int)threadIdx.z) * 96) + 33))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 444))], placeholder_shared[(((((int)threadIdx.z) * 96) + 34))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 96) + 35))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 96) + 36))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 484))], placeholder_shared[(((((int)threadIdx.z) * 96) + 37))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 488))], placeholder_shared[(((((int)threadIdx.z) * 96) + 38))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 520))], placeholder_shared[(((((int)threadIdx.z) * 96) + 39))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 524))], placeholder_shared[(((((int)threadIdx.z) * 96) + 40))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 96) + 41))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 560))], placeholder_shared[(((((int)threadIdx.z) * 96) + 42))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 564))], placeholder_shared[(((((int)threadIdx.z) * 96) + 43))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 568))], placeholder_shared[(((((int)threadIdx.z) * 96) + 44))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 600))], placeholder_shared[(((((int)threadIdx.z) * 96) + 45))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 604))], placeholder_shared[(((((int)threadIdx.z) * 96) + 46))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 608))], placeholder_shared[(((((int)threadIdx.z) * 96) + 47))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 96) + 48))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 644))], placeholder_shared[(((((int)threadIdx.z) * 96) + 49))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 648))], placeholder_shared[(((((int)threadIdx.z) * 96) + 50))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 680))], placeholder_shared[(((((int)threadIdx.z) * 96) + 51))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 684))], placeholder_shared[(((((int)threadIdx.z) * 96) + 52))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 688))], placeholder_shared[(((((int)threadIdx.z) * 96) + 53))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 720))], placeholder_shared[(((((int)threadIdx.z) * 96) + 54))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 724))], placeholder_shared[(((((int)threadIdx.z) * 96) + 55))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 728))], placeholder_shared[(((((int)threadIdx.z) * 96) + 56))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 760))], placeholder_shared[(((((int)threadIdx.z) * 96) + 57))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 764))], placeholder_shared[(((((int)threadIdx.z) * 96) + 58))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 96) + 59))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 96) + 60))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 804))], placeholder_shared[(((((int)threadIdx.z) * 96) + 61))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 808))], placeholder_shared[(((((int)threadIdx.z) * 96) + 62))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 840))], placeholder_shared[(((((int)threadIdx.z) * 96) + 63))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 844))], placeholder_shared[(((((int)threadIdx.z) * 96) + 64))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 848))], placeholder_shared[(((((int)threadIdx.z) * 96) + 65))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 880))], placeholder_shared[(((((int)threadIdx.z) * 96) + 66))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 884))], placeholder_shared[(((((int)threadIdx.z) * 96) + 67))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 888))], placeholder_shared[(((((int)threadIdx.z) * 96) + 68))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 920))], placeholder_shared[(((((int)threadIdx.z) * 96) + 69))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 924))], placeholder_shared[(((((int)threadIdx.z) * 96) + 70))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 928))], placeholder_shared[(((((int)threadIdx.z) * 96) + 71))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 96) + 72))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 964))], placeholder_shared[(((((int)threadIdx.z) * 96) + 73))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 968))], placeholder_shared[(((((int)threadIdx.z) * 96) + 74))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1000))], placeholder_shared[(((((int)threadIdx.z) * 96) + 75))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1004))], placeholder_shared[(((((int)threadIdx.z) * 96) + 76))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1008))], placeholder_shared[(((((int)threadIdx.z) * 96) + 77))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1040))], placeholder_shared[(((((int)threadIdx.z) * 96) + 78))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1044))], placeholder_shared[(((((int)threadIdx.z) * 96) + 79))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1048))], placeholder_shared[(((((int)threadIdx.z) * 96) + 80))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1080))], placeholder_shared[(((((int)threadIdx.z) * 96) + 81))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1084))], placeholder_shared[(((((int)threadIdx.z) * 96) + 82))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 96) + 83))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1120))], placeholder_shared[(((((int)threadIdx.z) * 96) + 84))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1124))], placeholder_shared[(((((int)threadIdx.z) * 96) + 85))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1128))], placeholder_shared[(((((int)threadIdx.z) * 96) + 86))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1160))], placeholder_shared[(((((int)threadIdx.z) * 96) + 87))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1164))], placeholder_shared[(((((int)threadIdx.z) * 96) + 88))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1168))], placeholder_shared[(((((int)threadIdx.z) * 96) + 89))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1200))], placeholder_shared[(((((int)threadIdx.z) * 96) + 90))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1204))], placeholder_shared[(((((int)threadIdx.z) * 96) + 91))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1208))], placeholder_shared[(((((int)threadIdx.z) * 96) + 92))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1240))], placeholder_shared[(((((int)threadIdx.z) * 96) + 93))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1244))], placeholder_shared[(((((int)threadIdx.z) * 96) + 94))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) + 1248))], placeholder_shared[(((((int)threadIdx.z) * 96) + 95))], compute[(0)]);
  }
  T_relu[((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 64)) + (((int)threadIdx.y) * 8)) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[16];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1536))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3072))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4608))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6144))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 9216))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 18432))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 27648))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 36864))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1536))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3072))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4608))], 5.000000e-01f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6144))], -2.000000e+00f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 5.000000e-01f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -2.000000e+00f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 5.000000e-01f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -2.000000e+00f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 5.000000e-01f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], -2.000000e+00f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], 5.000000e-01f, inverse[(1)]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], -2.000000e+00f, inverse[(1)]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1536))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3072))]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4608))], 2.500000e-01f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6144))], 4.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 2.500000e-01f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], 4.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 2.500000e-01f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], 4.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 2.500000e-01f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], 4.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], 2.500000e-01f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], 4.000000e+00f, inverse[(2)]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 1536))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 3072))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 4608))], 1.250000e-01f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 6144))], -8.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 7680))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 1.250000e-01f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -8.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 16896))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 1.250000e-01f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -8.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 26112))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 1.250000e-01f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], -8.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 35328))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], 1.250000e-01f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], -8.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 44544))]);
  inverse[(4)] = 0.000000e+00f;
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 9216))], -1.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], -1.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -1.000000e+00f, inverse[(4)]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 18432))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))]);
  inverse[(4)] = (inverse[(4)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 27648))], 5.000000e-01f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 5.000000e-01f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 5.000000e-01f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 5.000000e-01f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], 5.000000e-01f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 36864))], -2.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -2.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -2.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], -2.000000e+00f, inverse[(4)]);
  inverse[(4)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], -2.000000e+00f, inverse[(4)]);
  inverse[(5)] = 0.000000e+00f;
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))] * -1.000000e+00f), -1.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 5.000000e-01f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), -2.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(5)]);
  inverse[(5)] = (inverse[(5)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 5.000000e-01f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -2.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 5.000000e-01f), -1.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 5.000000e-01f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 5.000000e-01f), 5.000000e-01f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 5.000000e-01f), -2.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * -2.000000e+00f), -1.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -2.000000e+00f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -2.000000e+00f), 5.000000e-01f, inverse[(5)]);
  inverse[(5)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -2.000000e+00f), -2.000000e+00f, inverse[(5)]);
  inverse[(6)] = 0.000000e+00f;
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 2.500000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), 4.000000e+00f, inverse[(6)]);
  inverse[(6)] = (inverse[(6)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(6)] = (inverse[(6)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 2.500000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], 4.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 5.000000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 5.000000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 5.000000e-01f), 2.500000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 5.000000e-01f), 4.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -2.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -2.000000e+00f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -2.000000e+00f), 2.500000e-01f, inverse[(6)]);
  inverse[(6)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -2.000000e+00f), 4.000000e+00f, inverse[(6)]);
  inverse[(7)] = 0.000000e+00f;
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))] * -1.000000e+00f), -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 1.250000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), -8.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 16896))], -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = (inverse[(7)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 1.250000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -8.000000e+00f, inverse[(7)]);
  inverse[(7)] = (inverse[(7)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 26112))]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 5.000000e-01f), -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 5.000000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 5.000000e-01f), 1.250000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 5.000000e-01f), -8.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 35328))], 5.000000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * -2.000000e+00f), -1.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -2.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -2.000000e+00f), 1.250000e-01f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -2.000000e+00f), -8.000000e+00f, inverse[(7)]);
  inverse[(7)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 44544))], -2.000000e+00f, inverse[(7)]);
  inverse[(8)] = 0.000000e+00f;
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 9216))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 18432))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))]);
  inverse[(8)] = (inverse[(8)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 27648))], 2.500000e-01f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 2.500000e-01f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 2.500000e-01f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 2.500000e-01f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], 2.500000e-01f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 36864))], 4.000000e+00f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], 4.000000e+00f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], 4.000000e+00f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], 4.000000e+00f, inverse[(8)]);
  inverse[(8)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], 4.000000e+00f, inverse[(8)]);
  inverse[(9)] = 0.000000e+00f;
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(9)]);
  inverse[(9)] = (inverse[(9)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 5.000000e-01f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -2.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(9)]);
  inverse[(9)] = (inverse[(9)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 5.000000e-01f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -2.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 2.500000e-01f), -1.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 2.500000e-01f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 2.500000e-01f), 5.000000e-01f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 2.500000e-01f), -2.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * 4.000000e+00f), -1.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], 4.000000e+00f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * 4.000000e+00f), 5.000000e-01f, inverse[(9)]);
  inverse[(9)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * 4.000000e+00f), -2.000000e+00f, inverse[(9)]);
  inverse[(10)] = 0.000000e+00f;
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))]);
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], 4.000000e+00f, inverse[(10)]);
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(10)] = (inverse[(10)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], 4.000000e+00f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 2.500000e-01f), 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 2.500000e-01f), 4.000000e+00f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], 4.000000e+00f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], 4.000000e+00f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * 4.000000e+00f), 2.500000e-01f, inverse[(10)]);
  inverse[(10)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * 4.000000e+00f), 4.000000e+00f, inverse[(10)]);
  inverse[(11)] = 0.000000e+00f;
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(11)]);
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], 1.250000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -8.000000e+00f, inverse[(11)]);
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 16896))]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(11)]);
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 1.250000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -8.000000e+00f, inverse[(11)]);
  inverse[(11)] = (inverse[(11)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 26112))]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 2.500000e-01f), -1.000000e+00f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 2.500000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 2.500000e-01f), 1.250000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 2.500000e-01f), -8.000000e+00f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 35328))], 2.500000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * 4.000000e+00f), -1.000000e+00f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], 4.000000e+00f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * 4.000000e+00f), 1.250000e-01f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * 4.000000e+00f), -8.000000e+00f, inverse[(11)]);
  inverse[(11)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 44544))], 4.000000e+00f, inverse[(11)]);
  inverse[(12)] = 0.000000e+00f;
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 9216))], -1.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))], -1.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))], -1.000000e+00f, inverse[(12)]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 18432))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 27648))], 1.250000e-01f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 1.250000e-01f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 1.250000e-01f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))], 1.250000e-01f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))], 1.250000e-01f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 36864))], -8.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -8.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -8.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))], -8.000000e+00f, inverse[(12)]);
  inverse[(12)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))], -8.000000e+00f, inverse[(12)]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 46080))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 47616))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 49152))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 50688))]);
  inverse[(12)] = (inverse[(12)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 52224))]);
  inverse[(13)] = 0.000000e+00f;
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))] * -1.000000e+00f), -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 5.000000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), -2.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = (inverse[(13)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 5.000000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -2.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 1.250000e-01f), -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 1.250000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 1.250000e-01f), 5.000000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 1.250000e-01f), -2.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * -8.000000e+00f), -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -8.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -8.000000e+00f), 5.000000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -8.000000e+00f), -2.000000e+00f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 47616))], -1.000000e+00f, inverse[(13)]);
  inverse[(13)] = (inverse[(13)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 49152))]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 50688))], 5.000000e-01f, inverse[(13)]);
  inverse[(13)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 52224))], -2.000000e+00f, inverse[(13)]);
  inverse[(14)] = 0.000000e+00f;
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))], -1.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 2.500000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), 4.000000e+00f, inverse[(14)]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 2.500000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], 4.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))], 1.250000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 1.250000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 1.250000e-01f), 2.500000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 1.250000e-01f), 4.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))], -8.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -8.000000e+00f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -8.000000e+00f), 2.500000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -8.000000e+00f), 4.000000e+00f, inverse[(14)]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 47616))]);
  inverse[(14)] = (inverse[(14)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 49152))]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 50688))], 2.500000e-01f, inverse[(14)]);
  inverse[(14)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 52224))], 4.000000e+00f, inverse[(14)]);
  inverse[(15)] = 0.000000e+00f;
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 10752))] * -1.000000e+00f), -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 12288))], -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 13824))] * -1.000000e+00f), 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 15360))] * -1.000000e+00f), -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 16896))], -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 19968))], -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 21504))]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 23040))], 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 24576))], -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 26112))]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 29184))] * 1.250000e-01f), -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 30720))], 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 32256))] * 1.250000e-01f), 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 33792))] * 1.250000e-01f), -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 35328))], 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 38400))] * -8.000000e+00f), -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 39936))], -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 41472))] * -8.000000e+00f), 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 43008))] * -8.000000e+00f), -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 44544))], -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 47616))], -1.000000e+00f, inverse[(15)]);
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 49152))]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 50688))], 1.250000e-01f, inverse[(15)]);
  inverse[(15)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 52224))], -8.000000e+00f, inverse[(15)]);
  inverse[(15)] = (inverse[(15)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 53760))]);
  for (int ax2_inner = 0; ax2_inner < 4; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 4; ++ax3_inner) {
      T_relu[((((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 1) * 32)) + (ax2_inner * 8)) + ((((int)threadIdx.x) & 1) * 4)) + ax3_inner))] = max((inverse[(((ax2_inner * 4) + ax3_inner))] + placeholder[(((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 2)))]), 0.000000e+00f);
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_25_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[1190];
  __shared__ float placeholder_shared[2240];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1190) {
      if (((int)threadIdx.x) < 13) {
        pad_temp_shared[(((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)))] = (((3 <= (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119) / 17) + ((int)blockIdx.y))) && ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) / 119) * 289)) + (((int)blockIdx.y) * 17)) + (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1189) {
      if (((int)threadIdx.x) < 13) {
        pad_temp_shared[((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1))] = (((3 <= ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 1) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) < 1188) {
      if (((int)threadIdx.x) < 12) {
        pad_temp_shared[((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2))] = (((3 <= ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119) / 17) + ((int)blockIdx.y))) && (((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119) / 17) + ((int)blockIdx.y)) < 20)) ? placeholder[((((((rc_outer * 2890) + (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) / 119) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + 2) % 119)) - 51))] : 0.000000e+00f);
      }
    }
    if (((((int)threadIdx.x) / 14) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + ((((int)threadIdx.x) * 5) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2240) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[(((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)))] = placeholder1[(((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 1) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 1) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2239) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 1))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 1))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 2) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 2) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2238) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 2))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 2))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 3) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 3) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2237) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 3))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 3))];
          }
        }
      }
    }
    if (((((((int)threadIdx.x) * 5) + 4) / 70) + ((int)threadIdx.z)) < 32) {
      if (((((int)threadIdx.z) * 10) + (((((int)threadIdx.x) * 5) + 4) / 7)) < 320) {
        if (((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) < 2236) {
          if (((int)threadIdx.x) < 14) {
            placeholder_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 5)) + 4))] = placeholder1[((((((((int)blockIdx.z) * 35840) + (((int)threadIdx.z) * 1120)) + (rc_outer * 70)) + (((int)threadIdx.x) * 5)) + 4))];
          }
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 70))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 17))], placeholder_shared[(((((int)threadIdx.z) * 70) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 34))], placeholder_shared[(((((int)threadIdx.z) * 70) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 70) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 68))], placeholder_shared[(((((int)threadIdx.z) * 70) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 85))], placeholder_shared[(((((int)threadIdx.z) * 70) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 102))], placeholder_shared[(((((int)threadIdx.z) * 70) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 70) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 136))], placeholder_shared[(((((int)threadIdx.z) * 70) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 153))], placeholder_shared[(((((int)threadIdx.z) * 70) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 170))], placeholder_shared[(((((int)threadIdx.z) * 70) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 70) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 204))], placeholder_shared[(((((int)threadIdx.z) * 70) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 221))], placeholder_shared[(((((int)threadIdx.z) * 70) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 238))], placeholder_shared[(((((int)threadIdx.z) * 70) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 70) + 15))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 272))], placeholder_shared[(((((int)threadIdx.z) * 70) + 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 289))], placeholder_shared[(((((int)threadIdx.z) * 70) + 17))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 306))], placeholder_shared[(((((int)threadIdx.z) * 70) + 18))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 323))], placeholder_shared[(((((int)threadIdx.z) * 70) + 19))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 340))], placeholder_shared[(((((int)threadIdx.z) * 70) + 20))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 357))], placeholder_shared[(((((int)threadIdx.z) * 70) + 21))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 374))], placeholder_shared[(((((int)threadIdx.z) * 70) + 22))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 391))], placeholder_shared[(((((int)threadIdx.z) * 70) + 23))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 408))], placeholder_shared[(((((int)threadIdx.z) * 70) + 24))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 425))], placeholder_shared[(((((int)threadIdx.z) * 70) + 25))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 442))], placeholder_shared[(((((int)threadIdx.z) * 70) + 26))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 459))], placeholder_shared[(((((int)threadIdx.z) * 70) + 27))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 476))], placeholder_shared[(((((int)threadIdx.z) * 70) + 28))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 493))], placeholder_shared[(((((int)threadIdx.z) * 70) + 29))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 510))], placeholder_shared[(((((int)threadIdx.z) * 70) + 30))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 527))], placeholder_shared[(((((int)threadIdx.z) * 70) + 31))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 544))], placeholder_shared[(((((int)threadIdx.z) * 70) + 32))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 561))], placeholder_shared[(((((int)threadIdx.z) * 70) + 33))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 578))], placeholder_shared[(((((int)threadIdx.z) * 70) + 34))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 595))], placeholder_shared[(((((int)threadIdx.z) * 70) + 35))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 612))], placeholder_shared[(((((int)threadIdx.z) * 70) + 36))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 629))], placeholder_shared[(((((int)threadIdx.z) * 70) + 37))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 646))], placeholder_shared[(((((int)threadIdx.z) * 70) + 38))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 663))], placeholder_shared[(((((int)threadIdx.z) * 70) + 39))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 680))], placeholder_shared[(((((int)threadIdx.z) * 70) + 40))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 697))], placeholder_shared[(((((int)threadIdx.z) * 70) + 41))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 714))], placeholder_shared[(((((int)threadIdx.z) * 70) + 42))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 731))], placeholder_shared[(((((int)threadIdx.z) * 70) + 43))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 748))], placeholder_shared[(((((int)threadIdx.z) * 70) + 44))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 765))], placeholder_shared[(((((int)threadIdx.z) * 70) + 45))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 782))], placeholder_shared[(((((int)threadIdx.z) * 70) + 46))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 799))], placeholder_shared[(((((int)threadIdx.z) * 70) + 47))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 816))], placeholder_shared[(((((int)threadIdx.z) * 70) + 48))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 833))], placeholder_shared[(((((int)threadIdx.z) * 70) + 49))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 850))], placeholder_shared[(((((int)threadIdx.z) * 70) + 50))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 867))], placeholder_shared[(((((int)threadIdx.z) * 70) + 51))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 884))], placeholder_shared[(((((int)threadIdx.z) * 70) + 52))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 901))], placeholder_shared[(((((int)threadIdx.z) * 70) + 53))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 918))], placeholder_shared[(((((int)threadIdx.z) * 70) + 54))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 935))], placeholder_shared[(((((int)threadIdx.z) * 70) + 55))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 952))], placeholder_shared[(((((int)threadIdx.z) * 70) + 56))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 969))], placeholder_shared[(((((int)threadIdx.z) * 70) + 57))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 986))], placeholder_shared[(((((int)threadIdx.z) * 70) + 58))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1003))], placeholder_shared[(((((int)threadIdx.z) * 70) + 59))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1020))], placeholder_shared[(((((int)threadIdx.z) * 70) + 60))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1037))], placeholder_shared[(((((int)threadIdx.z) * 70) + 61))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1054))], placeholder_shared[(((((int)threadIdx.z) * 70) + 62))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1071))], placeholder_shared[(((((int)threadIdx.z) * 70) + 63))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 70) + 64))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1105))], placeholder_shared[(((((int)threadIdx.z) * 70) + 65))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1122))], placeholder_shared[(((((int)threadIdx.z) * 70) + 66))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1139))], placeholder_shared[(((((int)threadIdx.z) * 70) + 67))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1156))], placeholder_shared[(((((int)threadIdx.z) * 70) + 68))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 1173))], placeholder_shared[(((((int)threadIdx.z) * 70) + 69))], compute[(0)]);
  }
  T_relu[(((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_avg_pool2d_6_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 8; ++dh) {
    for (int dw = 0; dw < 8; ++dw) {
      tensor1[(0)] = (tensor1[(0)] + placeholder[(((((((int)blockIdx.x) * 16384) + (((int)threadIdx.x) * 64)) + (dh * 8)) + dw))]);
    }
  }
  tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.562500e-02f);
}

__device__ void fused_nn_conv2d_add_nn_relu_35_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[1024];
  __shared__ float placeholder_shared[512];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)))] = placeholder[((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 1))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 1))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 2))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 2))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 3))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 3))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 4))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 4))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 5))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 5))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 6))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 6))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 7))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 7))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 8))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 8))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 9))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 9))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 10))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 10))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 11))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 11))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 12))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 12))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 13))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 13))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 14))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 14))];
    pad_temp_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + 15))] = placeholder[(((((((rc_outer * 4096) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 64)) + (((int)blockIdx.y) * 16)) + 15))];
    placeholder_shared[((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder1[((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 1))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 2))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 3))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 4))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 5))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 6))];
    placeholder_shared[(((((((int)threadIdx.z) * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 4096)) + (((int)threadIdx.y) * 2048)) + (rc_outer * 64)) + (((int)threadIdx.x) * 8)) + 7))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 128))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 128) + 64))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 16))], placeholder_shared[(((((int)threadIdx.z) * 128) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 16))], placeholder_shared[(((((int)threadIdx.z) * 128) + 65))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 128) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 32))], placeholder_shared[(((((int)threadIdx.z) * 128) + 66))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 128) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 48))], placeholder_shared[(((((int)threadIdx.z) * 128) + 67))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 128) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 128) + 68))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 80))], placeholder_shared[(((((int)threadIdx.z) * 128) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 80))], placeholder_shared[(((((int)threadIdx.z) * 128) + 69))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 128) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 96))], placeholder_shared[(((((int)threadIdx.z) * 128) + 70))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 128) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 112))], placeholder_shared[(((((int)threadIdx.z) * 128) + 71))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 128) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 128) + 72))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 144))], placeholder_shared[(((((int)threadIdx.z) * 128) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 144))], placeholder_shared[(((((int)threadIdx.z) * 128) + 73))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 128) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 160))], placeholder_shared[(((((int)threadIdx.z) * 128) + 74))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 176))], placeholder_shared[(((((int)threadIdx.z) * 128) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 176))], placeholder_shared[(((((int)threadIdx.z) * 128) + 75))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 128) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 128) + 76))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 128) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 208))], placeholder_shared[(((((int)threadIdx.z) * 128) + 77))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 128) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 224))], placeholder_shared[(((((int)threadIdx.z) * 128) + 78))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 128) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 240))], placeholder_shared[(((((int)threadIdx.z) * 128) + 79))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 128) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 128) + 80))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 128) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 272))], placeholder_shared[(((((int)threadIdx.z) * 128) + 81))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 128) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 288))], placeholder_shared[(((((int)threadIdx.z) * 128) + 82))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 304))], placeholder_shared[(((((int)threadIdx.z) * 128) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 304))], placeholder_shared[(((((int)threadIdx.z) * 128) + 83))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 128) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 128) + 84))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 336))], placeholder_shared[(((((int)threadIdx.z) * 128) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 336))], placeholder_shared[(((((int)threadIdx.z) * 128) + 85))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 128) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 352))], placeholder_shared[(((((int)threadIdx.z) * 128) + 86))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 368))], placeholder_shared[(((((int)threadIdx.z) * 128) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 368))], placeholder_shared[(((((int)threadIdx.z) * 128) + 87))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 128) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 128) + 88))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 400))], placeholder_shared[(((((int)threadIdx.z) * 128) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 400))], placeholder_shared[(((((int)threadIdx.z) * 128) + 89))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 128) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 416))], placeholder_shared[(((((int)threadIdx.z) * 128) + 90))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 432))], placeholder_shared[(((((int)threadIdx.z) * 128) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 432))], placeholder_shared[(((((int)threadIdx.z) * 128) + 91))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 128) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 128) + 92))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 464))], placeholder_shared[(((((int)threadIdx.z) * 128) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 464))], placeholder_shared[(((((int)threadIdx.z) * 128) + 93))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 128) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 480))], placeholder_shared[(((((int)threadIdx.z) * 128) + 94))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 496))], placeholder_shared[(((((int)threadIdx.z) * 128) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 496))], placeholder_shared[(((((int)threadIdx.z) * 128) + 95))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 128) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 128) + 96))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 128) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 528))], placeholder_shared[(((((int)threadIdx.z) * 128) + 97))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 128) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 544))], placeholder_shared[(((((int)threadIdx.z) * 128) + 98))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 560))], placeholder_shared[(((((int)threadIdx.z) * 128) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 560))], placeholder_shared[(((((int)threadIdx.z) * 128) + 99))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 128) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 128) + 100))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 592))], placeholder_shared[(((((int)threadIdx.z) * 128) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 592))], placeholder_shared[(((((int)threadIdx.z) * 128) + 101))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 608))], placeholder_shared[(((((int)threadIdx.z) * 128) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 608))], placeholder_shared[(((((int)threadIdx.z) * 128) + 102))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 624))], placeholder_shared[(((((int)threadIdx.z) * 128) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 624))], placeholder_shared[(((((int)threadIdx.z) * 128) + 103))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 128) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 128) + 104))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 656))], placeholder_shared[(((((int)threadIdx.z) * 128) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 656))], placeholder_shared[(((((int)threadIdx.z) * 128) + 105))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 672))], placeholder_shared[(((((int)threadIdx.z) * 128) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 672))], placeholder_shared[(((((int)threadIdx.z) * 128) + 106))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 688))], placeholder_shared[(((((int)threadIdx.z) * 128) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 688))], placeholder_shared[(((((int)threadIdx.z) * 128) + 107))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 128) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 128) + 108))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 720))], placeholder_shared[(((((int)threadIdx.z) * 128) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 720))], placeholder_shared[(((((int)threadIdx.z) * 128) + 109))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 736))], placeholder_shared[(((((int)threadIdx.z) * 128) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 736))], placeholder_shared[(((((int)threadIdx.z) * 128) + 110))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 752))], placeholder_shared[(((((int)threadIdx.z) * 128) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 752))], placeholder_shared[(((((int)threadIdx.z) * 128) + 111))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 128) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 128) + 112))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 128) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 784))], placeholder_shared[(((((int)threadIdx.z) * 128) + 113))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 128) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 800))], placeholder_shared[(((((int)threadIdx.z) * 128) + 114))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 816))], placeholder_shared[(((((int)threadIdx.z) * 128) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 816))], placeholder_shared[(((((int)threadIdx.z) * 128) + 115))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 128) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 128) + 116))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 848))], placeholder_shared[(((((int)threadIdx.z) * 128) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 848))], placeholder_shared[(((((int)threadIdx.z) * 128) + 117))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 864))], placeholder_shared[(((((int)threadIdx.z) * 128) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 864))], placeholder_shared[(((((int)threadIdx.z) * 128) + 118))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 880))], placeholder_shared[(((((int)threadIdx.z) * 128) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 880))], placeholder_shared[(((((int)threadIdx.z) * 128) + 119))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 128) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 128) + 120))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 912))], placeholder_shared[(((((int)threadIdx.z) * 128) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 912))], placeholder_shared[(((((int)threadIdx.z) * 128) + 121))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 928))], placeholder_shared[(((((int)threadIdx.z) * 128) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 928))], placeholder_shared[(((((int)threadIdx.z) * 128) + 122))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 944))], placeholder_shared[(((((int)threadIdx.z) * 128) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 944))], placeholder_shared[(((((int)threadIdx.z) * 128) + 123))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 128) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 128) + 124))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 976))], placeholder_shared[(((((int)threadIdx.z) * 128) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 976))], placeholder_shared[(((((int)threadIdx.z) * 128) + 125))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 992))], placeholder_shared[(((((int)threadIdx.z) * 128) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 992))], placeholder_shared[(((((int)threadIdx.z) * 128) + 126))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1008))], placeholder_shared[(((((int)threadIdx.z) * 128) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1008))], placeholder_shared[(((((int)threadIdx.z) * 128) + 127))], compute[(1)]);
  }
  T_relu[((((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 128)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[(((((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 128)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 64))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 8) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
}

__device__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel2_device(float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder){
  float inverse[4];
  inverse[(0)] = 0.000000e+00f;
  inverse[(0)] = (inverse[(0)] + bgemm[(((((int)blockIdx.x) * 128) + ((int)threadIdx.x)))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 31104))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 62208))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 124416))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))]);
  inverse[(0)] = (inverse[(0)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(1)] = 0.000000e+00f;
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 31104))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 62208))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 93312))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 217728))]);
  inverse[(1)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))], -1.000000e+00f, inverse[(1)]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(1)] = (inverse[(1)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 342144))]);
  inverse[(2)] = 0.000000e+00f;
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 124416))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))], -1.000000e+00f, inverse[(2)]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 248832))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 373248))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 404352))]);
  inverse[(2)] = (inverse[(2)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 435456))]);
  inverse[(3)] = 0.000000e+00f;
  inverse[(3)] = __ocml_fma_f32((bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 155520))] * -1.000000e+00f), -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 186624))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 217728))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 279936))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 311040))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 342144))]);
  inverse[(3)] = __ocml_fma_f32(bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 404352))], -1.000000e+00f, inverse[(3)]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 435456))]);
  inverse[(3)] = (inverse[(3)] + bgemm[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) + 466560))]);
  for (int ax2_inner = 0; ax2_inner < 2; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      if (((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 2) + ax2_inner) < 35) {
        if ((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2) + ax3_inner) < 35) {
          T_relu[(((((((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324) * 1225) + (((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 324) / 18) * 70)) + (ax2_inner * 35)) + ((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) % 18) * 2)) + ax3_inner))] = max((inverse[(((ax2_inner * 2) + ax3_inner))] + placeholder[((((((int)blockIdx.x) * 128) + ((int)threadIdx.x)) / 324))]), 0.000000e+00f);
        }
      }
    }
  }
}

__device__ void fused_nn_avg_pool2d_7_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor1[1];
  tensor1[(0)] = 0.000000e+00f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 235200) {
        tensor1[(0)] = (tensor1[(0)] + (((((1 <= (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh)) && ((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) + dh) < 36)) && (1 <= (dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)))) && ((dw + (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35)) < 36)) ? placeholder[((((((((int)blockIdx.x) * 256) + (dh * 35)) + ((int)threadIdx.x)) + dw) - 36))] : 0.000000e+00f));
      }
    }
  }
  if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 235200) {
    tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = (tensor1[(0)] * 1.111111e-01f);
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_1_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[512];
  compute[(0)] = 0.000000e+00f;
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[(((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4096))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4097))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4098))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4099))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4100))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4101))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4102))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4103))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 64))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8192))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8193))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8194))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8195))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8196))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8197))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8198))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 8199))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 128))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12288))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12289))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12290))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12291))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12292))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12293))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12294))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 12295))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 192))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16384))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16385))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16386))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16387))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16388))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16389))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16390))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 16391))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 256))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20480))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20481))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20482))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20483))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20484))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20485))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20486))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 20487))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 320))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24576))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24577))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24578))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24579))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24580))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24581))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24582))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 24583))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 384))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28672))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28673))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28674))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28675))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28676))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28677))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28678))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 28679))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 448))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32768))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32769))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32770))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32771))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32772))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32773))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32774))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 32775))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 512))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36864))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36865))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36866))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36867))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36868))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36869))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36870))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 36871))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 576))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40960))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40961))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40962))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40963))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40964))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40965))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40966))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 40967))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 640))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45056))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45057))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45058))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45059))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45060))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45061))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45062))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 45063))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 704))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49152))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49153))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49154))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49155))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49156))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49157))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49158))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 49159))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 768))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53248))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53249))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53250))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53251))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53252))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53253))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53254))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 53255))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 832))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57344))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57345))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57346))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57347))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57348))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57349))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57350))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 57351))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 896))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61440))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61441))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61442))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61443))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61444))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61445))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61446))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 61447))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 960))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65536))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65537))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65538))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65539))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65540))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65541))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65542))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 65543))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 1024))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69632))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69633))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69634))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69635))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69636))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69637))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69638))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 69639))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 1088))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73728))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73729))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73730))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73731))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73732))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73733))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73734))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 73735))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 1152))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  __syncthreads();
  pad_temp_shared[((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77824))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 1))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77825))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 2))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77826))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 3))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77827))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 4))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77828))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 5))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77829))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 6))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77830))];
  pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 7))] = placeholder[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + 77831))];
  placeholder_shared[((((((int)threadIdx.z) * 64) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 10240) + (((int)threadIdx.z) * 1280)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)) + 1216))];
  __syncthreads();
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 8) + ((int)threadIdx.x)))], placeholder_shared[((((int)threadIdx.z) * 64))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 64))], placeholder_shared[(((((int)threadIdx.z) * 64) + 1))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 128))], placeholder_shared[(((((int)threadIdx.z) * 64) + 2))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 192))], placeholder_shared[(((((int)threadIdx.z) * 64) + 3))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 256))], placeholder_shared[(((((int)threadIdx.z) * 64) + 4))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 320))], placeholder_shared[(((((int)threadIdx.z) * 64) + 5))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 384))], placeholder_shared[(((((int)threadIdx.z) * 64) + 6))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 448))], placeholder_shared[(((((int)threadIdx.z) * 64) + 7))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 512))], placeholder_shared[(((((int)threadIdx.z) * 64) + 8))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 576))], placeholder_shared[(((((int)threadIdx.z) * 64) + 9))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 640))], placeholder_shared[(((((int)threadIdx.z) * 64) + 10))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 704))], placeholder_shared[(((((int)threadIdx.z) * 64) + 11))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 768))], placeholder_shared[(((((int)threadIdx.z) * 64) + 12))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 832))], placeholder_shared[(((((int)threadIdx.z) * 64) + 13))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 896))], placeholder_shared[(((((int)threadIdx.z) * 64) + 14))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 960))], placeholder_shared[(((((int)threadIdx.z) * 64) + 15))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1024))], placeholder_shared[(((((int)threadIdx.z) * 64) + 16))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1088))], placeholder_shared[(((((int)threadIdx.z) * 64) + 17))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1152))], placeholder_shared[(((((int)threadIdx.z) * 64) + 18))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1216))], placeholder_shared[(((((int)threadIdx.z) * 64) + 19))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1280))], placeholder_shared[(((((int)threadIdx.z) * 64) + 20))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1344))], placeholder_shared[(((((int)threadIdx.z) * 64) + 21))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1408))], placeholder_shared[(((((int)threadIdx.z) * 64) + 22))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1472))], placeholder_shared[(((((int)threadIdx.z) * 64) + 23))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1536))], placeholder_shared[(((((int)threadIdx.z) * 64) + 24))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1600))], placeholder_shared[(((((int)threadIdx.z) * 64) + 25))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1664))], placeholder_shared[(((((int)threadIdx.z) * 64) + 26))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1728))], placeholder_shared[(((((int)threadIdx.z) * 64) + 27))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1792))], placeholder_shared[(((((int)threadIdx.z) * 64) + 28))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1856))], placeholder_shared[(((((int)threadIdx.z) * 64) + 29))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1920))], placeholder_shared[(((((int)threadIdx.z) * 64) + 30))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 1984))], placeholder_shared[(((((int)threadIdx.z) * 64) + 31))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2048))], placeholder_shared[(((((int)threadIdx.z) * 64) + 32))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2112))], placeholder_shared[(((((int)threadIdx.z) * 64) + 33))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2176))], placeholder_shared[(((((int)threadIdx.z) * 64) + 34))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2240))], placeholder_shared[(((((int)threadIdx.z) * 64) + 35))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2304))], placeholder_shared[(((((int)threadIdx.z) * 64) + 36))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2368))], placeholder_shared[(((((int)threadIdx.z) * 64) + 37))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2432))], placeholder_shared[(((((int)threadIdx.z) * 64) + 38))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2496))], placeholder_shared[(((((int)threadIdx.z) * 64) + 39))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2560))], placeholder_shared[(((((int)threadIdx.z) * 64) + 40))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2624))], placeholder_shared[(((((int)threadIdx.z) * 64) + 41))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2688))], placeholder_shared[(((((int)threadIdx.z) * 64) + 42))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2752))], placeholder_shared[(((((int)threadIdx.z) * 64) + 43))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2816))], placeholder_shared[(((((int)threadIdx.z) * 64) + 44))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2880))], placeholder_shared[(((((int)threadIdx.z) * 64) + 45))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 2944))], placeholder_shared[(((((int)threadIdx.z) * 64) + 46))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3008))], placeholder_shared[(((((int)threadIdx.z) * 64) + 47))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3072))], placeholder_shared[(((((int)threadIdx.z) * 64) + 48))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3136))], placeholder_shared[(((((int)threadIdx.z) * 64) + 49))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3200))], placeholder_shared[(((((int)threadIdx.z) * 64) + 50))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3264))], placeholder_shared[(((((int)threadIdx.z) * 64) + 51))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3328))], placeholder_shared[(((((int)threadIdx.z) * 64) + 52))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3392))], placeholder_shared[(((((int)threadIdx.z) * 64) + 53))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3456))], placeholder_shared[(((((int)threadIdx.z) * 64) + 54))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3520))], placeholder_shared[(((((int)threadIdx.z) * 64) + 55))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3584))], placeholder_shared[(((((int)threadIdx.z) * 64) + 56))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3648))], placeholder_shared[(((((int)threadIdx.z) * 64) + 57))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3712))], placeholder_shared[(((((int)threadIdx.z) * 64) + 58))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3776))], placeholder_shared[(((((int)threadIdx.z) * 64) + 59))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3840))], placeholder_shared[(((((int)threadIdx.z) * 64) + 60))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3904))], placeholder_shared[(((((int)threadIdx.z) * 64) + 61))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 3968))], placeholder_shared[(((((int)threadIdx.z) * 64) + 62))], compute[(0)]);
  compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((((int)threadIdx.y) * 8) + ((int)threadIdx.x)) + 4032))], placeholder_shared[(((((int)threadIdx.z) * 64) + 63))], compute[(0)]);
  T_relu[(((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 64)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_18_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[272];
  __shared__ float placeholder_shared[256];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 48; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[(((((int)threadIdx.z) * 17) + ((int)threadIdx.x)))] = placeholder[(((((rc_outer * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))];
    if (((((int)threadIdx.x) >> 4) + ((int)threadIdx.z)) < 16) {
      if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 256) {
        if (((int)threadIdx.x) < 16) {
          placeholder_shared[(((((int)threadIdx.z) * 16) + ((int)threadIdx.x)))] = placeholder1[(((((((int)blockIdx.z) * 12288) + (((int)threadIdx.z) * 768)) + (rc_outer * 16)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((int)threadIdx.x))], placeholder_shared[((((int)threadIdx.z) * 16))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 17))], placeholder_shared[(((((int)threadIdx.z) * 16) + 1))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 34))], placeholder_shared[(((((int)threadIdx.z) * 16) + 2))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 51))], placeholder_shared[(((((int)threadIdx.z) * 16) + 3))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 68))], placeholder_shared[(((((int)threadIdx.z) * 16) + 4))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 85))], placeholder_shared[(((((int)threadIdx.z) * 16) + 5))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 102))], placeholder_shared[(((((int)threadIdx.z) * 16) + 6))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 119))], placeholder_shared[(((((int)threadIdx.z) * 16) + 7))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 136))], placeholder_shared[(((((int)threadIdx.z) * 16) + 8))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 153))], placeholder_shared[(((((int)threadIdx.z) * 16) + 9))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 170))], placeholder_shared[(((((int)threadIdx.z) * 16) + 10))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 187))], placeholder_shared[(((((int)threadIdx.z) * 16) + 11))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 204))], placeholder_shared[(((((int)threadIdx.z) * 16) + 12))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 221))], placeholder_shared[(((((int)threadIdx.z) * 16) + 13))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 238))], placeholder_shared[(((((int)threadIdx.z) * 16) + 14))], compute[(0)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.x) + 255))], placeholder_shared[(((((int)threadIdx.z) * 16) + 15))], compute[(0)]);
  }
  T_relu[(((((((int)blockIdx.z) * 4624) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_28_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[816];
  __shared__ float placeholder_shared[2304];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    pad_temp_shared[(((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.y) * 13) / 3) * 17)) + (((int)blockIdx.x) * 2)) + ((((int)threadIdx.y) * 13) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 1))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 1) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 1) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 2))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 2) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 2) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 3))] = placeholder[(((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.y) * 13) / 3) * 17)) + (((int)blockIdx.x) * 2)) + ((((int)threadIdx.y) * 13) % 3)) + 17))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 4))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 4) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 1) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 5))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 5) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 2) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 6))] = placeholder[(((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.y) * 13) / 3) * 17)) + (((int)blockIdx.x) * 2)) + ((((int)threadIdx.y) * 13) % 3)) + 34))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 7))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 7) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 1) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 8))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 8) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 2) % 3)))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 9))] = placeholder[(((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.y) * 13) / 3) * 17)) + (((int)blockIdx.x) * 2)) + ((((int)threadIdx.y) * 13) % 3)) + 51))];
    pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 10))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 10) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 1) % 3)))];
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.y) * 13) + 11) / 51)) < 16) {
      if (((((int)threadIdx.z) * 34) + (((((int)threadIdx.y) * 13) + 11) / 3)) < 272) {
        if (((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) < 805) {
          if (((int)threadIdx.y) < 7) {
            pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 11))] = placeholder[((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + ((((((int)threadIdx.y) * 13) + 11) / 3) * 17)) + (((int)blockIdx.x) * 2)) + (((((int)threadIdx.y) * 13) + 2) % 3)))];
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.y) * 13) + 12) / 51)) < 16) {
      if (((((int)threadIdx.z) * 34) + ((((int)threadIdx.y) * 13) / 3)) < 268) {
        if (((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) < 804) {
          if (((int)threadIdx.y) < 7) {
            pad_temp_shared[((((((int)threadIdx.z) * 102) + (((int)threadIdx.y) * 13)) + 12))] = placeholder[(((((((rc_outer * 4624) + (((int)threadIdx.z) * 578)) + (((((int)threadIdx.y) * 13) / 3) * 17)) + (((int)blockIdx.x) * 2)) + ((((int)threadIdx.y) * 13) % 3)) + 68))];
          }
        }
      }
    }
    placeholder_shared[(((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)))] = placeholder1[((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 1))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 1))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 2))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 2))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 3))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 3))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 4))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 4))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 5))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 5))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 6))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 6))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 7))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 8))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((int)threadIdx.y) >> 2) * 1728)) + (rc_outer * 144)) + ((((int)threadIdx.y) & 3) * 36)) + 8))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 9))] = placeholder1[((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 10))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 1))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 11))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 2))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 12))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 3))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 13))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 4))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 14))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 5))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 15))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 6))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 16))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 17))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 1) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 1) & 15) * 9)) + 8))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 18))] = placeholder1[((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 19))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 1))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 20))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 2))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 21))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 3))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 22))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 4))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 23))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 5))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 24))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 6))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 25))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 26))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 2) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 2) & 15) * 9)) + 8))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 27))] = placeholder1[((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 28))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 1))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 29))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 2))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 30))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 3))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 31))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 4))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 32))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 5))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 33))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 6))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 34))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 7))];
    placeholder_shared[((((((int)threadIdx.z) * 288) + (((int)threadIdx.y) * 36)) + 35))] = placeholder1[(((((((((int)blockIdx.z) * 27648) + (((int)threadIdx.z) * 3456)) + ((((((int)threadIdx.y) * 4) + 3) >> 4) * 1728)) + (rc_outer * 144)) + ((((((int)threadIdx.y) * 4) + 3) & 15) * 9)) + 8))];
    __syncthreads();
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.y) * 6))], placeholder_shared[((((int)threadIdx.z) * 288))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[((((int)threadIdx.y) * 6))], placeholder_shared[(((((int)threadIdx.z) * 288) + 144))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 1))], placeholder_shared[(((((int)threadIdx.z) * 288) + 1))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 1))], placeholder_shared[(((((int)threadIdx.z) * 288) + 145))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 2))], placeholder_shared[(((((int)threadIdx.z) * 288) + 2))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 2))], placeholder_shared[(((((int)threadIdx.z) * 288) + 146))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 3))], placeholder_shared[(((((int)threadIdx.z) * 288) + 3))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 3))], placeholder_shared[(((((int)threadIdx.z) * 288) + 147))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 4))], placeholder_shared[(((((int)threadIdx.z) * 288) + 4))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 4))], placeholder_shared[(((((int)threadIdx.z) * 288) + 148))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 5))], placeholder_shared[(((((int)threadIdx.z) * 288) + 5))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 5))], placeholder_shared[(((((int)threadIdx.z) * 288) + 149))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 6))], placeholder_shared[(((((int)threadIdx.z) * 288) + 6))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 6))], placeholder_shared[(((((int)threadIdx.z) * 288) + 150))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 7))], placeholder_shared[(((((int)threadIdx.z) * 288) + 7))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 7))], placeholder_shared[(((((int)threadIdx.z) * 288) + 151))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 8))], placeholder_shared[(((((int)threadIdx.z) * 288) + 8))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 8))], placeholder_shared[(((((int)threadIdx.z) * 288) + 152))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 51))], placeholder_shared[(((((int)threadIdx.z) * 288) + 9))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 51))], placeholder_shared[(((((int)threadIdx.z) * 288) + 153))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 52))], placeholder_shared[(((((int)threadIdx.z) * 288) + 10))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 52))], placeholder_shared[(((((int)threadIdx.z) * 288) + 154))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 53))], placeholder_shared[(((((int)threadIdx.z) * 288) + 11))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 53))], placeholder_shared[(((((int)threadIdx.z) * 288) + 155))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 54))], placeholder_shared[(((((int)threadIdx.z) * 288) + 12))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 54))], placeholder_shared[(((((int)threadIdx.z) * 288) + 156))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 55))], placeholder_shared[(((((int)threadIdx.z) * 288) + 13))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 55))], placeholder_shared[(((((int)threadIdx.z) * 288) + 157))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 56))], placeholder_shared[(((((int)threadIdx.z) * 288) + 14))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 56))], placeholder_shared[(((((int)threadIdx.z) * 288) + 158))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 57))], placeholder_shared[(((((int)threadIdx.z) * 288) + 15))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 57))], placeholder_shared[(((((int)threadIdx.z) * 288) + 159))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 58))], placeholder_shared[(((((int)threadIdx.z) * 288) + 16))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 58))], placeholder_shared[(((((int)threadIdx.z) * 288) + 160))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 59))], placeholder_shared[(((((int)threadIdx.z) * 288) + 17))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 59))], placeholder_shared[(((((int)threadIdx.z) * 288) + 161))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 102))], placeholder_shared[(((((int)threadIdx.z) * 288) + 18))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 102))], placeholder_shared[(((((int)threadIdx.z) * 288) + 162))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 103))], placeholder_shared[(((((int)threadIdx.z) * 288) + 19))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 103))], placeholder_shared[(((((int)threadIdx.z) * 288) + 163))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 104))], placeholder_shared[(((((int)threadIdx.z) * 288) + 20))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 104))], placeholder_shared[(((((int)threadIdx.z) * 288) + 164))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 105))], placeholder_shared[(((((int)threadIdx.z) * 288) + 21))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 105))], placeholder_shared[(((((int)threadIdx.z) * 288) + 165))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 106))], placeholder_shared[(((((int)threadIdx.z) * 288) + 22))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 106))], placeholder_shared[(((((int)threadIdx.z) * 288) + 166))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 107))], placeholder_shared[(((((int)threadIdx.z) * 288) + 23))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 107))], placeholder_shared[(((((int)threadIdx.z) * 288) + 167))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 108))], placeholder_shared[(((((int)threadIdx.z) * 288) + 24))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 108))], placeholder_shared[(((((int)threadIdx.z) * 288) + 168))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 109))], placeholder_shared[(((((int)threadIdx.z) * 288) + 25))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 109))], placeholder_shared[(((((int)threadIdx.z) * 288) + 169))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 110))], placeholder_shared[(((((int)threadIdx.z) * 288) + 26))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 110))], placeholder_shared[(((((int)threadIdx.z) * 288) + 170))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 153))], placeholder_shared[(((((int)threadIdx.z) * 288) + 27))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 153))], placeholder_shared[(((((int)threadIdx.z) * 288) + 171))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 154))], placeholder_shared[(((((int)threadIdx.z) * 288) + 28))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 154))], placeholder_shared[(((((int)threadIdx.z) * 288) + 172))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 155))], placeholder_shared[(((((int)threadIdx.z) * 288) + 29))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 155))], placeholder_shared[(((((int)threadIdx.z) * 288) + 173))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 156))], placeholder_shared[(((((int)threadIdx.z) * 288) + 30))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 156))], placeholder_shared[(((((int)threadIdx.z) * 288) + 174))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 157))], placeholder_shared[(((((int)threadIdx.z) * 288) + 31))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 157))], placeholder_shared[(((((int)threadIdx.z) * 288) + 175))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 158))], placeholder_shared[(((((int)threadIdx.z) * 288) + 32))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 158))], placeholder_shared[(((((int)threadIdx.z) * 288) + 176))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 159))], placeholder_shared[(((((int)threadIdx.z) * 288) + 33))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 159))], placeholder_shared[(((((int)threadIdx.z) * 288) + 177))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 160))], placeholder_shared[(((((int)threadIdx.z) * 288) + 34))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 160))], placeholder_shared[(((((int)threadIdx.z) * 288) + 178))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 161))], placeholder_shared[(((((int)threadIdx.z) * 288) + 35))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 161))], placeholder_shared[(((((int)threadIdx.z) * 288) + 179))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 204))], placeholder_shared[(((((int)threadIdx.z) * 288) + 36))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 204))], placeholder_shared[(((((int)threadIdx.z) * 288) + 180))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 205))], placeholder_shared[(((((int)threadIdx.z) * 288) + 37))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 205))], placeholder_shared[(((((int)threadIdx.z) * 288) + 181))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 206))], placeholder_shared[(((((int)threadIdx.z) * 288) + 38))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 206))], placeholder_shared[(((((int)threadIdx.z) * 288) + 182))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 207))], placeholder_shared[(((((int)threadIdx.z) * 288) + 39))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 207))], placeholder_shared[(((((int)threadIdx.z) * 288) + 183))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 208))], placeholder_shared[(((((int)threadIdx.z) * 288) + 40))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 208))], placeholder_shared[(((((int)threadIdx.z) * 288) + 184))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 209))], placeholder_shared[(((((int)threadIdx.z) * 288) + 41))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 209))], placeholder_shared[(((((int)threadIdx.z) * 288) + 185))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 210))], placeholder_shared[(((((int)threadIdx.z) * 288) + 42))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 210))], placeholder_shared[(((((int)threadIdx.z) * 288) + 186))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 211))], placeholder_shared[(((((int)threadIdx.z) * 288) + 43))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 211))], placeholder_shared[(((((int)threadIdx.z) * 288) + 187))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 212))], placeholder_shared[(((((int)threadIdx.z) * 288) + 44))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 212))], placeholder_shared[(((((int)threadIdx.z) * 288) + 188))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 255))], placeholder_shared[(((((int)threadIdx.z) * 288) + 45))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 255))], placeholder_shared[(((((int)threadIdx.z) * 288) + 189))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 256))], placeholder_shared[(((((int)threadIdx.z) * 288) + 46))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 256))], placeholder_shared[(((((int)threadIdx.z) * 288) + 190))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 257))], placeholder_shared[(((((int)threadIdx.z) * 288) + 47))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 257))], placeholder_shared[(((((int)threadIdx.z) * 288) + 191))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 258))], placeholder_shared[(((((int)threadIdx.z) * 288) + 48))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 258))], placeholder_shared[(((((int)threadIdx.z) * 288) + 192))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 259))], placeholder_shared[(((((int)threadIdx.z) * 288) + 49))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 259))], placeholder_shared[(((((int)threadIdx.z) * 288) + 193))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 260))], placeholder_shared[(((((int)threadIdx.z) * 288) + 50))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 260))], placeholder_shared[(((((int)threadIdx.z) * 288) + 194))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 261))], placeholder_shared[(((((int)threadIdx.z) * 288) + 51))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 261))], placeholder_shared[(((((int)threadIdx.z) * 288) + 195))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 262))], placeholder_shared[(((((int)threadIdx.z) * 288) + 52))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 262))], placeholder_shared[(((((int)threadIdx.z) * 288) + 196))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 263))], placeholder_shared[(((((int)threadIdx.z) * 288) + 53))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 263))], placeholder_shared[(((((int)threadIdx.z) * 288) + 197))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 306))], placeholder_shared[(((((int)threadIdx.z) * 288) + 54))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 306))], placeholder_shared[(((((int)threadIdx.z) * 288) + 198))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 307))], placeholder_shared[(((((int)threadIdx.z) * 288) + 55))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 307))], placeholder_shared[(((((int)threadIdx.z) * 288) + 199))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 308))], placeholder_shared[(((((int)threadIdx.z) * 288) + 56))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 308))], placeholder_shared[(((((int)threadIdx.z) * 288) + 200))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 309))], placeholder_shared[(((((int)threadIdx.z) * 288) + 57))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 309))], placeholder_shared[(((((int)threadIdx.z) * 288) + 201))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 310))], placeholder_shared[(((((int)threadIdx.z) * 288) + 58))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 310))], placeholder_shared[(((((int)threadIdx.z) * 288) + 202))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 311))], placeholder_shared[(((((int)threadIdx.z) * 288) + 59))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 311))], placeholder_shared[(((((int)threadIdx.z) * 288) + 203))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 312))], placeholder_shared[(((((int)threadIdx.z) * 288) + 60))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 312))], placeholder_shared[(((((int)threadIdx.z) * 288) + 204))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 313))], placeholder_shared[(((((int)threadIdx.z) * 288) + 61))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 313))], placeholder_shared[(((((int)threadIdx.z) * 288) + 205))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 314))], placeholder_shared[(((((int)threadIdx.z) * 288) + 62))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 314))], placeholder_shared[(((((int)threadIdx.z) * 288) + 206))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 357))], placeholder_shared[(((((int)threadIdx.z) * 288) + 63))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 357))], placeholder_shared[(((((int)threadIdx.z) * 288) + 207))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 358))], placeholder_shared[(((((int)threadIdx.z) * 288) + 64))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 358))], placeholder_shared[(((((int)threadIdx.z) * 288) + 208))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 359))], placeholder_shared[(((((int)threadIdx.z) * 288) + 65))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 359))], placeholder_shared[(((((int)threadIdx.z) * 288) + 209))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 360))], placeholder_shared[(((((int)threadIdx.z) * 288) + 66))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 360))], placeholder_shared[(((((int)threadIdx.z) * 288) + 210))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 361))], placeholder_shared[(((((int)threadIdx.z) * 288) + 67))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 361))], placeholder_shared[(((((int)threadIdx.z) * 288) + 211))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 362))], placeholder_shared[(((((int)threadIdx.z) * 288) + 68))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 362))], placeholder_shared[(((((int)threadIdx.z) * 288) + 212))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 363))], placeholder_shared[(((((int)threadIdx.z) * 288) + 69))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 363))], placeholder_shared[(((((int)threadIdx.z) * 288) + 213))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 364))], placeholder_shared[(((((int)threadIdx.z) * 288) + 70))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 364))], placeholder_shared[(((((int)threadIdx.z) * 288) + 214))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 365))], placeholder_shared[(((((int)threadIdx.z) * 288) + 71))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 365))], placeholder_shared[(((((int)threadIdx.z) * 288) + 215))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 408))], placeholder_shared[(((((int)threadIdx.z) * 288) + 72))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 408))], placeholder_shared[(((((int)threadIdx.z) * 288) + 216))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 409))], placeholder_shared[(((((int)threadIdx.z) * 288) + 73))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 409))], placeholder_shared[(((((int)threadIdx.z) * 288) + 217))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 410))], placeholder_shared[(((((int)threadIdx.z) * 288) + 74))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 410))], placeholder_shared[(((((int)threadIdx.z) * 288) + 218))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 411))], placeholder_shared[(((((int)threadIdx.z) * 288) + 75))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 411))], placeholder_shared[(((((int)threadIdx.z) * 288) + 219))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 412))], placeholder_shared[(((((int)threadIdx.z) * 288) + 76))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 412))], placeholder_shared[(((((int)threadIdx.z) * 288) + 220))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 413))], placeholder_shared[(((((int)threadIdx.z) * 288) + 77))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 413))], placeholder_shared[(((((int)threadIdx.z) * 288) + 221))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 414))], placeholder_shared[(((((int)threadIdx.z) * 288) + 78))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 414))], placeholder_shared[(((((int)threadIdx.z) * 288) + 222))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 415))], placeholder_shared[(((((int)threadIdx.z) * 288) + 79))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 415))], placeholder_shared[(((((int)threadIdx.z) * 288) + 223))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 416))], placeholder_shared[(((((int)threadIdx.z) * 288) + 80))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 416))], placeholder_shared[(((((int)threadIdx.z) * 288) + 224))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 459))], placeholder_shared[(((((int)threadIdx.z) * 288) + 81))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 459))], placeholder_shared[(((((int)threadIdx.z) * 288) + 225))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 460))], placeholder_shared[(((((int)threadIdx.z) * 288) + 82))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 460))], placeholder_shared[(((((int)threadIdx.z) * 288) + 226))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 461))], placeholder_shared[(((((int)threadIdx.z) * 288) + 83))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 461))], placeholder_shared[(((((int)threadIdx.z) * 288) + 227))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 462))], placeholder_shared[(((((int)threadIdx.z) * 288) + 84))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 462))], placeholder_shared[(((((int)threadIdx.z) * 288) + 228))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 463))], placeholder_shared[(((((int)threadIdx.z) * 288) + 85))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 463))], placeholder_shared[(((((int)threadIdx.z) * 288) + 229))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 464))], placeholder_shared[(((((int)threadIdx.z) * 288) + 86))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 464))], placeholder_shared[(((((int)threadIdx.z) * 288) + 230))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 465))], placeholder_shared[(((((int)threadIdx.z) * 288) + 87))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 465))], placeholder_shared[(((((int)threadIdx.z) * 288) + 231))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 466))], placeholder_shared[(((((int)threadIdx.z) * 288) + 88))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 466))], placeholder_shared[(((((int)threadIdx.z) * 288) + 232))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 467))], placeholder_shared[(((((int)threadIdx.z) * 288) + 89))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 467))], placeholder_shared[(((((int)threadIdx.z) * 288) + 233))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 510))], placeholder_shared[(((((int)threadIdx.z) * 288) + 90))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 510))], placeholder_shared[(((((int)threadIdx.z) * 288) + 234))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 511))], placeholder_shared[(((((int)threadIdx.z) * 288) + 91))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 511))], placeholder_shared[(((((int)threadIdx.z) * 288) + 235))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 512))], placeholder_shared[(((((int)threadIdx.z) * 288) + 92))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 512))], placeholder_shared[(((((int)threadIdx.z) * 288) + 236))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 513))], placeholder_shared[(((((int)threadIdx.z) * 288) + 93))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 513))], placeholder_shared[(((((int)threadIdx.z) * 288) + 237))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 514))], placeholder_shared[(((((int)threadIdx.z) * 288) + 94))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 514))], placeholder_shared[(((((int)threadIdx.z) * 288) + 238))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 515))], placeholder_shared[(((((int)threadIdx.z) * 288) + 95))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 515))], placeholder_shared[(((((int)threadIdx.z) * 288) + 239))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 516))], placeholder_shared[(((((int)threadIdx.z) * 288) + 96))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 516))], placeholder_shared[(((((int)threadIdx.z) * 288) + 240))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 517))], placeholder_shared[(((((int)threadIdx.z) * 288) + 97))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 517))], placeholder_shared[(((((int)threadIdx.z) * 288) + 241))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 518))], placeholder_shared[(((((int)threadIdx.z) * 288) + 98))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 518))], placeholder_shared[(((((int)threadIdx.z) * 288) + 242))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 561))], placeholder_shared[(((((int)threadIdx.z) * 288) + 99))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 561))], placeholder_shared[(((((int)threadIdx.z) * 288) + 243))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 562))], placeholder_shared[(((((int)threadIdx.z) * 288) + 100))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 562))], placeholder_shared[(((((int)threadIdx.z) * 288) + 244))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 563))], placeholder_shared[(((((int)threadIdx.z) * 288) + 101))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 563))], placeholder_shared[(((((int)threadIdx.z) * 288) + 245))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 564))], placeholder_shared[(((((int)threadIdx.z) * 288) + 102))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 564))], placeholder_shared[(((((int)threadIdx.z) * 288) + 246))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 565))], placeholder_shared[(((((int)threadIdx.z) * 288) + 103))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 565))], placeholder_shared[(((((int)threadIdx.z) * 288) + 247))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 566))], placeholder_shared[(((((int)threadIdx.z) * 288) + 104))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 566))], placeholder_shared[(((((int)threadIdx.z) * 288) + 248))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 567))], placeholder_shared[(((((int)threadIdx.z) * 288) + 105))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 567))], placeholder_shared[(((((int)threadIdx.z) * 288) + 249))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 568))], placeholder_shared[(((((int)threadIdx.z) * 288) + 106))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 568))], placeholder_shared[(((((int)threadIdx.z) * 288) + 250))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 569))], placeholder_shared[(((((int)threadIdx.z) * 288) + 107))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 569))], placeholder_shared[(((((int)threadIdx.z) * 288) + 251))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 612))], placeholder_shared[(((((int)threadIdx.z) * 288) + 108))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 612))], placeholder_shared[(((((int)threadIdx.z) * 288) + 252))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 613))], placeholder_shared[(((((int)threadIdx.z) * 288) + 109))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 613))], placeholder_shared[(((((int)threadIdx.z) * 288) + 253))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 614))], placeholder_shared[(((((int)threadIdx.z) * 288) + 110))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 614))], placeholder_shared[(((((int)threadIdx.z) * 288) + 254))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 615))], placeholder_shared[(((((int)threadIdx.z) * 288) + 111))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 615))], placeholder_shared[(((((int)threadIdx.z) * 288) + 255))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 616))], placeholder_shared[(((((int)threadIdx.z) * 288) + 112))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 616))], placeholder_shared[(((((int)threadIdx.z) * 288) + 256))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 617))], placeholder_shared[(((((int)threadIdx.z) * 288) + 113))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 617))], placeholder_shared[(((((int)threadIdx.z) * 288) + 257))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 618))], placeholder_shared[(((((int)threadIdx.z) * 288) + 114))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 618))], placeholder_shared[(((((int)threadIdx.z) * 288) + 258))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 619))], placeholder_shared[(((((int)threadIdx.z) * 288) + 115))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 619))], placeholder_shared[(((((int)threadIdx.z) * 288) + 259))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 620))], placeholder_shared[(((((int)threadIdx.z) * 288) + 116))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 620))], placeholder_shared[(((((int)threadIdx.z) * 288) + 260))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 663))], placeholder_shared[(((((int)threadIdx.z) * 288) + 117))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 663))], placeholder_shared[(((((int)threadIdx.z) * 288) + 261))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 664))], placeholder_shared[(((((int)threadIdx.z) * 288) + 118))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 664))], placeholder_shared[(((((int)threadIdx.z) * 288) + 262))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 665))], placeholder_shared[(((((int)threadIdx.z) * 288) + 119))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 665))], placeholder_shared[(((((int)threadIdx.z) * 288) + 263))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 666))], placeholder_shared[(((((int)threadIdx.z) * 288) + 120))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 666))], placeholder_shared[(((((int)threadIdx.z) * 288) + 264))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 667))], placeholder_shared[(((((int)threadIdx.z) * 288) + 121))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 667))], placeholder_shared[(((((int)threadIdx.z) * 288) + 265))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 668))], placeholder_shared[(((((int)threadIdx.z) * 288) + 122))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 668))], placeholder_shared[(((((int)threadIdx.z) * 288) + 266))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 669))], placeholder_shared[(((((int)threadIdx.z) * 288) + 123))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 669))], placeholder_shared[(((((int)threadIdx.z) * 288) + 267))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 670))], placeholder_shared[(((((int)threadIdx.z) * 288) + 124))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 670))], placeholder_shared[(((((int)threadIdx.z) * 288) + 268))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 671))], placeholder_shared[(((((int)threadIdx.z) * 288) + 125))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 671))], placeholder_shared[(((((int)threadIdx.z) * 288) + 269))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 714))], placeholder_shared[(((((int)threadIdx.z) * 288) + 126))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 714))], placeholder_shared[(((((int)threadIdx.z) * 288) + 270))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 715))], placeholder_shared[(((((int)threadIdx.z) * 288) + 127))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 715))], placeholder_shared[(((((int)threadIdx.z) * 288) + 271))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 716))], placeholder_shared[(((((int)threadIdx.z) * 288) + 128))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 716))], placeholder_shared[(((((int)threadIdx.z) * 288) + 272))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 717))], placeholder_shared[(((((int)threadIdx.z) * 288) + 129))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 717))], placeholder_shared[(((((int)threadIdx.z) * 288) + 273))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 718))], placeholder_shared[(((((int)threadIdx.z) * 288) + 130))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 718))], placeholder_shared[(((((int)threadIdx.z) * 288) + 274))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 719))], placeholder_shared[(((((int)threadIdx.z) * 288) + 131))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 719))], placeholder_shared[(((((int)threadIdx.z) * 288) + 275))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 720))], placeholder_shared[(((((int)threadIdx.z) * 288) + 132))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 720))], placeholder_shared[(((((int)threadIdx.z) * 288) + 276))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 721))], placeholder_shared[(((((int)threadIdx.z) * 288) + 133))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 721))], placeholder_shared[(((((int)threadIdx.z) * 288) + 277))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 722))], placeholder_shared[(((((int)threadIdx.z) * 288) + 134))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 722))], placeholder_shared[(((((int)threadIdx.z) * 288) + 278))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 765))], placeholder_shared[(((((int)threadIdx.z) * 288) + 135))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 765))], placeholder_shared[(((((int)threadIdx.z) * 288) + 279))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 766))], placeholder_shared[(((((int)threadIdx.z) * 288) + 136))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 766))], placeholder_shared[(((((int)threadIdx.z) * 288) + 280))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 767))], placeholder_shared[(((((int)threadIdx.z) * 288) + 137))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 767))], placeholder_shared[(((((int)threadIdx.z) * 288) + 281))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 768))], placeholder_shared[(((((int)threadIdx.z) * 288) + 138))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 768))], placeholder_shared[(((((int)threadIdx.z) * 288) + 282))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 769))], placeholder_shared[(((((int)threadIdx.z) * 288) + 139))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 769))], placeholder_shared[(((((int)threadIdx.z) * 288) + 283))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 770))], placeholder_shared[(((((int)threadIdx.z) * 288) + 140))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 770))], placeholder_shared[(((((int)threadIdx.z) * 288) + 284))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 771))], placeholder_shared[(((((int)threadIdx.z) * 288) + 141))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 771))], placeholder_shared[(((((int)threadIdx.z) * 288) + 285))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 772))], placeholder_shared[(((((int)threadIdx.z) * 288) + 142))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 772))], placeholder_shared[(((((int)threadIdx.z) * 288) + 286))], compute[(1)]);
    compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 773))], placeholder_shared[(((((int)threadIdx.z) * 288) + 143))], compute[(0)]);
    compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((((int)threadIdx.y) * 6) + 773))], placeholder_shared[(((((int)threadIdx.z) * 288) + 287))], compute[(1)]);
  }
  T_relu[(((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 128)) + (((int)threadIdx.y) * 8)) + ((int)blockIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + (((int)threadIdx.z) * 2)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 1024) + (((int)threadIdx.z) * 128)) + (((int)threadIdx.y) * 8)) + ((int)blockIdx.x)) + 64))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 16) + (((int)threadIdx.z) * 2)) + 1))]), 0.000000e+00f);
}

__device__ void fused_nn_max_pool2d_5_kernel0_device(float* __restrict__ placeholder, float* __restrict__ tensor){
  float tensor_local[1];
  tensor_local[(0)] = -3.402823e+38f;
  for (int dh = 0; dh < 3; ++dh) {
    for (int dw = 0; dw < 3; ++dw) {
      if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 235200) {
        tensor_local[(0)] = max(tensor_local[(0)], placeholder[(((((((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) / 1225) * 5041) + (((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 1225) / 35) * 142)) + (dh * 71)) + ((((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) % 35) * 2)) + dw))]);
      }
    }
  }
  if (((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) < 235200) {
    tensor[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)))] = tensor_local[(0)];
  }
}

__device__ void fused_nn_softmax_1_kernel0_device(float* __restrict__ placeholder, float* __restrict__ T_softmax_norm){
  float normal_reduce_temp0[1];
  float red_buf0[1];
  float T_softmax_exp[16];
  float normal_reduce_temp01[1];
  float red_buf01[1];
  normal_reduce_temp0[(0)] = -3.402823e+38f;
  for (int k_inner = 0; k_inner < 16; ++k_inner) {
    if (((((int)threadIdx.x) * 16) + k_inner) < 1000) {
      normal_reduce_temp0[(0)] = max(normal_reduce_temp0[(0)], placeholder[(((((int)threadIdx.x) * 16) + k_inner))]);
    }
  }
  unsigned int mask[1];
  float t0[1];
  red_buf0[(0)] = normal_reduce_temp0[(0)];
  ((int*)mask)[(0)] = 0;
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 32) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 32)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 16) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 16)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 8) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 8)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 4) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 4)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 2) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 2)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  t0[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 1) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 1)) << 2), red_buf0[(0)]);
  red_buf0[(0)] = max(red_buf0[(0)], t0[(0)]);
  red_buf0[(0)] = __hip_ds_bpermute(((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & (~63)) << 2), red_buf0[(0)]);
  for (int i1_inner_outer = 0; i1_inner_outer < 4; ++i1_inner_outer) {
    for (int i1_inner_inner_s = 0; i1_inner_inner_s < 4; ++i1_inner_inner_s) {
      if ((((((int)threadIdx.x) * 16) + (i1_inner_outer * 4)) + i1_inner_inner_s) < 1000) {
        T_softmax_exp[(((i1_inner_outer * 4) + i1_inner_inner_s))] = __ocml_exp_f32((placeholder[((((((int)threadIdx.x) * 16) + (i1_inner_outer * 4)) + i1_inner_inner_s))] - red_buf0[(0)]));
      }
    }
  }
  normal_reduce_temp01[(0)] = 0.000000e+00f;
  for (int k_inner1 = 0; k_inner1 < 16; ++k_inner1) {
    if (((((int)threadIdx.x) * 16) + k_inner1) < 1000) {
      normal_reduce_temp01[(0)] = (normal_reduce_temp01[(0)] + __hip_ds_bpermute(((((int)threadIdx.x) + (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & (~63))) << 2), T_softmax_exp[(k_inner1)]));
    }
  }
  unsigned int mask1[1];
  float t01[1];
  red_buf01[(0)] = normal_reduce_temp01[(0)];
  ((int*)mask1)[(0)] = 0;
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 32) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 32)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 16) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 16)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 8) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 8)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 4) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 4)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 2) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 2)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  t01[(0)] = __hip_ds_bpermute((((((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & 63) + 1) >= 64) ? __mbcnt_hi(-1, __mbcnt_lo(-1, 0)) : (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) + 1)) << 2), red_buf01[(0)]);
  red_buf01[(0)] = (red_buf01[(0)] + t01[(0)]);
  red_buf01[(0)] = __hip_ds_bpermute(((__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & (~63)) << 2), red_buf01[(0)]);
  for (int i1_inner_outer1 = 0; i1_inner_outer1 < 4; ++i1_inner_outer1) {
    for (int i1_inner_inner_s1 = 0; i1_inner_inner_s1 < 4; ++i1_inner_inner_s1) {
      if ((((((int)threadIdx.x) * 16) + (i1_inner_outer1 * 4)) + i1_inner_inner_s1) < 1000) {
        T_softmax_norm[((((((int)threadIdx.x) * 16) + (i1_inner_outer1 * 4)) + i1_inner_inner_s1))] = (__hip_ds_bpermute(((((int)threadIdx.x) + (__mbcnt_hi(-1, __mbcnt_lo(-1, 0)) & (~63))) << 2), T_softmax_exp[(((i1_inner_outer1 * 4) + i1_inner_inner_s1))]) / red_buf01[(0)]);
      }
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_5_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[600];
  __shared__ float placeholder_shared[768];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 12; ++rc_outer) {
    __syncthreads();
    if ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) < 600) {
      if (((((int)threadIdx.y) * 4) + ((int)threadIdx.x)) < 19) {
        if (((int)threadIdx.x) < 4) {
          pad_temp_shared[((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)))] = placeholder[(((((((rc_outer * 29400) + (((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) / 25) * 1225)) + (((int)blockIdx.y) * 175)) + ((((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 25) / 5) * 35)) + (((int)blockIdx.x) * 5)) + ((((((int)threadIdx.z) * 19) + (((int)threadIdx.y) * 4)) + ((int)threadIdx.x)) % 5)))];
        }
      }
    }
    if (((((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) / 24) + ((int)threadIdx.z)) < 32) {
      if ((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)) < 768) {
        if (((((int)threadIdx.y) * 5) + ((int)threadIdx.x)) < 24) {
          placeholder_shared[((((((int)threadIdx.z) * 24) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 9216) + (((int)threadIdx.z) * 288)) + (rc_outer * 24)) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 24; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 25) + (((int)threadIdx.y) * 5)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 24) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[(((((((((int)blockIdx.z) * 39200) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 175)) + (((int)threadIdx.y) * 35)) + (((int)blockIdx.x) * 5)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_36_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[4096];
  __shared__ float placeholder_shared[2048];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 8; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 32; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      pad_temp_shared[(((((((int)threadIdx.z) * 512) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 32)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((((rc_outer * 16384) + (((int)threadIdx.z) * 2048)) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.x) * 128)) + ((ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner >> 4) * 64)) + (((int)blockIdx.y) * 16)) + (ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner & 15)))];
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 16; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      placeholder_shared[(((((((int)threadIdx.z) * 256) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)blockIdx.z) * 16384) + (((int)threadIdx.z) * 2048)) + (rc_outer * 256)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 16)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 256; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 16) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 256) + rc_inner))], compute[(0)]);
    }
  }
  T_relu[((((((((int)blockIdx.z) * 512) + (((int)threadIdx.z) * 64)) + (((int)blockIdx.y) * 16)) + (((int)threadIdx.y) * 8)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 8) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_concatenate_10_kernel0_device(float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3){
  for (int ax0_ax1_fused_ax2_fused_ax3_fused_outer = 0; ax0_ax1_fused_ax2_fused_ax3_fused_outer < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_outer) {
    if ((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) < 352800) {
      T_concat[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))] = ((274400 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 274400))] : ((156800 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder1[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 156800))] : ((78400 <= (((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x))) ? placeholder2[(((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)) - 78400))] : placeholder3[((((ax0_ax1_fused_ax2_fused_ax3_fused_outer * 65536) + (((int)blockIdx.x) * 256)) + ((int)threadIdx.x)))])));
    }
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_15_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[1];
  __shared__ float pad_temp_shared[1188];
  __shared__ float placeholder_shared[1152];
  compute[(0)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 8; ++rc_outer) {
    for (int rx_outer = 0; rx_outer < 3; ++rx_outer) {
      __syncthreads();
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
        if ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 1188) {
          if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 38) {
            pad_temp_shared[((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[(((((((rc_outer * 14700) + (((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 99) * 1225)) + (((int)blockIdx.y) * 70)) + ((((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 99) / 33) * 35)) + rx_outer) + ((((((int)threadIdx.z) * 38) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 33)))];
          }
        }
      }
      for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 3; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
        if (((((int)threadIdx.x) / 12) + ((int)threadIdx.z)) < 32) {
          if (((((int)threadIdx.z) * 12) + ((int)threadIdx.x)) < 384) {
            if ((((((int)threadIdx.z) * 36) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 1152) {
              if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 36) {
                if ((((((int)blockIdx.z) * 32) + (((int)threadIdx.x) / 12)) + ((int)threadIdx.z)) < 96) {
                  placeholder_shared[((((((int)threadIdx.z) * 36) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[((((((((((int)blockIdx.z) * 27648) + ((((int)threadIdx.x) / 12) * 864)) + (((int)threadIdx.z) * 864)) + (rc_outer * 108)) + ((((int)threadIdx.x) % 12) * 9)) + (ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 * 3)) + rx_outer))];
                }
              }
            }
          }
        }
      }
      __syncthreads();
      for (int rc_inner = 0; rc_inner < 12; ++rc_inner) {
        for (int ry_inner = 0; ry_inner < 3; ++ry_inner) {
          compute[(0)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 99) + (ry_inner * 33)) + (((int)threadIdx.x) * 2)))], placeholder_shared[((((((int)threadIdx.z) * 36) + (rc_inner * 3)) + ry_inner))], compute[(0)]);
        }
      }
    }
  }
  T_relu[(((((((int)blockIdx.z) * 9248) + (((int)threadIdx.z) * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 32) + ((int)threadIdx.z)))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_13_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[560];
  __shared__ float placeholder_shared[256];
  compute[(0)] = 0.000000e+00f;
  compute[(1)] = 0.000000e+00f;
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      pad_temp_shared[((((((int)threadIdx.z) * 70) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = placeholder[((((((rc_outer * 19600) + (((int)threadIdx.z) * 2450)) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 35) * 1225)) + (((int)blockIdx.y) * 35)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 35)))];
    }
    if (((((int)threadIdx.z) * 2) + (((int)threadIdx.x) >> 4)) < 16) {
      if (((((int)threadIdx.z) * 32) + ((int)threadIdx.x)) < 256) {
        if (((int)threadIdx.x) < 32) {
          placeholder_shared[(((((int)threadIdx.z) * 32) + ((int)threadIdx.x)))] = placeholder1[((((((((int)blockIdx.z) * 4096) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + (rc_outer * 16)) + (((int)threadIdx.x) & 15)))];
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 16; ++rc_inner) {
      compute[(0)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 35) + ((int)threadIdx.x)))], placeholder_shared[(((((int)threadIdx.z) * 16) + rc_inner))], compute[(0)]);
      compute[(1)] = __ocml_fma_f32(pad_temp_shared[(((rc_inner * 35) + ((int)threadIdx.x)))], placeholder_shared[((((((int)threadIdx.z) * 16) + rc_inner) + 128))], compute[(1)]);
    }
  }
  T_relu[(((((((int)blockIdx.z) * 19600) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 35)) + ((int)threadIdx.x)))] = max((compute[(0)] + placeholder2[(((((int)blockIdx.z) * 16) + ((int)threadIdx.z)))]), 0.000000e+00f);
  T_relu[((((((((int)blockIdx.z) * 19600) + (((int)threadIdx.z) * 1225)) + (((int)blockIdx.y) * 35)) + ((int)threadIdx.x)) + 9800))] = max((compute[(1)] + placeholder2[((((((int)blockIdx.z) * 16) + ((int)threadIdx.z)) + 8))]), 0.000000e+00f);
}

__device__ void fused_nn_conv2d_add_nn_relu_20_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[2];
  __shared__ float pad_temp_shared[3128];
  __shared__ float placeholder_shared[224];
  for (int ff_init = 0; ff_init < 2; ++ff_init) {
    compute[(ff_init)] = 0.000000e+00f;
  }
  for (int rc_outer = 0; rc_outer < 16; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 6; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if (((((int)threadIdx.z) * 4) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 391)) < 8) {
        if (((((int)threadIdx.z) * 92) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 17)) < 184) {
          if (((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 3128) {
            if ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 1564) {
              if (((((int)threadIdx.x) * 6) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 92) {
                pad_temp_shared[(((((((int)threadIdx.z) * 1564) + (((int)threadIdx.y) * 92)) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((51 <= ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 391)) && (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 391) < 340)) ? placeholder[((((((rc_outer * 2312) + (((int)threadIdx.z) * 1156)) + (((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 391) * 289)) + ((((((int)threadIdx.y) * 92) + (((int)threadIdx.x) * 6)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 391)) - 51))] : 0.000000e+00f);
              }
            }
          }
        }
      }
    }
    if (((((int)threadIdx.z) * 2) + (((((int)threadIdx.x) / 7) + ((int)threadIdx.y)) >> 3)) < 4) {
      if ((((((int)threadIdx.z) * 16) + (((int)threadIdx.x) / 7)) + ((int)threadIdx.y)) < 32) {
        if ((((((int)threadIdx.z) * 112) + (((int)threadIdx.y) * 7)) + ((int)threadIdx.x)) < 224) {
          if (((((int)threadIdx.y) * 7) + ((int)threadIdx.x)) < 112) {
            if (((int)threadIdx.x) < 7) {
              if ((((((int)blockIdx.z) * 4) + (((int)threadIdx.z) * 2)) + (((int)threadIdx.y) >> 3)) < 128) {
                placeholder_shared[((((((int)threadIdx.z) * 112) + (((int)threadIdx.y) * 7)) + ((int)threadIdx.x)))] = placeholder1[(((((((((int)blockIdx.z) * 3584) + (((int)threadIdx.z) * 1792)) + ((((int)threadIdx.y) >> 3) * 896)) + (rc_outer * 56)) + ((((int)threadIdx.y) & 7) * 7)) + ((int)threadIdx.x)))];
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 8; ++rc_inner) {
      for (int ry_inner = 0; ry_inner < 7; ++ry_inner) {
        for (int ff = 0; ff < 2; ++ff) {
          compute[(ff)] = __ocml_fma_f32(pad_temp_shared[(((((rc_inner * 391) + (((int)threadIdx.y) * 17)) + (ry_inner * 17)) + ((int)threadIdx.x)))], placeholder_shared[(((((((int)threadIdx.z) * 112) + (ff * 56)) + (rc_inner * 7)) + ry_inner))], compute[(ff)]);
        }
      }
    }
  }
  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 2; ++ax1_inner_inner_inner) {
    T_relu[((((((((int)blockIdx.z) * 1156) + (((int)threadIdx.z) * 578)) + (ax1_inner_inner_inner * 289)) + (((int)threadIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(ax1_inner_inner_inner)] + placeholder2[((((((int)blockIdx.z) * 4) + (((int)threadIdx.z) * 2)) + ax1_inner_inner_inner))]), 0.000000e+00f);
  }
}

__device__ void fused_nn_conv2d_add_nn_relu_19_kernel0_device(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2){
  float compute[4];
  __shared__ float pad_temp_shared[92];
  __shared__ float placeholder_shared[336];
  for (int ff_init = 0; ff_init < 2; ++ff_init) {
    compute[(ff_init)] = 0.000000e+00f;
    compute[((ff_init + 2))] = 0.000000e+00f;
  }
  for (int rc_outer = 0; rc_outer < 32; ++rc_outer) {
    __syncthreads();
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner < 2; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) {
      if ((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 92) {
        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) < 31) {
          pad_temp_shared[((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner))] = (((3 <= ((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 23)) && (((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 23) < 20)) ? placeholder[((((((rc_outer * 1156) + (((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) / 23) * 289)) + (((int)blockIdx.y) * 17)) + ((((((int)threadIdx.z) * 31) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner) % 23)) - 3))] : 0.000000e+00f);
        }
      }
    }
    for (int ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 = 0; ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1 < 7; ++ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) {
      if (((((int)threadIdx.z) * 4) + (((int)threadIdx.x) >> 2)) < 12) {
        if (((((int)threadIdx.z) * 16) + ((int)threadIdx.x)) < 48) {
          if ((((((int)threadIdx.z) * 112) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 336) {
            if (((((int)threadIdx.x) * 7) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1) < 112) {
              if ((((((int)blockIdx.z) * 12) + (((int)threadIdx.z) * 4)) + (((int)threadIdx.x) >> 2)) < 192) {
                placeholder_shared[((((((int)threadIdx.z) * 112) + (((int)threadIdx.x) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))] = placeholder1[(((((((((int)blockIdx.z) * 10752) + (((int)threadIdx.z) * 3584)) + ((((int)threadIdx.x) >> 2) * 896)) + (rc_outer * 28)) + ((((int)threadIdx.x) & 3) * 7)) + ax0_ax1_fused_ax2_fused_ax3_fused_inner_inner_inner1))];
              }
            }
          }
        }
      }
    }
    __syncthreads();
    for (int rc_inner = 0; rc_inner < 4; ++rc_inner) {
      for (int rx_inner = 0; rx_inner < 7; ++rx_inner) {
        for (int ff = 0; ff < 2; ++ff) {
          compute[(ff)] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 23) + ((int)threadIdx.x)) + rx_inner))], placeholder_shared[(((((((int)threadIdx.z) * 56) + (ff * 28)) + (rc_inner * 7)) + rx_inner))], compute[(ff)]);
          compute[((ff + 2))] = __ocml_fma_f32(pad_temp_shared[((((rc_inner * 23) + ((int)threadIdx.x)) + rx_inner))], placeholder_shared[((((((((int)threadIdx.z) * 56) + (ff * 28)) + (rc_inner * 7)) + rx_inner) + 168))], compute[((ff + 2))]);
        }
      }
    }
  }
  for (int ax1_inner_inner_inner = 0; ax1_inner_inner_inner < 2; ++ax1_inner_inner_inner) {
    T_relu[((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 578)) + (ax1_inner_inner_inner * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)))] = max((compute[(ax1_inner_inner_inner)] + placeholder2[((((((int)blockIdx.z) * 12) + (((int)threadIdx.z) * 2)) + ax1_inner_inner_inner))]), 0.000000e+00f);
    T_relu[(((((((((int)blockIdx.z) * 3468) + (((int)threadIdx.z) * 578)) + (ax1_inner_inner_inner * 289)) + (((int)blockIdx.y) * 17)) + ((int)threadIdx.x)) + 1734))] = max((compute[((ax1_inner_inner_inner + 2))] + placeholder2[(((((((int)blockIdx.z) * 12) + (((int)threadIdx.z) * 2)) + ax1_inner_inner_inner) + 6))]), 0.000000e+00f);
  }
}


extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_27_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_27_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_11_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3) {
    if (*preempted) return;
    fused_concatenate_11_kernel0_device(T_concat, placeholder, placeholder1, placeholder2, placeholder3);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_7_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_7_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_34_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_34_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_max_pool2d_7_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_max_pool2d_7_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_11_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_11_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_max_pool2d_6_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_max_pool2d_6_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_9_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_concatenate_9_kernel0_device(T_concat, placeholder, placeholder1, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_3_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_3_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_9_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_9_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_29_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_29_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_33_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_33_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_23_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_23_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_26_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_26_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_10_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_10_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_max_pool2d_8_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_max_pool2d_8_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_dense_add_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_dense_add_kernel0_device(placeholder, placeholder1, T_add, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_14_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_14_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_9_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_9_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_24_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_24_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_7_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_concatenate_7_kernel0_device(T_concat, placeholder, placeholder1, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_32_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_32_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_4_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_4_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_17_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_17_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_8_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3) {
    if (*preempted) return;
    fused_concatenate_8_kernel0_device(T_concat, placeholder, placeholder1, placeholder2, placeholder3);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_10_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_10_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_2_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_2_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_11_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_11_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_8_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_8_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_21_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_21_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_6_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3, float* __restrict__ placeholder4, float* __restrict__ placeholder5) {
    if (*preempted) return;
    fused_concatenate_6_kernel0_device(T_concat, placeholder, placeholder1, placeholder2, placeholder3, placeholder4, placeholder5);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_8_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_8_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4_kernel0_device(placeholder, data_pack);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_22_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_22_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_12_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_12_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_batch_flatten_1_kernel0(int* preempted, int* task_slot, float* __restrict__ tensor, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_batch_flatten_1_kernel0_device(tensor, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_max_pool2d_9_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_max_pool2d_9_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_30_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_30_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_6_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_6_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel1(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ data_pack, float* __restrict__ bgemm) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2_kernel1_device(placeholder, data_pack, bgemm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_16_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_16_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_31_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_31_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_25_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_25_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_6_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_6_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_35_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_35_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel2(int* preempted, int* task_slot, float* __restrict__ bgemm, float* __restrict__ T_relu, float* __restrict__ placeholder) {
    if (*preempted) return;
    fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3_kernel2_device(bgemm, T_relu, placeholder);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_avg_pool2d_7_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_avg_pool2d_7_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_1_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_1_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_18_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_18_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_28_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_28_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_max_pool2d_5_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ tensor) {
    if (*preempted) return;
    fused_nn_max_pool2d_5_kernel0_device(placeholder, tensor);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_softmax_1_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ T_softmax_norm) {
    if (*preempted) return;
    fused_nn_softmax_1_kernel0_device(placeholder, T_softmax_norm);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_5_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_5_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_36_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_36_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_concatenate_10_kernel0(int* preempted, int* task_slot, float* __restrict__ T_concat, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ placeholder2, float* __restrict__ placeholder3) {
    if (*preempted) return;
    fused_concatenate_10_kernel0_device(T_concat, placeholder, placeholder1, placeholder2, placeholder3);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_15_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_15_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_13_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_13_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_20_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_20_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        

extern "C" __global__ void fused_nn_conv2d_add_nn_relu_19_kernel0(int* preempted, int* task_slot, float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_relu, float* __restrict__ placeholder2) {
    if (*preempted) return;
    fused_nn_conv2d_add_nn_relu_19_kernel0_device(placeholder, placeholder1, T_relu, placeholder2);
    if (threadIdx.x + threadIdx.y + threadIdx.z == 0)
        atomicAdd(task_slot, 1);
}        
